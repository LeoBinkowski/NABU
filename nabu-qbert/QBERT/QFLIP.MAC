	.Z80
	.RADIX	10
	.XLIST
	INCLUDE	COMMON.MRO
	INCLUDE	STRUCT.MRO
	INCLUDE	LINKTAB.EXA
	INCLUDE	CLKAT.MRO
	INCLUDE VARIABLE.EXA
	.LIST
	;
	EXTRN	CURFLIP,PUTDISK,RESTIT,FLIP3,REMOVEALL
	EXTRN	FLIP3,MISCOL,ADDSCOR,QNAME,INDEMO
	EXTRN	SOUND2,B_OFF,C_OFF,ZWSO1,ENSO1,DOSOUND
	;
	S1AM	EQU	1
	S2LICK	EQU	2
	;
FLIP::
	;	THIS ROUTINE WILL FLIP COLORS ACCORDING TO WHAT LEVEL
	;	IT IS AND WHO IS DOING THE FLIPPING.
	;	
	;	PARAMETERS PASSED:
	;
	;	C	-	WHO IS DOING THE FLIPPING (QBERT, SAM, SLICK)
	;	E	-	NUMBER OF TOP SQUARE TO BE FLIPPED
	;
	;	NUMBERS ARE ARRANGED AS FOLLOWS:
	;
	;		     28   29
	;		   30 	0   31
	;		 32   1   2   33
	;	       34   3   4   5   35
	;	     36	  6   7   8   9   37
	;	   38	10  11  12  13  14  39
	;	 40   15  16  17  18  19  20  41
	;	    21  22  23  24  25  26  27	  
	;
	;	NOTE: NUMBERS GREATER THAN 27 DENOTE POSSIBLE LOCATIONS FOR
	;	      TRANSPORTER DISCS.
	;
	LD	A,C			;GET THE ONE TO FLIP IT TO
	;
	CP	S1AM			;IF SAM
	JP	Z,SAMFLIP		;THEN SAM IS FLIPPING
	;
	CP	S2LICK
	JP	Z,SLIFLIP
	;		
	;	OTHERWISE QBERT IS DOING THE FLIPPING
	CALL	FINDLOC			;GET WHATEVER IS THERE
	CP	0FFH
	RET	Z
	CP	28			;IS IT A DISK?
	JR	NC,DISKOUT		;YES....DO DISKS INSTEAD
	;
	LD	C,A
	PUSH	BC
	CALL	FINDFL			;GET THE COLOR WE WANT TO FLIP TO
	LD	E,A
	POP	BC
	PUSH	DE
	PUSH	BC
	CALL	GETCLR
	POP	BC
	PUSH	BC
	CP	E			;ARE THE COLORS THE SAME
	JR	Z,QFLC1			;YES...THEN NO POINTS AWARDED
	;
	LD	A,E
	CP	2
	JR	NZ,P15
	;
	LD A,(INDEMO)
	CP 1
	JP Z,QFLC1			;IF IN DEMO DON'T BOTHER ADDING SCORE 
	PCALL	ADDSCOR,25H		;ADD 25 POINTS IF THE FINISH COLOR
	JR	QFLC1
	;
P15:
	LD A,(INDEMO)
	CP 1
	JP Z,QFLC1			;IF IN DEMO THEN DON'T BOTHER ADDING SC
	PCALL	ADDSCOR,15H		;15 POINTS IF NOT.
	;
QFLC1:	POP	BC
	POP	DE
	PUSH	BC
	CALL	FLIPIT
	POP	BC
	LD	A,C
	RET
DISKOUT:
	LD	C,A
	PUSH	BC
	LD	E,0
	CALL	PUTDISK
	POP	BC
	LD	A,C
	RET
SAMFLIP::
SLIFLIP::
	CALL	FINDLOC
	CP	27
	RET	NC
	PUSH	AF
	LD	C,A
	CALL	GGNEWC
	LD	E,A
	POP	AF
	LD	C,A
	JP	FLIPIT
GGNEWC::
	;	THIS ROUTINE WILL CALCULATE A NEW COLOR FOR A GREEN
	;	GUY'S CUBE TOP WHEN HE JUMPS ON IT
	;
	;
	CALL	GETCLR			;GET THE CURRENT COLOR FOR THE SQUARE
	LD	C,A			;STORE IT TEMPORARILY
	LD	A,(LEVEL)		;GET THE CURRENT LEVEL
	CP	1			;LEVEL 1?
	JR	Z,GG1US		;YES...THEN WORK WITH LEVEL 1 ALGORITH
	;
	CP	2			;LEVEL 2?
	JR	Z,GG2US		;YES...WORK WITH LEVEL 2 ALGORITHM
	;
	CP	3			;LEVEL 3?
	JR	Z,GG3US		;YES...WORK WITH LEVEL 3 ALGORITHM
	;
	CP	4			;LEVEL 4?
	JR	Z,GG4US		;YES...WORK WITH LEVEL 4 ALGORITHM
	;
	;	FIFTH AND BEYOND ALGORITHM IS:
	;	0 TO 1 TO 2 TO 0
	;
	LD	A,C			;OTHERWISE USE LEVEL 5 AND BEYOND ALG
	CP	2			;ARE WE AT COLOR 3
	JP	Z,SET0			;YES...FLIP IT TO COLOR 1
	;
	INC 	A			;OTHERWISE INCREMENT THE COLOR
	RET
	;
GG4US:
	;	FOURTH LEVEL ALGORITHM IS:
	;	DECREMENT COLOR UNLESS AT 0 ALREADY
	;
	LD	A,C			;GET THE CURRENT COLOR
	AND	A			;ARE WE AT COLOR 0
	RET	Z			;YES...LEAVE IT 0
	;
	DEC	A			;OTHERWISE BRING IT DOWN 1
	RET
	;
GG3US:
	;	THIRD LEVEL ALGORITHM IS:
	;	0 TO 2 TO 0
	;
	LD	A,C		;GET THE CURRENT COLOR
	CP	2		;IS IT 2?
	JP	Z,SET0		;YES...SET IT TO 0
	LD	A,2
	RET
	;
GG2US:
	;	SECOND LEVEL ALGORITHM IS:
	;	BACK 1 COLOR UNLESS AT COLOR 0 ALREADY
	;
	LD	A,C	;GET THE CURRENT COLOR
	AND	A
	RET	Z	;YES...THEN LEAVE IT THERE
	;
	DEC	A	;OTHERWISE JUST INCREMENT IT
	RET
GG1US:
	;	FIRST LEVEL ALGORITHM IS:
	;	0 TO 2
	;
	LD	A,C	;GET CURRENT COLOR
	AND	A	;ZERO ALREADY?
	RET	Z	;YES...THEN LEAVE IT LIKE THAT
	;
	LD	A,1	;OTHERWISE SET IT TO ANOTHER COLOR
	RET
QUERY::
	;	THIS ROUTINE WILL FIND A DISK OR TOP WITHOUT FLIPPING IT.
	LD	L,E
	LD	E,C
	JP	FINDLOC
	;
FLIPIT::
	;	THIS ROUTINE WILL FLIP TO ANY COLOR ANY TOP OF THE CUBE
	;
	;	PARAMETERS PASSED:
	;
	;	C	-	NUMBER OF CUBE TOP
	;	E	-	FLIP COLOR (0, 1, 2)
	;
	LD	A,C
	LD	(CURFLIP),A
	LD	A,E
	CP	1
	JR	NZ,FT2
	LD	A,23H
	JR	SOFF
FT2:
	CP	2
	JR	NZ,FT3
	LD	A,46H
	JR	SOFF
FT3:
	XOR	A
SOFF:
	LD	BC,(CURFLIP)
	LD	HL,CHATAB
	LD	B,0
	ADD	HL,BC
	LD	(HL),E
	LD	(COFSET),A	;SAVE THE COLOR OFFSET
	;
	LD	BC,(CURFLIP)	;GET THE # OF THE FLIP
	LD	B,0		;CLEAR GARBAGE
	LD	HL,PLOPTAB	;GET THE ADDRESS OF THE FLIP NAME
	ADD	HL,BC		;ADD EM
	LD	A,(HL)		;GET THE FLIP NAME SET
	LD	C,A		;NOW FOR USE WITH THE FLIP DEFINITIONS
	LD	B,0		;CLEAR GARBAGE
	SLA	C		;MULTIPLY BY 8
	SLA	C
	SLA	C
	LD	HL,PLOPDEF	;GET THE ADDRESS OF THE DEFINITION
	ADD	HL,BC		;ADD THE OFFSET
	LD	DE,WRKAREA	;GET THE ADDRESS OF THE WORK AREA
	LD	BC,8
	LDIR			;MOVE THOSE BYTES INTO THE WORK AREA
	;
	;	NOW WE WORK WITH THOSE BYTES
	;
	LD	A,(COFSET)	;GET THE OFFSET
	AND	A		;IS IT ZERO?
	JP	Z,C1FLIP	;YES...CONTINUE WITH LOADING
	;
	LD	B,8		;FOR THE 8 BYTES IN THE WORK AREA
	LD	HL,WRKAREA	;STARTING AT THE BEGINNING
OFFLP:	
	LD	A,(HL)		;GET A BYTE
	LD	DE,(COFSET)	;GET THE OFFSET
	ADD	A,E		;ADD EM
	LD	(HL),A		;WRITE IT BACK
	INC	HL
	DJNZ	OFFLP		;DO UNTIL FINISHED
	;
C1FLIP:	;NOW LOAD THOSE BYTES IN THE NAME TABLE, USING THE ADDRESS
	;THAT IS GIVEN FROM THE TABLE
	;
	LD	HL,FLIPLOC	;GET THE ADDRESS OF THE LOCATIONS TABLE
	LD	BC,(CURFLIP)	;GET THE NUMBER TO FLIP IT TO
	LD	B,0		;CLEAR GARBAGE
	SLA	C		;MULTIPLY IT BY 2 (FOR A 16 BIT VALUE)
	ADD	HL,BC
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	EX	DE,HL
	LD	BC,3C00H
	ADD	HL,BC
	LD	(TMP16),HL	;HOLD ONTO IT FOR A BIT
	PCALL	VRAML8,4,WRKAREA	;LOAD THE FIRST 4 IN
	LD	HL,(TMP16)	;GET THE AMOUNT AGAIN
	LD	BC,32		;OFFSET IT TO THE NEXT LINE
	ADD	HL,BC
	PCALL	VRAML8,4,WRKAREA+4	;LOAD IN THE NEXT 4 BYTES
	;
	;	NOW SEE IF WE ARE FINISHED FLIPPING THE PYRAMID
	;
CKOVER::
	;	THIS ROUTINE WILL SEE IF THE SCREEN IS LOADED WITH ALL OF THE
	;	PROPER COLORS. 
	;
	;
	;	SINCE IT IS NOT LEVELS 1 OR 3 THEN WE USE FLIP3 INSTEAD
	;
	LD	A,2
	LD	HL,CHATAB	;STARTING WITH THE BEGINNING OF THE TABLE
	LD	B,28		;28 CUBE TOPS
ZAPIT:	AND	(HL)		;SHOULD BE ALL THE SAME
	INC	HL		;NEXT VALUE PLEASE
	DJNZ	ZAPIT		;DO UNTIL DONE
	;
	LD	C,2		;IS IT THE SAME AS THE ORIGINAL
	CP	C
	RET	NZ		;NO...THEN NOT FINISHED
	;
	CALL	REMOVEALL	;GET RID OF TIM'S TASKS	
	ASIGN8.	(RSTBRD),1
	;
	RET
DOFLASH::
	;THIS ROUTINE WILL FLASH THE TOPS AT THE END OF A ROUND
	;
	PCALL SOUND2,ENSO1	;START END OF ROUND SOUND
	PCALL SOUND2,B_OFF
	PCALL SOUND2,C_OFF
	SETSK	WAIT1I,WT1ITCB,1,1
	SETSK	DOSOUND,TASKSND,1,1
	XOR	A
	LD	(FLTIMR),A
WTFLSH:	CALL	ML_FLSH
	INC8.	(FLTIMR)
	CP	18
	JR	NZ,WTFLSH
	;
	XOR	A
	LD	(RSTBRD),A
	N.CLKRV	WT1ITCB
	PCALL SOUND2,ZWSO1
	PCALL SOUND2,B_OFF
	PCALL SOUND2,C_OFF	;PLAY ZOOWHIP AT END OF ROUND
	RET
ML_FLSH::
	LD	A,(FLTIMR)
	AND	1
	JR	Z,WHITFL
	;
	PCALL	NEWFLASH,1
	PCALL	WAIT,4
;	CALL	WAIT
;	PCALL	RESTIT,(FLIP3),2000H+23H*10H
;	CALL	WAIT
;	PCALL	RESTIT,(FLIP3),2800H+23H*10H
;	CALL	WAIT
;	PCALL	RESTIT,(FLIP3),3000H+23H*10H
	RET
WHITFL:
	PCALL	NEWFLASH,0
;	CALL	WAIT
;	PCALL	RESTIT,WHITE,2000H+23H*10H
;	CALL	WAIT
;	PCALL	RESTIT,WHITE,2800H+23H*10H
;	CALL	WAIT
;	PCALL	RESTIT,WHITE,3000H+23H*10H
	PCALL	WAIT,4
	RET
	;
NEWFLASH::
	LD	A,C
	LD	(TMP16),A		;SAVE THE COLOR FLAG
	LD	IX,QNAME	;GET THE ADDRESS OF THE NAME TABLE
	LD	BC,3C00H	;AND OF THE VRAM VERSION
FLOOP:	
	LD	A,(IX)		;GET A BYTE
	AND	A		;IF ZERO THEN DON'T FIDDLE WITH IT
	JR	Z,NOVWR		
	;
	CP	23H		;IS IT A PYRAMID PATTERN?
	JR	NC,NOVWR	;NO..THEN DON'T FIDDLE WITH IT
	;
	LD	E,A
	LD	A,(TMP16)
	AND	A
	JR	Z,DOVWR		;IF NO OFFSET THEN GO DIRECTLY TO THE WRITE
	;
	LD	A,46H		;GET THE NUMBER 2 COLOR OFFSET
	ADD	A,E		;ADD IT TO THE CURRENT PATTERN NUMBER
	LD	E,A		;STORE IT AWAY
DOVWR:
	PUSH	BC		;SAVE THE CURRENT RAM ADDRESS
	CALL	VRAMWR
	POP	BC
NOVWR:	
	INC	IX
	INC	BC
	LD	HL,3C00H+300H	;GET THE ADDRESS OF THE END OF THE NAME TABLE
	SBC	HL,BC		;SUBTRACT THE CURRENT ADDRESS FROM IT
	JP	NC,FLOOP	;IF NOT THERE, THEN DO AGAIN
	RET	
WAIT1I:	ASIGN8.	(WTFLAG),1
	RET
WAIT:
	LD	B,C		;WAIT THE NUMBER OF INTERRUPTS SPECIFIED
WAIT2:
	XOR	A		;CLEAR THE FLAG
	LD	(WTFLAG),A
INWT:	LD	A,(WTFLAG)	;WAIT UNTIL IT GETS SET AGAIN
	AND	A
	JR	Z,INWT
	DJNZ	WAIT2		;DO FOR THE NUMBER OF TIMES SPECIFIED
	RET
;
FINDFL::
	;	THIS ROUTINE FIGURES OUT WHAT COLOR TO FLIP TO FOR Q*BERT,
	;	GIVEN THE CURRENT COLOR, AND ASSUMING THE LEVEL IS SET
	;	
	;
	;	PARAMETERS PASSED:
	;		C	-	NUMBER OF SQUARE
	;
	;	PARAMETERS RETURNED:
	;		A	-	NEW COLOR
	;
	CALL	GETCLR			;GET THE CURRENT COLOR FOR THE SQUARE
	LD	C,A			;STORE IT TEMPORARILY
	LD	A,(LEVEL)		;GET THE CURRENT LEVEL
	CP	1			;LEVEL 1?
	JR	Z,LEV1US		;YES...THEN WORK WITH LEVEL 1 ALGORITH
	;
	CP	2			;LEVEL 2?
	JR	Z,LEV2US		;YES...WORK WITH LEVEL 2 ALGORITHM
	;
	CP	3			;LEVEL 3?
	JR	Z,LEV3US		;YES...WORK WITH LEVEL 3 ALGORITHM
	;
	CP	4			;LEVEL 4?
	JR	Z,LEV4US		;YES...WORK WITH LEVEL 4 ALGORITHM
	;
	;	FIFTH AND BEYOND ALGORITHM IS:
	;	0 TO 1 TO 2 TO 0
	;
	LD	A,C			;OTHERWISE USE LEVEL 5 AND BEYOND ALG
	CP	2			;ARE WE AT COLOR 3
	JR	Z,SET0			;YES...FLIP IT TO COLOR 1
	;
	INC 	A			;OTHERWISE INCREMENT THE COLOR
	RET
	;
SET0:	XOR	A			;SET TO COLOR 0
	RET
	;
LEV4US:
	;	FOURTH LEVEL ALGORITHM IS:
	;	0 TO 1 TO 2 TO 1
	;
	LD	A,C			;GET THE CURRENT COLOR
	CP	2			;ARE WE AT COLOR 2
	JR	Z,SET1			;YES...FLIP IT TO COLOR 1
	;
	INC	A
	RET
	;
SET1:	
	LD	A,1			;SET TO COLOR 1
	RET
	;
LEV3US:
	;	THIRD LEVEL ALGORITHM IS:
	;	0 TO 2 TO 0
	;
	LD	A,C		;GET THE CURRENT COLOR
	CP	2		;IS IT 2?
	JR	Z,SET0		;YES...SET IT TO 0
	LD	A,2
	RET
	;
LEV2US:
	;	SECOND LEVEL ALGORITHM IS:
	;	0 TO 1 TO 2
	;
	LD	A,C	;GET THE CURRENT COLOR
	CP	2	;IS IT 2?
	RET	Z	;YES...THEN LEAVE IT THERE
	;
	INC	A	;OTHERWISE JUST INCREMENT IT
	RET
LEV1US:
	;	FIRST LEVEL ALGORITHM IS:
	;	0 TO 2
	;
	LD	A,2
	RET
GETCLR:
	LD	B,0		;CLEAR UPPER GARBAGE NYBBLE
	LD	HL,CHATAB	;GET THE ADDRESS OF THE TABLE
	ADD	HL,BC		;ADD THE OFFSET
	LD	A,(HL)		;GET THE NUMBER THERE
	RET
FINDLOC::
	;	THIS ROUTINE WILL ARRIVE AT THE LOCATION OF THE FLIP GIVEN
	;	THE Y AND X OF THE OBJECT THAT WISHES TO DO THE FLIP.
	;		
	;	PARAMETERS PASSED:
	;
	;	E	- X OF THE OBJECT WISHING TO FLIP
	;	L	- Y OF THE OBJECT WISHING TO FLIP
	;
	;	PARAMETERS RETURNED:
	;
	;	A	- CUBE LOCATION TO FLIP
	;		  0FFH	IF NO CUBE LOCATION THERE.
	;
	LD	A,E		;STORE THE X AND Y FOR USE LATER
	LD	(OBJX),A
	LD	A,L
	LD	(OBJY),A
	;
	LD	C,0		;INITIALIZE START OF TABLE
	ASIGN8.	(LLIMIT),42
FLIPCK:
	PUSH	BC		;SAVE HOW MUCH WE STILL HAVE TO LOOP
	LD	E,C		;GET WHICH LOCATION WE ARE CHECKING NOW
	LD	D,0		;CLEAR GARBAGE
	SLA	E		;MULTIPLY TIMES 2 (FOR WORDS)
	LD	HL,FLIPLOC	;GET THE LOCATIONS TABLE ADDRESS
	ADD	HL,DE		;NOW ADD TO THE BASE ADDRESS
	LD	E,(HL)		;GET THE LOWER BYTE
	INC	HL		
	LD	D,(HL)		;NOW GET THE UPPER BYTE
	LD	B,E		;TEMPORARILY STORE THE LOWER BYTE
	SRL	D	
	RR	E
	SRL	D		;DIVIDE THE WORD WE GOT BY 4
	RR	E
	LD	A,E		;NOW GET THE LOWER PART (UPPER IS CLEAR)
	AND	0FCH		;KEEP THE GOOD STUFF, ELIMINATE THE GARBAGE
	LD	(BEGY),A	;SAVE THE Y AWAY
	LD	A,B		;NOW GET THE LOWER BYTE AGAIN
	AND	1FH		;NOW GET THE X PART FROM THAT
	SLA	A		;AND	MULTIPLY IT BY 8 TO GET X PIXEL COORD
	SLA	A
	SLA	A
	LD	(BEGX),A	;STORE THE BEGINNING X
	LD	A,(BEGY)
	LD	BC,(OBJY)	;GET THE OBJECT'S X
	CP	C
	JR	NC,FCKAGAIN	;WAS IT ABOVE IT?
	;
	ADD	A,16		;GET THE OTHER BOUNDARY *****TEST HERE*****
	CP	C		;NOW TEST 'EM
	JR	NC,GOTYOK	;TEST OK? THEN TRY X
FCKAGAIN:
	POP	BC		;OTHERWISE GO TO THE NEXT ONE
	INC	BC
	LD	A,(LLIMIT)	;HAVE WE HIT THE LOOP LIMIT
	CP	C
	JP	NZ,FLIPCK	;NO...CONTINUE CHECKING
	JR	NOPOPF		;OTHERWISE LEAVE.
NOPOS:
	; THERE WILL BE A CHECK FOR DISCS LATER
	POP	BC
NOPOPF:	LD	A,0FFH		;NO MATCH WAS FOUND
	RET
GOTYOK:
	LD	A,(BEGX)	;GET THE BEGINNING X
	LD	BC,(OBJX)	;GET THE OBJECT'S X
	CP	C		;IS THE X PAST THE BEGINNING?
	JR	NC,FCKAGAIN	;NO...THEN NO MATCH
	ADD	A,23		;ADD THE OTHER LIMIT
	CP	C		;IS THE X BEFORE THIS LIMIT?
	JR	C,FCKAGAIN	;NO...THEN NO MATCH
	POP	BC		;OTHERWISE GET THE NUMBER WE'RE WORKING ON
	LD	A,C		
	CP	28		;IS IT GREATER THAN 27?
	RET	C		;NO...THEN RETURN IT
	LD	HL,CHATAB	;GET THE ADDRESS OF THE CHANGE TABLE
	LD	B,0		;CLEAR GARBAGE
	ADD	HL,BC		;ADD OFFSET
	LD	A,(HL)		;GET THE NUMBER THERE
	AND	A		;TEST IT
	LD	A,C		;PUT THE RIGHT NUMBER IN
	RET	NZ		;GREATER THAN ZERO? THEN OK
	LD	A,0FFH		;OTHERWISE NOTHING THERE
	RET			;RETURN TO THE CALLER
PLOPTAB::
	DB	0
	DB	1,2
	DB	3,4,5
	DB	1,6,6,2
	DB	3,4,4,4,5
	DB	1,6,6,6,6,2
	DB	3,4,4,4,4,4,5
	;
	;THIS PORTION OF THE TABLE IS THE DISK DEFINITIONS
	;
	DB	7,7,8,8,7,7,8,8,7,7,8,8,7,7
	;
PLOPDEF::
	DB	1,2,3,4
	DB	5,6,7,8
	;
	DB	9,0AH,0BH,0CH
	DB	0DH,0EH,0FH,10H
	;
	DB	11H,12H,13H,14H
	DB	1BH,0EH,0FH,1CH
	;
	DB	1,2,17H,18H
	DB	5,6,7,8
	;
	DB	19H,1AH,17H,18H
	DB	5,6,7,8
	;
	DB	19H,1AH,3,4
	DB	5,6,7,8
	;
	DB	11H,12H,0BH,0CH
	DB	1BH,0EH,0FH,10H
	;
	DB	70H,72H,71H,73H
	DB	0FFH,0FFH,0FFH,0FFH
	;
	DB	74H,76H,75H,77H
	DB	78H,79H,0FFH,0FFH
FLIPLOC::
	DW	8EH
	DW	0CCH,0D0H
	DW	12AH,12EH,132H
	DW	168H,16CH,170H,174H
	DW	1C6H,1CAH,1CEH,1D2H,1D6H
	DW	204H,208H,20CH,210H,214H,218H
	DW	262H,266H,26AH,26EH,272H,276H,27AH
	;
	DW	2DH,31H,6BH,73H,0C9H,0D5H,107H
	DW	117H,165H,179H,1A3H,1BBH,201H,21DH
	END

