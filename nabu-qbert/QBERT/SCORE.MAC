	.Z80
	.RADIX 10
	.XLIST
	Z80	EQU 	0FFH
	INCLUDE LINKTAB.EXA
	INCLUDE COMMON.MRO
	INCLUDE STRUCT.MRO
	INCLUDE ARITH.MRO
	INCLUDE VARIABLE.EXA
	EXTRN QNAME,C_OFF,FRESO1,FRESO2,SOUND2,MOVEOUT
	EXTRN CREST,PUTDISK,FLIPIT,CDECFM,CASHELL,GAMEOPT,LASTPL
	.LIST
	;
BONUS:	DB	'B'+80H,'O'+80H,'N'+80H,'U'+80H,'S'+80H	;BONUS MESSAGE
GAMOV:	DB	'G'+80H,'A'+80H,'M'+80H,'E'+80H,0	;GAME OVER MESSAGE
	DB	'O'+80H,'V'+80H,'E'+80H,'R'+80H

;***THIS ROUTINE WILL HANDLE SETTING UP THE STACK WITH THE PROPER VALUES
;	REQUIRED FOR THE ENDSCREEN IN THE STANDARD SHELL.
ENDIT::
	LD SP,(6)
	LD A,(GAMEOPT)
	CP 1
	JP NZ,ENDI2		;IF OPTION IS NOT 0 THEN IT IS A 2 PLAYER GAME
	LD BC,0003
	PUSH BC
	PCALL BCDTOASC,P1SCORE,BUF1A
	LD HL,BUF1A
	PUSH HL
	LD HL,0000
	PUSH HL
	JP CASHELL		;GO TO BEGINNING WHERE SHELL IS CALLED
ENDI2:
	LD BC,0002
	PUSH BC
	PCALL BCDTOASC,P1SCORE,BUF1A
	LD HL,BUF1A
	PUSH HL
	PCALL BCDTOASC,P2SCORE,BUF2A
	LD HL,BUF2A
	PUSH HL
	JP CASHELL		;GO TO BEGGINING WHERE SHELL IS CALLED
;***END OF ROUTINE TOO HANDLE END GAME
DETPLA::
	;
	LD	A,(PLAYER)		;SAVE LAST PLAYER
	LD	(LASTPL),A
	LD	A,(GAMEOPT)		;GET GAME OPTION
	CP	1			;IS IT ONE PLAYER
	JR	Z,ONEPLA		;IF SO HANDLE ONLY ONE PLAYER
	;				;ELSE HANDLE TWO PLAYER GAME
	LD	A,(NEXTUP)		;GET THE CURRENT PLAYER
	AND	A			;IF ZERO THEN ACTUALLY 1
	JR	NZ,PLAY2		;CHECK FOR PLAYER TWO
	;
	LD	A,(P1MEN)		;IF PLAYERS LEFT ON PLAYER 1
	CP	0FFH
	JP	NZ,P1UP			;GO DO PLAYER 1
	LD	A,(P2MEN)		;OTHERWISE IF PLAYERS LEFT ON TWO
	CP 	0FFH
	JP	NZ,P2UP			;GO DO PLAYER 2
	JP	ENDIT			;IF NONE LEFT ON BOTH ENDIT
	;
PLAY2:
	LD 	A,(P2MEN)		;GET MEN LEFT FOR PLAYER 2
	CP	0FFH
	JP	NZ,P2UP			;IF MEN LEFT GO DO PLAYER 2
	LD	A,(P1MEN)		;GET MEN LEFT FOR PLAYER 1
	CP	0FFH
	JP	NZ,P1UP			;IF MEN LEFT ON PLAYER 1 GO DO 1
	JP	ENDIT			;OTHERWISE NONE LEFT AT ALL SO ENDIT
	;
ONEPLA::
	LD	A,(P1MEN)		;GET NUMBER OF MEN LEFT FOR PLAYER 1
	CP	0FFH
	JP	NZ,P1UPND		;IF HE HAS ANY LEFT SET PLAYER UP TO 1
	JP	ENDIT			;ELSE NO MEN LEFT END GAME
	;
P2UP::
	LD	A,1		;SET PLAYER TO 2
	LD	(PLAYER),A
	XOR	A		
	LD	(NEXTUP),A	;SET NEXT ONE UP TO BE PLAYER 1
	LD	A,(LASTPL)
	AND	A
	JP	NZ,P1UPND
	;
	LD	BC,44		;44 BYTES TO MOVE
	LD	HL,LEVEL	;FROM THE WORKING GAME DATA
	LD	DE,P1LEVEL	;TO PLAYER 1'S DATA
	LDIR
	LD	BC,44		;NOW TO PUT IN THE NEW DATA
	LD	HL,P2LEVEL
	LD	DE,LEVEL
	LDIR
	N.CLKRV	0
	CALL	CREST
	JP	NPSCSET		;NEW PLAYER SCREEN SETUP
	;
P1UP::
	XOR	A
	LD	(PLAYER),A		;THEN SET  TO PLAYER 1
	LD	A,1
	LD	(NEXTUP),A		;SET NEXT UP TO PLAYER 2
	LD	A,(LASTPL)
	AND	A
	JR	Z,P1UPND
	LD	BC,44
	LD	HL,LEVEL
	LD	DE,P2LEVEL
	LDIR
	LD	BC,44
	LD	HL,P1LEVEL
	LD	DE,LEVEL
	LDIR
P1UPND:					;JUMPING HERE IS FOR ONE PLAYER GAME
					;NO NEED TO DUMP AND RELOAD OLD
					;SCREEN FORONE PLAYER.
	N.CLKRV	0
	CALL	CREST
	;
NPSCSET::
	;	THIS ROUTINE WILL SET UP THE SCREEN SO IF ANOTHER PLAYER	;	GETS HIS TURN
	;
	CALL	CRBEG
	LD	HL,CHATAB	;GET THE CHANGE TABLE ADDRESS
	LD	C,0		;INITIALIZE COUNTER
SCSLP:	LD	A,(HL)		;GET THE VALUE AT THE ADDRESS
	AND	A		;IF ZERO ALREADY, DON'T MODIFY
	JR	Z,SKPST
	;
	PUSH	BC		;SAVE COUNTER AND ADDRESS
	PUSH	HL
	LD	E,A
	CALL	FLIPIT		;SET THAT PARTICULAR TOP
	POP	HL		;RESTORE COUNTER AND ADDRESS
	POP	BC
SKPST:	INC	C		;INCREMENT COUNTER
	INC	HL		;INCREMENT ADDRESS
	LD	A,C		;GET THE COUNTER
	CP	28		;= 28?
	JR	NZ,SCSLP	;NO...KEEP DOIN' IT
	;
	;	NOW SET UP THE DISKS
	;
SCS1L:	LD	A,(HL)		;GET THE NUMBER THERE
	AND	A		
	JR	Z,SKPS1		;NOTHING THERE? THEN DON'T PUT A DISK
	;
	PUSH	BC
	PUSH	HL	
	LD	E,1
	CALL	PUTDISK
	POP	HL
	POP	BC
SKPS1:	INC	C
	INC	HL
	LD	A,C
	CP	42
	JR	NZ,SCS1L	
	CALL	CREND
	RET
;
ADDSCORE::
;	THIS ROUTINE WILL ADD A 16 BIT BCD AMOUNT TO THE
;	CURRENT PLAYER'S SCORE
;	
;	PARAMETERS PASSED:
;			BC-	BCD AMOUNT OF SCORE TO BE ADDED
;
	LD	(TMP24),BC		;STORE THE AMOUNT TO BE ADDED
	XOR	A			;CLEAR HIGHEST ORDER OF IT
	LD	(TMP24+2),A
	LD	A,(PLAYER)		;GET THE PLAYER NUMBER
	AND	A			;IS IT ZERO? (FIRST PLAYER)
	JP	NZ,PLAY2ADD		;NO....THEN IT'S SECOND PLAYER
	;
	  PCALL	BCDADD,P1SCORE,TMP24,P1SCORE	;ADD TO PLAYER 1 SCORE
	  PCALL	BCDADD,P1FMSC,TMP24,P1FMSC	;AND TO THE FREE MAN SCORE
	  PCALL	CP24.,P1FMSC,FMSCOR		;HIGHER THAN FREE MAN SCORE?
	  JR	Z,DO1FM
	  JR	C,CONT1DIS			;NO...CONTINUE WITH DISPLAYING
	  ;
DO1FM:	  PCALL	BCDSUB,P1FMSC,P1FMSC,FMSCOR	;SUBTRACT 14000
	  INC8.	(P1MEN)
	  PCALL	PUTFM,(P1MEN)
	  PCALL SOUND2,FRESO1
	  PCALL SOUND2,FRESO2
	  PCALL SOUND2,C_OFF	;MAKE FREEMAN SOUND
CONT1DIS:
	  PCALL	BCDTOASC,P1SCORE,BUF1A	;MAKE IT INTO AN ASCII STRING
	  PCALL	VRAML8,6,BUF1A,3C24H
	  LD	BC,P1SCORE
	  JP	DOHISC			;CHECK HIGH SCORE
PLAY2ADD:
	  PCALL	BCDADD,P2SCORE,TMP24,P2SCORE	;ADD TO PLAYER 2 SCORE
	  PCALL	BCDADD,P2FMSC,TMP24,P2FMSC	;AND TO THE FREE MAN SCORE
	  PCALL	CP24.,P2FMSC,FMSCOR		;HIGHER THAN FREE MAN SCORE?
	  JR	Z,DO2FM
	  JR	C,CONT2DIS
	  ;
DO2FM:	  PCALL	BCDSUB,P2FMSC,P2FMSC,FMSCOR	;SUBTRACT 14000
	  INC8.	(P2MEN)
	  PCALL	PUTFM,(P2MEN)
	  PCALL SOUND2,FRESO1
	  PCALL SOUND2,FRESO2
	  PCALL SOUND2,C_OFF	;MAKE FREEMAN SOUND
CONT2DIS:
	  PCALL	BCDTOASC,P2SCORE,BUF1A
	  PCALL VRAML8,6,BUF1A,3C37H
	  LD	BC,P2SCORE
	  JP	DOHISC
DECFM::
	;	THIS ROUTINE WILL DECREMENT THE FREE MEN AND STOP THE GAME FOR
	;	PUT UP A MESSAGE IF THAT PLAYER'S GAME IS OVER
	XOR A
	LD (CDECFM),A
	LD A,01
	LD	A,(PLAYER)
	AND	A
	JR	NZ,DECP2
	;
	LD IX,QCONTROL			;GET ADDRESS OF QBERT CONTROL MATRIX
	LD A,(IX+3)
	LD (P1XC),A			;SAVE PLAYER 1 LAST SQUARE X COORDINATE
	LD A,(IX+4)
	LD (P1YC),A			;SAVE PLAYER 1 LAST SQUARE Y COORDINATE
	PCALL	ERAFM,(P1MEN)
	DEC8.	(P1MEN)			;DECREMENT THE MEN
	LD	A,(P1MEN)
	CP	0FFH			;ARE THERE ABSOLUTELY NO MEN LEFT?
	JP	NZ,DETPLA
	PCALL	VRAML8,9,QNAME+3,3D8BH	;PUT 'PLAYER 1' IN MIDDLE OF SCREEN
	JR	PUTGMO			;PUT THE GAME OVER MESSAGE
DECP2:	
	LD IX,QCONTROL			;GET QBERT CONTROL MATRIX ADDRESS
	LD A,(IX+3)			;LOAD A WITH THE LAST X COORD
	LD (P2XC),A			;SAVE IT
	LD A,(IX+4)			;GET THE LAST Y COORD
	LD (P2YC),A			;SAVE THE Y
	PCALL	ERAFM,(P2MEN)
	DEC8.	(P2MEN)
	LD	A,(P2MEN)
	CP	0FFH
	JP	NZ,DETPLA
	PCALL	VRAML8,9,QNAME+15H,3D8BH
PUTGMO:
	PCALL	VRAML8,9,GAMOV,3D6BH
	CALL	MOVEOUT
	CALL	WAIT1S
	CALL	WAIT1S
	JP	DETPLA
ERAFM::
	;	THIS ROUTINE WILL ERASE A FREE MAN FROM ANY ONE OF
	;	THE SIX SPOTS ON THE SCREEN
	;	
	LD	IX,NOQDEF
	LD	A,C
	AND	A
	RET	Z
	CP	6
	JR	C,CPUTFM
	;
	LD	A,6
	JR	CPUTFM
PUTFM::	;	THIS ROUTINE WILL PUT UP FREE MEN ON THE QBERT SCREEN
	;	THERE IS A MAXIMUM OF 6 Q*BERT FREE MEN VISIBLE ON THE 
	;	SCREEN AT ANY ONE TIME.
	;
	;	PARAMETERS PASSED:
	;			 C -	NUMBER OF THE FREE MAN THAT IS TO
	;				BE PUT UP
	;
	LD	IX,FMQDEF	;SET THE DEFINITION TO QBERTS
	LD	A,C		;GET THE NUMBER OF THE ONE TO PUT UP
	CP	6		;IS IT GREATER THAN 6?
	JR	C,CPUTFM	;NO...CONTINUE
	;
	LD	A,6		;OTHERWISE MAKE IT 6
CPUTFM:
	DEC	A		;FOR TABLE USE
	LD	HL,FMLOC	;GET ADDRESS OF THE FREE MAN LOCATIONS TABLE
	LD	B,0		;CLEAR GARBAGE
	LD	C,A		;GET THE NUMBER OF THE ONE TO PUT UP
	SLA	C		;MULTIPLY IT BY 2 FOR WORDS
	ADD	HL,BC		;ADD THE OFFSET
	LD	C,(HL)		;NOW GET THE VRAM ADDRESS TO PUT IT AT
	INC	HL		;FIRST LOWER
	LD	B,(HL)		;THEN HIGHER
	;
	LD	E,(IX)		;SET BYTE TO WRITE
	INC	IX
	PUSH	BC		;SAVE ADDRESS TO WRITE AT
	CALL	VRAMWR		;PUT FIRST QUARTER UP
	POP	BC		;GET ADDRESS
	LD	E,(IX)		;NEXT BYTE
	INC	IX
	INC	BC		;NEXT ADDRESS
	PUSH	BC		;SAVE IT
	CALL	VRAMWR		;SECOND QUARTER UP
	POP	BC		;ETC ETC.
	LD	E,(IX)
	INC	IX
	LD	HL,1FH
	ADD	HL,BC
	PUSH	HL
	POP	BC
	PUSH	BC
	CALL	VRAMWR
	POP	BC
	LD	E,(IX)
	INC	BC
	JP	VRAMWR		;DO LAST THEN LEAVE
;
FMQDEF:
	DB	7CH,7EH,7DH,7FH
NOQDEF:
	DB	0,0,0,0
;
DOBONUS::
	;	THIS ROUTINE WILL ADD TO THE PLAYER'S SCORE AS WELL
	;	AS PUT UP A MESSAGE INDICATING HOW MUCH BONUS HE GOT.
	;	EVERY TIME IT IS CALLED, IT ADDS 250 POINTS TO THE PLAYER'S
	;	BONUS (MAXIMUM OF 5000), INITIALLY YOU GET 1000 POINTS
	;
	;
	SETCOLR BLACK,BLACK	;SET THE COLOR TO BLACK IN CASE IN FREEZE MODE
	LD	BC,250H		;PUT 250 IN TEMPORARY VARIABLE
	LD	(TMP24),BC
	XOR	A
	LD	(TMP24+2),A	;CLEAR HIGH ORDER OF IT
	;
	LD IX,QCONTROL		;GET QBERT CONTROL MATRIX ADDRESS
	LD	(IX+1),120	;RESET THE ORIGIONAL X COORD. TO THE TOP CUBE
	LD	(IX+2),22	;RESET THE Y COORDINATE
	LD	A,(PLAYER)	;GET THE PLAYER NUMBER
	AND	A
	JR	NZ,DBPL2
	;
	LD 	A,120
	LD 	(P1XC),A	;RESET THE LAST LOCATION OF Q TO THE TOP CUBE
	LD	A,22
	LD	(P1YC),A	;RESET THE X
	LD	BC,(P1BONUS)	;SEE IF IT IS ALREADY AT 5000
	LD	HL,5000H	
	SBC	HL,BC
	JR	Z,ADDP1B
	;
	PCALL	BCDADD,P1BONUS,TMP24,P1BONUS	;ADD EM
ADDP1B:
	LD	BC,(P1BONUS)
	CALL	ADDSCORE
	PCALL	BCDTOASC,P1BONUS,BUF1A
	PCALL	VRAML8,6,BUF1A,3EEFH		;PUT THE BONUS IN
	PCALL	VRAML8,5,BONUS,3EEBH		;PUT THE WORD 'BONUS'
	RET
DBPL2:
	LD	A,120
	LD	(P2XC),A	;RESET THE PLAYER 2 X COORD. TO THE TOP CUBE
	LD	A,22
	LD	(P2YC),A	;RESET THE Y
	LD	BC,(P2BONUS)
	LD	HL,5000H
	SBC	HL,BC
	JR	Z,ADDP2B
	;
	PCALL	BCDADD,P2BONUS,TMP24,P2BONUS
ADDP2B:
	LD	BC,(P2BONUS)
	CALL	ADDSCORE
	PCALL	BCDTOASC,P2BONUS,BUF1A
	PCALL	VRAML8,6,BUF1A,3EEFH
	PCALL	VRAML8,5,BONUS,3EEBH
	RET
BCDTOASC::
	;	THIS ROUTINE WILL CHANGE A 24 BIT BCD NUMBER TO A STRING
	;	OF *MY* ASCII CHARACTERS (HI BIT SET)
	;
	;	PARAMETERS PASSED:
	;			BC	- LOCATION OF BCD NUMBER (3 BYTES)
	;			DE	- LOCATION OF STRING	(6 BYTES)
	;
	LD	HL,5			;WE WOULD LIKE TO START AT LOWEST
	ADD	HL,DE			;ADD IT TO THE ADDRESS OF THE HIGHEST
	EX	DE,HL			;PUT IT IN DE
	PUSH	BC			;NOW PUT ADDRESS OF BCD NUMBER IN HL
	POP	HL
	LD	B,3			;DO THIS LOOP THREE TIMES (HI-MED-LO)
MKASC:
	LD	A,(HL)			;GET THE NUMBER (LOW FIRST)
	AND	0FH			;STRIP OF HIGHER NYBBLE GARBAGE
	OR	0B0H			;MAKE IT *MY* ASCII CHAR (HI BIT SET)
	LD	(DE),A			;PUT IT AT THE STRING ADDRESS
	DEC	DE			;MOVE ON TO NEXT CHAR
	LD	A,(HL)			;GET THAT BYTE AGAIN
	SRL	A
	SRL	A			;MOVE THE UPPER INTO THE LOWER NYBBLE
	SRL	A
	SRL	A
	OR	0B0H			;MAKE IT *MY* ASCII
	LD	(DE),A			;SAVE IT
	DEC	DE			;MOVE ON TO NEXT CHAR
	INC	HL			;USE NEXT BCD BYTE
	DJNZ	MKASC			;LOOP 3 TIMES
	INC	DE
	PUSH	DE			;RUN RIGHT THRU INTO KILL_LZ ROUTINE
	POP	HL
KILL_LZ::
	;	THIS ROUTINE WILL KILL LEADING ZEROS IN A 6 BYTE ASCII
	;	STRING.
	;
	;	PARAMETERS PASSED:
	;				HL- LOCATION OF STRING
	;
	;	NOTE:: STRING IS FROM HI TO LOW
	;
;	PUSH	BC		;EXCHANGE BC><HL
;	PUSH	HL
	LD	B,5		;FOR 5 DIGITS ONLY, LAST ONE CAN STAY
DOLZ:	LD	A,(HL)		;GET THE BYTE
	CP	0B0H		;IS IT ONE OF *MY* ASCII ZEROS?
	RET	NZ		;NO...GET LOST, THEN, NO MORE LEADING ZEROS
	;
	LD	(HL),0		;CLEAR THE BYTE THERE
	INC	HL		;GO ON TO NEXT BYTE
	DJNZ	DOLZ		;DO FOR ALL OF STRING (5 BYTES, NOT LAST DIG)
	RET
	;
DOHISC::
	;	THIS ROUTINE WILL PUT UP A HIGH SCORE IF THE NUMBER AT THE
	;	ADDRESS PASSED IT GREATER THAN THE CURRENT HIGH SCORE
	;
	;	PARAMETERS PASSED:
	;				BC- ADDRESS OF NUMBER TO CONTEST 
	;				    THE HIGH SCORE
	;
	PUSH	BC
	LD	DE,HISC24		;GET THE ADDRESS OF THE BCD HI SCORE
	CALL	CP24.			;COMPARE EM
	POP	BC
	RET	C
	;
	LD	A,(BC)
	LD	(HISC24),A
	INC	BC
	LD	A,(BC)
	LD	(HISC24+1),A
	INC	BC
	LD	A,(BC)
	LD	(HISC24+2),A
	PCALL	BCDTOASC,HISC24,BUF1A
	PCALL	VRAML8,6,BUF1A,3C0DH
	RET
CP24.::
	;	THIS ROUTINE WILL COMPARE TWO 24 BIT NUMBERS (SIMILAR TO CP)
	;
	;	PARAMETERS PASSED:
	;				BC- ADDRESS OF FIRST NUMBER
	;				DE- ADDRESS OF SECOND NUMBER
	;
	EX	DE,HL		;WE NEED DE FOR TEMP STORAGE
	INC	BC
	INC	BC
	INC	HL
	INC	HL
	LD	A,(BC)		;GET THE HIGHEST ORDER OF THE FIRST NUMBER
	CP	(HL)		;...AND OF THE SECOND NUMBER
	RET	NZ		;UNLESS EQUAL...GET LOST
	;
	DEC	HL		;MOVE TO MEDIUM ORDER
	DEC	BC
	LD	A,(BC)
	CP	(HL)
	RET	NZ		;SAME AS ABOVE STUFF
	;
	DEC	HL	
	DEC	BC
	LD	A,(BC)		;LOWEST ORDER
	CP	(HL)
	RET
;
;	THE FOLLOWING SUBROUTINES PERFORM THREE BYTE BCD ADDITION OR 
;	SUBTRACTION. NOTE THAT THE NUMBERS SHOULD BE STORED
;	LOW BYTE FIRST.
;	
;	PARAMETERS PASSED:	FIRST OPERAND (DE)
;				SECOND OPERAND (HL)
;				RESULT STORED (BC)
;
BCDADD::	LD	A,003H		;PERFORM OPERATION ON 003H BYTES
		LD	(OPNUM),A	;STORE IN BYTE COUNTER VARIABLE
		XOR	A		;CLEAR CARRY FOR FIRST OPERATION
;
LOOP2A:		LD	A,(DE)		;GET BYTE OF FIRST OPERAND
		ADC	A,(HL)		;ADD BYTES OF SECOND OPERAND
		DAA			;(BCD ADDITION)
		LD	(BC),A		;STORE RESULT
;
		INC	BC		;INCREMENT ALL POINTERS
		INC	DE
		INC	HL
;
		LD	A,(OPNUM)	;DECREMENT BYTES COUNT
		DEC	A
		LD	(OPNUM),A
;
		JP	NZ,LOOP2A	;FINISHED IF ZERO
;
		RET
;
;
BCDSUB::	LD	A,003H		;PERFORM OPERATION ON 003H BYTES
		LD	(OPNUM),A	;STORE IN BYTE COUNTER VARIABLE
		XOR	A		;CLEAR CARRY FOR FIRST OPERATION
;
LOOP2B:		LD	A,(DE)		;GET BYTE OF FIRST OPERAND
		SBC	A,(HL)		;SUB BYTE OF SECOND OPERAND
		DAA			;(BCD SUBTRACTION)
		LD	(BC),A		;STORE RESULT
;
		INC	BC		;INCREMENT ALL POINTERS
		INC	DE
		INC	HL
;
		LD	A,(OPNUM)	;DECREMENT BYTES COUNT
		DEC	A
		LD	(OPNUM),A
;
		JP	NZ,LOOP2B	;FINISHED IF ZERO
;
		RET
;
;
WAIT1S::
	;	THIS ROUTINE WILL WAIT FOR AROUND 1 SECOND
	LD	HL,0FFFFH
	LD	BC,1
LPWT:
	SBC	HL,BC
	RET	Z
	JR	LPWT
	;
OPNUM:		DS	001H
FMLOC:
	DW	3C82H,3CC2H,3D02H,3D42H,3CC4H,3D04H
        END
 