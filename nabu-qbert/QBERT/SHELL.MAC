		.Z80
;*****************************************************************************
;	ROUTINE NAME:	SHELL
;
;	DESCRIPTION:	STANDARD SHELL FOR ALL NEW GAMES (IN GRAPHICS 1) 
;
;	AUTHOR:		CHANG CHOW
;
;	DATE:		AUG 16,1984
;
;	REGISTERS CLOBBERED:	ALL
;
;	PARAMETERS PASSED:	ALL PARAMETERS PASSED ON THE STACK
;			(SP)   - RETURN ADDRESS IS PUSHED ON STACK WHEN
;				 CSHELL IS CALLED
;			(SP+2) - PLAYER 2 SCORE ADDRESS IF ENDSCREEN WANTED
;			(SP+4) - PLAYER 1 SCORE ADDRESS IF ENDSCREEN WANTED
;			(SP+6) - 0 - RESTART WANTED
;				 1 - HELP WANTED
;				 2 - ENDSCREEN WANTED WITH 2 PLAYER SCORES
;				 3 - ENDSCREEN WANTED WITH 1 PLAYER SCORE
;
;	PARAMETERS RETURNED:	
;		HL REG - ADDRESS OF STRING OF BYTES FROM 
;			 OPTIONS 
;
;	COMMENTS AND WARNINGS:
;		YOU MUST BUILD THE OPTION SCREENS AND THE HELP 
;		SCREENS AS DESCRIBED AND TURN OFF ALL TASKS.
;		ALSO VRAM IS CLEARED AND THE BASE ADDRESSES
;		ARE RESET. 
;		YOU MUST SET UP THE EQUATE 'YESOP' TO INDICATE
;		WHETHER OR NOT YOU HAVE OPTIONS.
;		YOU MUST PUT THE NAME OF YOUR GAME IN THE PLACES
;		INDICATED, LOOK FOR game name. 
;		WHEN BUILDING OPTION SCREEN REMEMBER TO PUT THE 
;		# OF ANSWERS AT THE ENDING LABEL OF EACH DATA STRUCTURE. 
;******************************************************************************
		.RADIX	10
		CSEG

		INCLUDE COMMON.MRO
		INCLUDE LINKTAB.EXA
		INCLUDE	ADDRESS.EQU

		EXTRN 	ENGLISH
		EXTRN	PRTHLP
		EXTRN	OPTION,NABUF,INC_VAR,LOW_VAL,HIGH_VAL
;		EXTRN	USER_OP

;******************************************************************************
;	THE IMPORTANT EQUATES
;******************************************************************************

;
;	YOU MUST CLEAR THIS EQUATE IF YOU HAVE NO OPTIONS
;
YESOP		EQU	1		;0= NO OPTIONS
					;1= SHELL CONTROLLED OPTIONS
					;2= USER CONTROLED OPTIONS
					;3= SHELL CONTROLLED OPTIONS ARE DONE
					;   FIRST THEN USER CONTROLLED OPTIONS
					;   ARE DONE SECOND

NUMOPT		EQU	1		;MAXIMUM NUMBER OF OPTIONS
					;SET TO 10 PRESENTLY, TO ENLARGE
					;JUST CHANGE THE VALUE OF THE EQUATE
LENS		EQU	6		;LENGTH OF SCORE - RANGE (1-10)
GNX		EQU	18		;X COOR OF game name IN SOIS AND
					;END SCREENS 
PAGEX		EQU	18		;X COOR OF 'PAGE N OF n' IN HELP
					;A VALUE OF 18 IS FOR MORE
					;THAN 10 PAGES OF HELP, IF THERE ARE
					;LESS THAN 10 PAGES OF HELP IT IS
					;SUGGESTED TO SET THE VALUE TO 19

;*****************************************************************************
;	DEFINE THE MESSAGE BLOCK FOR THE OPENING SCREEN
;*****************************************************************************
MES123:		DEFMSG  24,2,'TM'
MESG2:		DEFMSG 	3,11,'READY TO GO?'
MESG3:		DEFMSG 	3,13,'NEED HELP?'
MESG4:		DEFMSG 	3,15,'NEW CHOICE?'
MESG5:		DEFMSG 	3,17,'START AGAIN?'
MESG6:		DEFMSG 	3,22,'COPYRIGHT \ 1984'
MESG7:		DEFMSG 	3,23,'NABU NETWORK CORP.       01'
MESG8:		DEFMSG 16,11,'PRESS GO'
MESG9:		DEFMSG 16,13,'PRESS HELP'
MESG10:		DEFMSG 16,15,'PRESS EXIT'
MESG11:		DEFMSG 16,17,'PRESS RESTART'
;
;	NOW DEFINE A DATA STRUCTURE POINTING TO THE MESSAGE BLOCKS
;
DATSOIS:	DW 	MES123,MESG1,MESG2,MESG3,MESG4,MESG5,MESG6,MESG7
		DW	MESG8,MESG9,MESG10,MESG11
ENDSOIS:

;******************************************************************************
;	HELP SCREENS
;******************************************************************************
;
;	THESE ARE THE LAST LINES FOR ANY OF THE HELP PAGES
;
RARROW:		DEFMSG 3,23,'     LEAVE HELP? <GO>    ~'
BARROW:		DEFMSG 3,23,'`    LEAVE HELP? <GO>    ~'
LARROW:		DEFMSG 3,23,'`    LEAVE HELP? <GO>'     
;
;       THIS IS THE DEFMSG FOR THE NAME OF THE GAME IN HELP
;
NAME:           DEFMSG 3,0,'Q*BERT'
;

;
;DEFINE MESSAGE BLOCK FOR THE FIRST PAGE OF INSTRUCTIONS
;
PAGE1:		DEFMSG PAGEX,0,'PAGE 1 OF 13'
;                           |345678901234567890123456789|
PG1L1: 	       	 DEFMSG 3,3,'Q*BERT IS A UNIQUE NEW '
PG1L2:		 DEFMSG 3,5,'CONCEPT IN GAME-PLAYING, '	
PG1L3:		 DEFMSG 3,7,'FOR ONE OR TWO PLAYERS, THE'	
PG1L4:		 DEFMSG 3,9,'OBJECT IS TO TURN ALL THE'	
PG1L5:		DEFMSG 3,11,'CUBES THE COLOR INDICATED'
PG1L6:		DEFMSG 3,13,'IN THE TOP LEFT CORNER OF'
PG1L7:		DEFMSG 3,15,'THE SCREEN.'	

INST1:		DW	NAME,PAGE1,PG1L1,PG1L2,PG1L3,PG1L4,PG1L5
		DW	PG1L6,PG1L7,RARROW 
ENDI1:
;
;
;DEFINE MESSAGE BLOCK FOR THE n'th PAGE OF INSTRUCTIONS
;
PAGE2:		DEFMSG PAGEX,0,'PAGE 2 OF 13'
;                           |345678901234567890123456789|
PG2L1:		 DEFMSG 3,3,'HOW TO PLAY:'
PG2L2:		 DEFMSG 3,7,'Q*BERT CONSISTS OF NINE '
PG2L3:		 DEFMSG 3,9,'LEVELS. EACH LEVEL HAS AN'
PG2L4:		DEFMSG 3,11,'OPENING DEMONSTRATION '
PG2L5:		DEFMSG 3,13,'SCREEN AND FOUR ROUNDS.'
;
INST2:		DW	NAME,PAGE2,PG2L1,PG2L2,PG2L3,PG2L4,PG2L5,BARROW
ENDI2:
;
;
;DEFINE MESSAGE BLOCK FOR THE LAST PAGE OF INSTRUCTIONS
;
PAGE3:		DEFMSG PAGEX,0,'PAGE 3 OF 13'
;                           |345678901234567890123456789|
PG3L1:		 DEFMSG 3,3,'TO MOVE TO THE NEXT LEVEL,'
PG3L2:		 DEFMSG 3,5,'PLAYERS MUST COMPLETE ALL'
PG3L3:		 DEFMSG 3,7,'FOUR ROUNDS. EACH PLAYER '
PG3L4:		 DEFMSG 3,9,'HAS 3 LIVES. FALLING OFF OR'
PG3L5:		DEFMSG 3,11,'HITTING DANGEROUS OBSTACLES'
PG3L6:		DEFMSG 3,13,'WILL CAUSE A LOSS OF ONE '
PG3L7:		DEFMSG 3,15,'LIFE. PLAYERS ARE THEN '
PG3L8:		DEFMSG 3,17,'RETURNED TO THE PLACE WHERE'
PG3L9:		DEFMSG 3,19,'THEY LEFT OFF.'

INST3:		DW	NAME,PAGE3,PG3L1,PG3L2,PG3L3,PG3L4
		DW	PG3L5,PG3L6,PG3L7,PG3L8,PG3L9,BARROW
ENDI3:
;
PAGE4:		DEFMSG PAGEX,0,'PAGE 4 OF 13'
;			    :345678901234567890123456789:
PG4L1:		 DEFMSG 3,3,'IN A TWO-PLAYER GAME, EACH'
PG4L2:		 DEFMSG 3,5,'PLAYER PLAYS UNTIL A DEATH.'
PG4L3:		 DEFMSG 3,9,'AS LEVELS BECOME MORE'
PG4L4:		DEFMSG 3,11,'SOPHISTICATED, SO DOES THE'
PG4L5:		DEFMSG 3,13,'COLOR-CHANGING. INSTEAD OF'
PG4L6:		DEFMSG 3,15,'STEPPING ON EACH CUBE ONCE,'
PG4L7:		DEFMSG 3,17,'PLAYERS WILL HAVE TO STEP'
PG4L8:		DEFMSG 3,19,'TWICE. '
;
INST4:		DW	NAME,PAGE4,PG4L1,PG4L2,PG4L3,PG4L4,PG4L5
		DW	PG4L6,PG4L7,PG4L8,BARROW
ENDI4:
;
PAGE5:		DEFMSG PAGEX,0,'PAGE 5 OF 13'
;                           |345678901234567890123456789|
PG5L1:		 DEFMSG 3,3,'AT HIGHER LEVELS, A CHANGED'
PG5L2:		 DEFMSG 3,5,'CUBE WILL NOT REMAIN THAT'
PG5L3:		 DEFMSG 3,7,'COLOR IF IT IS STEPPED ON'
PG5L4:		 DEFMSG 3,9,'AGAIN.'
PG5L5:		DEFMSG 3,11,'                           '
PG5L6:		DEFMSG 3,13,'                         '
PG5L7:		DEFMSG 3,15,'                       '
PG5L8:		DEFMSG 3,17,'                           '
PG5L9:		DEFMSG 3,19,'              '

INST5:		DW	NAME,PAGE5,PG5L1,PG5L2,PG5L3,PG5L4
		DW	PG5L5,PG5L6,PG5L7,PG5L8,PG5L9,BARROW
ENDI5:
;
PAGE6:		DEFMSG PAGEX,0,'PAGE 6 OF 13'
;                           |345678901234567890123456789|
PG6L1:		 DEFMSG 3,3,'OBSTACLES:                '
PG6L2:		 DEFMSG 3,5,'                         '
PG6L3:		 DEFMSG 3,7,'IN ALL LEVELS, PLAYERS MUST'
PG6L4:		 DEFMSG 3,9,'AVOID FALLING BALLS. ALL '
PG6L5:		DEFMSG 3,11,'ARE DANGEROUS, EXCEPT THE '
PG6L6:		DEFMSG 3,13,'GREEN BALL WHICH APPEARS '
PG6L7:		DEFMSG 3,15,'OCCASIONALLY. IF PLAYERS'
PG6L8:		DEFMSG 3,17,'CATCH THE GREEN BALL, ALL'
PG6L9:		DEFMSG 3,19,'OBJECTS ON THE SCREEN WILL'
PG6L10:		DEFMSG 3,21,'FREEZE EXCEPT Q*BERT.'
;
INST6:		DW	NAME,PAGE6,PG6L1,PG6L2,PG6L3,PG6L4
		DW	PG6L5,PG6L6,PG6L7,PG6L8,PG6L9,PG6L10,BARROW
ENDI6:
;
PAGE7:		DEFMSG PAGEX,0,'PAGE 7 OF 13'
;                           |345678901234567890123456789|
PG7L1:		 DEFMSG 3,3,'COILY THE SNAKE:   '
PG7L2:		 DEFMSG 3,5,'                         '
PG7L3:		 DEFMSG 3,7,'THE PURPLE BALL MUST BE    '
PG7L4:		 DEFMSG 3,9,'WATCHED CAREFULLY. WHEN IT'
PG7L5:		DEFMSG 3,11,'REACHES THE BOTTOM OF THE '
PG7L6:		DEFMSG 3,13,'PYRAMID, IT TURNS INTO '
PG7L7:		DEFMSG 3,15,'COILY THE SNAKE, WHO WILL'
PG7L8:		DEFMSG 3,17,'CHASE Q*BERT AND TRY TO  '
PG7L9:		DEFMSG 3,19,'CORNER HIM.               '
PG7L10:		DEFMSG 3,21,'                     '
;
INST7:		DW	NAME,PAGE7,PG7L1,PG7L2,PG7L3,PG7L4
		DW	PG7L5,PG7L6,PG7L7,PG7L8,PG7L9,PG7L10,BARROW
ENDI7: 
;
PAGE8:		DEFMSG PAGEX,0,'PAGE 8 OF 13'
;                           |345678901234567890123456789|
PG8L1:		 DEFMSG 3,3,'SAM AND SLICK:     '
PG8L2:		 DEFMSG 3,5,'                         '
PG8L3:		 DEFMSG 3,7,'THESE TWO GREEN CHARACTERS '
PG8L4:		 DEFMSG 3,9,'WILL APPEAR OCCASIONALLY '
PG8L5:		DEFMSG 3,11,'TO CHANGE THE COLORS OF   '
PG8L6:		DEFMSG 3,13,'THE CUBES. PLAYERS CAN '
PG8L7:		DEFMSG 3,15,'CATCH THESE CHARACTERS TO'
PG8L8:		DEFMSG 3,17,'GAIN POINTS.             '
PG8L9:		DEFMSG 3,19,'               '
PG8L10:		DEFMSG 3,21,'                     '
;
INST8:		DW	NAME,PAGE8,PG8L1,PG8L2,PG8L3,PG8L4
		DW	PG8L5,PG8L6,PG8L7,PG8L8,PG8L9,PG8L10,BARROW
ENDI8: 
;
PAGE9:		DEFMSG PAGEX,0,'PAGE 9 OF 13'
;                           |345678901234567890123456789|
PG9L1:		 DEFMSG 3,3,'UGH AND WRONG-WAY:'
PG9L2:		 DEFMSG 3,5,'                         '
PG9L3:		 DEFMSG 3,7,'MORE PURPLE CHARACTERS THAT'
PG9L4:		 DEFMSG 3,9,'MEAN MENACE. UGH AND WRONG-'
PG9L5:		DEFMSG 3,11,'WAY MOVE ON THE WRONG SIDES'
PG9L6:		DEFMSG 3,13,'OF THE CUBES, WITH THE '
PG9L7:		DEFMSG 3,15,'INTENT OF CONFUSING YOUR '
PG9L8:		DEFMSG 3,17,'GAME.                    '
PG9L9:		DEFMSG 3,19,'               '
PG9L10:		DEFMSG 3,21,'                     '
;
INST9:		DW	NAME,PAGE9,PG9L1,PG9L2,PG9L3,PG9L4
		DW	PG9L5,PG9L6,PG9L7,PG9L8,PG9L9,PG9L10,BARROW
ENDI9: 
;
PAGE10:		DEFMSG PAGEX-1,0,'PAGE 10 OF 13'
;			    :345678901234567890123456789:
PG10L1:		 DEFMSG 3,2,'SAFETY DEVICES:'
PG10L2:		 DEFMSG 3,6,'THE DISC TRANSPORTER'
PG10L3:		 DEFMSG 3,8,'ON THE RIGHT AND LEFT SIDES'
PG10L4:		DEFMSG 3,10,'OF THE PYRAMID ARE MULTI-'
PG10L5:		DEFMSG 3,12,'COLORED DISCS CALLED '
PG10L6:		DEFMSG 3,14,'TRANSPORTERS. Q*BERT CAN'
PG10L7:		DEFMSG 3,16,'USE THESE DISCS TO TRAVEL'
PG10L8:		DEFMSG 3,18,'BACK TO THE TOP OF THE '
PG10L9:		DEFMSG 3,20,'PYRAMID BY JUMPING ON THEM.'
;
INST10:		DW	NAME,PAGE10,PG10L1,PG10L2,PG10L3,PG10L4
		DW	PG10L5,PG10L6,PG10L7,PG10L8,PG10L9,BARROW
ENDI10:
;
PAGE11:		DEFMSG PAGEX-1,0,'PAGE 11 OF 13'
;			    :345678901234567890123456789:
PG11L1:		 DEFMSG 3,2,'WHEN PURSUED BY COILY, '
PG11L2:		 DEFMSG 3,4,'Q*BERT''S JUMP WILL BE'
PG11L3:		 DEFMSG 3,6,'FOLLOWED BY THE SNAKE''S AND'  
PG11L4:		DEFMSG 3,08,'THE SNAKE WILL DISAPPEAR.'
PG11L5:		DEFMSG 3,12,'                     '
PG11L6:		DEFMSG 3,14,'                 '
PG11L7:		DEFMSG 3,16,'                         '
PG11L8:		DEFMSG 3,18,'                       '
PG11L9:		DEFMSG 3,20,'                           '
;
INST11:		DW	NAME,PAGE11,PG11L1,PG11L2,PG11L3,PG11L4
		DW	PG11L5,PG11L6,PG11L7,PG11L8,PG11L9,BARROW
ENDI11:
;
;
PAGE12:		DEFMSG PAGEX-1,0,'PAGE 12 OF 13'
;			    :345678901234567890123456789:
PG12L1:		 DEFMSG 3,2,'SCORING:                '
PG12L2:		 DEFMSG 3,4,'PLAYERS RECIEVE BONUS '
PG12L3:		 DEFMSG 3,6,'POINTS AFTER EACH ROUND,'  
PG12L4:		DEFMSG 3,08,'STARTING WITH 1,000 AND  '
PG12L5:		DEFMSG 3,10,'GOING TO A MAXIMUM OF'
PG12L6:		DEFMSG 3,12,'5,000.           '
PG12L7:		DEFMSG 3,16,'25 POINTS ARE AWARDED FOR'
PG12L8:		DEFMSG 3,18,'FLIPPING CUBES TO THE RIGHT'
PG12L9:		DEFMSG 3,20,'COLOR.                     '
;
INST12:		DW	NAME,PAGE12,PG12L1,PG12L2,PG12L3,PG12L4
		DW	PG12L5,PG12L6,PG12L7,PG12L8,PG12L9,BARROW
ENDI12:
;
;
PAGE13:		DEFMSG PAGEX-1,0,'PAGE 13 OF 13'
;			    :345678901234567890123456789:
PG13L1:		 DEFMSG 3,2,'15 POINTS ARE AWARDED FOR'
PG13L2:		 DEFMSG 3,4,'CHANGING CUBES TO ANY OTHER'
PG13L3:		 DEFMSG 3,6,'COLOR.                  '  
PG13L4:		DEFMSG 3,10,'EACH PLAYER HAS 3 LIVES. '
PG13L5:		DEFMSG 3,12,'AFTER 8,000 POINTS ANOTHER'
PG13L6:		DEFMSG 3,14,'LIFE IS AWARDED, AND FOR '
PG13L7:		DEFMSG 3,16,'EVERY 14,000 POINTS GAINED'
PG13L8:		DEFMSG 3,18,'THEREAFTER.                '
PG13L9:		DEFMSG 3,20,'                           '
;
INST13:		DW	NAME,PAGE13,PG13L1,PG13L2,PG13L3,PG13L4
		DW	PG13L5,PG13L6,PG13L7,PG13L8,PG13L9,LARROW
ENDI13:
;
;****** DEFINE DATA STRUCTURE THAT INDEXES THE PAGES OF HELP ******
;
INBEGIN:	DW	INST1,ENDI1,INST2,ENDI2,INST3,ENDI3
		DW	INST4,ENDI4,INST5,ENDI5,INST6,ENDI6
		DW	INST7,ENDI7,INST8,ENDI8,INST9,ENDI9
		DW	INST10,ENDI10,INST11,ENDI11,INST12,ENDI12
		DW	INST13,ENDI13
INEND:	

;******************************************************************************
;	OPTION SCREENS 
;******************************************************************************

;
;	THIS IS THE DEFMSG FOR THE NAME OF THE GAME IN THE OPTION SCREENS
;
OPNAME:		DEFMSG	12,1,'Q*BERT'

;
;	THIS IF THE DEFMSG FOR 'OPTIONS' IN THE OPTION SCREENS
;
OPHEADER:	DEFMSG	4,5,'OPTIONS:'

;
;	DEFINE A DATA STRUCTURE FOR FIRST OPTION
;
O11:	DEFMSG	 4,7,' '
O12:	DEFMSG	04,11,'ONE PLAYER'
O13:	DEFMSG	04,13,'TWO PLAYERS ONE JOYSTICK'
O14:	DEFMSG	04,15,'TWO PLAYERS TWO JOYSTICKS'

OSTR1:	DW	OPNAME,OPHEADER,O11,O12,O13,O14
OEND1:	DB	3			;NUMBER OF ANSWERS ***

;
;	DEFINE A DATA STRUCTURE FOR SECOND OPTION
;
O21:	DEFMSG	 4,7,'question #2'
O22:	DEFMSG	11,12,'answer #1'
O23:	DEFMSG	11,14,'answer #2'
O24:	DEFMSG	11,16,'answer #3'
   
OSTR2: 	DW     	OPNAME,OPHEADER,O21,O22,O23,O24
OEND2:	DB	3			;NUMBER OF ANSWERS ***

;
;	DEFINE A DATA STRUCTURE FOR THIRD OPTION
;
O31:	DEFMSG	 4,7,'question #3'
O32:	DEFMSG	11,12,'answer #1'
O33:	DEFMSG	11,14,'answer #2'
O34:	DEFMSG	11,16,'answer #3'
O35:	DEFMSG	11,18,'answer #4'

OSTR3:	DW	OPNAME,OPHEADER,O31,O32,O33,O34,O35
OEND3:	DB	4			;NUMBER OF ANSWERS ***

;
;	DEFINE A DATA STRUCTURE FOR FOURTH OPTION (A NUMBER OPTION)
;
O41:	DEFMSG	 4,7,'question #4'
O42:	DEFMSG	15,10,'1000'		;DEFAULT NUMBER

OSTR4:	DW	OPNAME,OPHEADER,O41,O42
OEND4:	DB	0FFH			;FLAG=0FFH (1 BYTE)
	DW	100			;INCREMENT VALUE (2 BYTE)
	DW	100			;LOWEST VALUE (2 BYTES)
	DW	10000			;HIGHEST VALUE (2 BYTES)

;
;******	DEFINE A DATA STRUCTURE THAT INDEXES THE OPTION PAGES ****
;
OPDATA:	DW	OSTR1,OEND1
ENDOP:

SYM1		EQU	0B1H
RPAGE		EQU	0E4H
LPAGE		EQU	0E5H

PTR:		DW	0
ENDPTR: 	DW	0
RIGHTF:		DB	0
LEFTF:		DB 	0
CHAR:		DB	0
PARM:		DB	0
NUMBYT:		DB	0
KILLTABLE:	DB	7,0FFH,8,00H,9,00H,10,00H
CLR:		DB	0F4H,0F4H,0F4H,0F4H,0F4H,0F4H,0F4H,0F4H
		DB	0F4H,0F4H,0F4H,0F4H,0F4H,0F4H,0F4H,0F4H
		DB	0F4H,0F4H,0F4H,0F4H,04FH,04FH,0F4H,0F4H
		DB	04FH,04FH,04FH,04FH,04FH,04FH,04FH,04FH

CSHELL::	
	PCALL	VSETG1			;SET GRAPHICS 1
	PCALL	VPTRNST,VPTRNAD		;SETUP BASE ADDRESSES	
	PCALL 	VATRIST,VATRIAD
	PCALL 	VNAMEST,VNAMEAD
 	PCALL 	VCOLRST,VCOLRAD
 	PCALL 	VSPRIST,VSPRIAD
	LD	HL,KILLTABLE
	LD	B,4
LOOP:	LD	C,(HL)
	INC	HL
	LD	E,(HL)
	INC	HL
	CALL	AUDIOWR			;KILL ALL SOUND 
	DJNZ	LOOP
	SETCOLR	DBLUE,DBLUE		;SET BACKGROUND COLOR
	PCALL 	VFILL,4000H,00H,0000H	;FILL VRAM WITH ZERO  
	PCALL 	RPATRN,ENGLISH		;READ IN FIRST ENGLISH CHARACTER SET
	PCALL	LPATRN,ENGLISH,VPTRNAD+8*80H	;LOAD SECOND ENGLISH CHARACTER SET AT 80H
	PCALL 	VRAML8,20H,CLR,VCOLRAD	;LOAD COLOR TABLE
	PCALL	VBLKOFF	
	POP	AF		;POP RETURN ADDRESS	
	POP	HL		;POP SCORE #2 OR DUMMY 
	POP	DE		;POP SCORE #1 OR DUMMY
	POP	BC		;POP CONTROL BYTE
	PUSH	BC		;RESAVE ALL PARAMETERS AS THEY WERE
	PUSH	DE
	PUSH	HL
	PUSH	AF			
	LD	A,C		;PUT PARAMETER IN A REG
	LD	(PARM),A	;SAVE PARAMETER	
	CP	1		;WANT HELP
	JP	Z,HELP		;YES - JUMP
	CP	2		;WANT END SCREEN AND 2 PLAYER SCORES?
	JP	Z,ENDSCR	;YES - JUMP
	CP	3		;WANT END SCREEN AND 1 PLAYER SCORE?
	JP	Z,ENDSCR	;YES - JUMP	
				;DEFAULT TO RESTART WANTED
;
;	SOIS SCREEN CODE
;
RESTART::
	LD	A,1
	LD	(NABUF),A		;SET NABU FLAG
	PCALL	OPTION,DATSOIS,ENDSOIS,4	
	CP	1			;CHECK IF WANTED GAME
	JP	Z,OPCODE		;YES - JUMP TO OPTION CODE
	CP	2			;CHECK IF WANTED HELP
	JR	Z,HELP			;YES - JUMP
	CP	4			;CHECK IF WANTED RESTART
	JR	Z,RESTART
	JP	0000H			;DEFAULT TO EXIT
;
;	INSTRUCTION SCREEN HANDLING CODE STARTS HERE
;
HELP::
INSTR1:
	LD	IX,INBEGIN	;LOAD POINTER TO DATA STRUCTURES
INSTRP:
	PCALL	VFILL,0400H,020H,VNAMEAD	;FILL SCREEN WITH BLANKS
	LD	A,1
	LD	(RIGHTF),A	;SET RIGHT AND LEFT FLAGS TO 1 AT BEGINNING
	LD	(LEFTF),A
	LD	C,(IX)
	LD	B,(IX+1)	;LOAD BEGINNING POINTER TO DATA STRUCTURE
	LD	E,(IX+2)
	LD	D,(IX+3)	;LOAD END POINTER TO DATA STRUCTURE
	CALL	DRWSCN		;PUT ON PAGE OF INSTRUCTIONS
	PUSH	IX
	POP	BC		;LOAD IX IN BC
	LD	HL,INBEGIN	;LOAD BEGIN ADDRESS OF DATA STRUCTURE
	AND	A
	SBC	HL,BC		;TEST SEE IF BEGINNING OF DATA STRUCTURE
	JR	NZ,RONLY
	LD	A,0
	LD	(LEFTF),A	;SET LEFT FLAG TO ZERO MEANING NO LEFT ARROW
RONLY:	PUSH	IX
	POP	BC		;LOAD BC WITH INDEX INTO DATA STUCTURE
	LD	HL,4
	ADD	HL,BC		;ADD 4 TO ADDRESS TO GET TO NEXT DATA STRUCTURE ADDRESS
	LD	BC,INEND	;LOAD END OF DATA STUCTURE ADDRESS
	AND	A
	SBC	HL,BC		;CHECK SEE IF END OF DATA STRUCTURE
	JR	NZ,WAITI	;NO - JUMP
	LD	A,0
	LD	(RIGHTF),A	;CLEAR THE RIGHT FLAG MEANING NO RIGHT ARROW
WAITI:	CALL	GTKEY
	CP	SYM1		;DO YOU WANT TO PRINT THE SCREEN ?	
	CALL	Z,PALLH		;YES- GO PRINT THE CURRENT SCREEN		
	LD	(CHAR),A	;SAVE CHAR
	LD	A,(RIGHTF)
	AND	A		;IF FLAG IS 0 NO RIGHT ARROW
	JR	Z,TESTL
	LD	A,(CHAR)	;GET REPLY
	CP	RPAGE		;TEST FOR ->
	JR	NZ,TESTL
	LD	BC,4
	ADD	IX,BC		;ADD 4 TO IX TO GET TO NEXT DATA STRUCTURE
	JP	INSTRP		;JUMP TO TOP
TESTL:	LD	A,(LEFTF)	
	AND	A		;CHECK SEE IF LEFT FLAG IS 0 
	JR	Z,GOKEY
	LD	A,(CHAR)
	CP	LPAGE		;TEST FOR <-
	JR	NZ,GOKEY
	LD	BC,4
	PUSH	IX
	POP	HL		;LOAD IX IN HL REG
	AND	A	
	SBC	HL,BC		;SUBTRACT 4 FROM IX TO GET TO NEXT DATA STRUCTURE
	PUSH	HL
	POP	IX		;RESAVE IN IX REG
	JP	INSTRP
GOKEY:	LD	A,(CHAR)
	CP	0DH		;TEST FOR <CR>
	JP	Z,OPCODE	;YES - JUMP TO OPTION CODE
	JP	WAITI

;
;LOOP WHILE WRITING THE TEXT LINES ON THE SCREEN.
;
DRWSCN:: 	LD	(PTR),BC
		LD	(ENDPTR),DE
DRW1:		LD	HL,(PTR)	;GET CONTENTS OF POINTER
		LD	C,(HL)
		INC	HL
		LD	B,(HL)		;BC REG HAS MESSAGE TO PUT ON SCREEN
		INC	HL
		LD	(PTR),HL	;SET FOR NEXT MESSAGE BLOCK
		CALL	PUTMSG		;PUT MESSAGE ON SCREEN
		LD	HL,(PTR)
		LD	BC,(ENDPTR)
		AND	A
		SBC	HL,BC		;(PTR)=(ENDPTR)?
		JR	NZ,DRW1		;NO - REPEAT UNTIL DONE
		RET

;
;	THIS ROUTINE CHECKS KEYBOARD AND JOYSTICK FOR HELP SCREEN
;
GTKEY:
	N.DEVRDY	KEYBOARD,KEYSTROKE	;CHECK KEYBOARD
	AND	A				;IS THERE A KEY WAITING
	JR	Z,NONE				;NO - JUMP
	N.DEVIO		KEYBOARD,KEYSTROKE	;GET CHAR
	POP	HL			;POP THE RETURN ADDRESS
	CP	0ABH			;TEST FOR RESTART
	JP	Z,RESTART
	CP	0BDH
	JP	Z,RESTART
	CP	0EAH			;TEST FOR HELP
	JP	Z,HELP
	PUSH	HL		;PUSH THE RETURN ADDRESS BACK ON STACK
	RET
NONE:	N.DEVRDY	KEYBOARD,JSTCK1	;CHECK JOYSTICK
	AND	A			;ANY DATA
	JR	Z,GTKEY			;NO - JUMP TO TOP
	N.DEVIO	KEYBOARD,JSTCK1		;ELSE - GET DATA
	BIT	4,A		;CHECK FOR GO KEY
	JR	Z,J2		
	LD	A,0DH		
	RET
J2:	BIT	0,A		;CHECK FOR LEFT PAGE
	JR	Z,J3
	LD	A,LPAGE
	RET
J3:	BIT	2,A		;CHECK FOR RIGHT PAGE
	JR	Z,GTKEY
	LD	A,RPAGE
	RET

;
;	THIS ROUTINE HANDLES THE PRINTING OF THE HELP SCREENS
;
PALLH:
	PUSH	IX		; SAVE CURRENT INDEX
	LD	IX,INBEGIN	;LOAD POINTER TO DATA STRUCTURES
	XOR	A
	LD	(NUMBYT),A	;CLEAR NUMBER BYTE FOR PTHLP
PALLH0:
;
;	CHECKING TO SEE IF END OF INTRUCTION SCREENS
;
	PUSH	IX
	POP	HL		;LOAD HL WITH INDEX INTO DATA STUCTURE
	LD	BC,INEND	;LOAD END OF DATA STUCTURE ADDRESS
	AND	A		;CLEAR CARRY FLAG	
	SBC	HL,BC		;CHECK SEE IF END OF DATA STRUCTURE
	JR	Z,PALLH2	;YES - JUMP
	PCALL	VFILL,400H,20H,VNAMEAD
	
;
;	SETTING UP REGISTERS FOR DRWSCN
;
	LD	C,(IX)
	LD	B,(IX+1)	;LOAD BEGINNING POINTER TO DATA STRUCTURE
	LD	E,(IX+2)
	LD	D,(IX+3)	;LOAD END POINTER TO DATA STRUCTURE
	CALL	DRWSCN		;PUT ON PAGE OF INSTRUCTIONS
	PUSH	IX
	POP	BC		;LOAD BC WITH INDEX INTO DATA STUCTURE
	LD	HL,4
	ADD	HL,BC		;ADD 4 TO ADDRESS TO GET TO NEXT DATA STRUCTURE ADDRESS
	LD	BC,INEND	;LOAD END OF DATA STUCTURE ADDRESS
	AND	A
	SBC	HL,BC		;CHECK SEE IF END OF DATA STRUCTURE
	JR	NZ,PH1
	XOR	A		;LOAD ZERO INTO A FOR <FF> TO PRINTER
	JR	PH2
PH1:	LD	A,(NUMBYT)	
	XOR	1		;FLIP VALUE OF NUMBYTE
	LD	(NUMBYT),A
PH2:	LD	C,A
	CALL	PRTHLP		; PRINT THE CURRENT SCREEN
	JR	C,PALLH2	; PRINT HAS BEEN CANCELLED (C IS SET)
	LD	BC,4
	ADD	IX,BC		; GET NEXT SCREEN
	JR	PALLH0
;
PALLH2:	POP	IX		; SET OLD INDEX
	PCALL	VFILL,400H,20H,VNAMEAD
	LD	C,(IX)
	LD	B,(IX+1)	; BEGINNING POINTER TO CURRENT DATA STRUCTURE
	LD	E,(IX+2)
	LD	D,(IX+3)	;LOAD END POINTER TO DATA STRUCTURE
	CALL	DRWSCN
	XOR	A		; ERASE THE LAST COMMAND...
	RET

;******************************************************************************
;
;	DESCRIPTION:	THIS CODE DOES THE END SCREEN HANDLING
;
;	PARAMETERS PASSED:
;		DE REG - SCORE 1 ADDRESS
;		HL REG - SCORE 2 ADDRESS
;
;	COMMENTS:	YOU MUST HAVE SCORE IN ASCII IN ADDRESS PASSED
;			IN FORM  OF HIGH VALUE DIGIT TO LOW VALUE DIGIT.
;			YOU MUST ALSO SET UP THE EQUATE PLAYNO IN SWITCH.EQU.
;			YOU CAN CHANGE THE LENGTH OF THE SCORE BY 
;			CHANGING THE EQUATE LENS ONLY (MAXIMUM LENGTH IS 10)
;*****************************************************************************
GNY		EQU	3		;game name Y COOR
SXA		EQU	19		;X COOR TO RIGHT JUSTIFY ALL SCORES
LFX		EQU	3		;X COOR TO LEFT JUSTIFY EVERYTHING
LPX		EQU	17		;X COOR FOR PRESS GO ETC
S1Y		EQU	8		;Y COOR OF PLAYER 1 SCORE
S2Y		EQU	9		;Y COOR OF PLAYER 2 SCORE
HSY		EQU	11		;Y COOR OF HIGH SCORE
GY		EQU	15		;Y COOR OF PLAY AGAIN?
OY		EQU	17		;Y COOR OF NEW OPTIONS?
EY		EQU	19		;Y COOR OF NEW CHOICE?

;
;DEFINE THE MESSAGE BLOCK FOR THE ENDING SCREEN
;
MESG1:						;SAME MESSAGE AS ON SOIS SCREEN
EMES1:		DEFMSG GNX,GNY,'Q*BERT'
EMES2:		DEFMSG LFX,S1Y,'PLAYER 1 SCORE:'
EMES3:		DEFMSG LFX,S2Y,'PLAYER 2 SCORE:'
EMES4:		DEFMSG LFX,S2Y,'PLAYER SCORE:'
EMES5:		DEFMSG LFX,HSY,'HIGH SCORE:'
EMES6:		DEFMSG LFX,GY,'SAME OPTIONS?'
EMES7:		DEFMSG LFX,OY,'NEW OPTIONS?'
EMES8:		DEFMSG LFX,EY,'NEW CHOICE?'
EMES9:		DEFMSG LFX,OY,'NEW CHOICE?'
EMES10:		DEFMSG LPX,GY,'PRESS GO'
EMES11:		DEFMSG LPX,OY,'PRESS RESTART'
EMES12:		DEFMSG LPX,EY,'PRESS EXIT'
EMES13:		DEFMSG LPX,OY,'PRESS EXIT'
;
;	CONDITIONAL ASSEMBLY TO HAVE OR NOT HAVE OPTIONS
;
	IF 	YESOP NE 0
;
;DEFINE A DATA STRUCTURE FOR A SCREEN WITH OPTIONS AND WITH 2 PLAYER SCORES
;
DATA2:		DW 	EMES1,EMES2,EMES3,EMES5,EMES6,EMES7,EMES8
		DW	SCUP1,SCUP2,HSCUP
		DW	EMES10,EMES11,EMES12
ENDAT2:
;
;DEFINE A DATA STRUCTURE FOR A SCREEN WITH OPTIONS AND WITH PLAYER SCORE
;
DATA1:		DW 	EMES1,EMES4,EMES5,EMES6,EMES7,EMES8
		DW	SCUP2,HSCUP
		DW	EMES10,EMES11,EMES12
ENDAT1:
;
	ELSE
;
;DEFINE A DATA STRUCTURE FOR A SCREEN WITHOUT OPTIONS AND WITH 2 PLAYER SCORE
;
DATA2:		DW 	EMES1,EMES2,EMES3,EMES5,EMES6,EMES9
		DW	SCUP1,SCUP2,HSCUP
		DW	EMES10,EMES13
ENDAT2:
;
;DEFINE A DATA STRUCTURE FOR A SCREEN WITHOUT OPTIONS AND WITH 1 PLAYER SCORE
;
DATA1:		DW 	EMES1,EMES4,EMES5,EMES6,EMES9
		DW	SCUP2,HSCUP
		DW	EMES10,EMES13
ENDAT1:
	ENDIF
;
;	SCORE IN ASCII IN VAR SCORE1
;
SCUP1:	
		DB	SXA		;X COOR OF THE NUMERICAL SCORE 
		DB	S1Y		;Y COOR OF THE NUMERICAL SCORE	
		DB	LENS		;LENGTH OF THE NUMERICAL SCORE
SCORE1:		REPT	LENS
		DB	'0'		;LENGTH OF SCORE1 ASCII BUFFER
		ENDM

;
;	SCORE IN ASCII IN VAR SCORE2
;
SCUP2:	
		DB	SXA		;X COOR OF THE NUMERICAL SCORE 
		DB	S2Y		;Y COOR OF THE NUMERICAL SCORE
		DB	LENS		;LENGTH OF THE NUMERICAL SCORE
SCORE2:		REPT	LENS
		DB	'0'		;LENGTH OF SCORE2 BUFFER 
		ENDM

;
;	HIGH SCORE I CHECK FOR AND PUT UP
;
HSCUP:
		DB	SXA		;X COOR OF HI SCORE NUMBERS
		DB	HSY		;Y COOR OF HI SCORE NUMBERS
		DB	LENS		;LENGTH OF HI SCORE NUMBERS
HSCORE:		REPT	LENS
		DB	'0'		;LENGTH OF HI SCORE ASCII BUFFER 
		ENDM

ENDSCR:
		PUSH	DE
		LD	A,(PARM)
		CP	2		;2 PLAYERS?
		JR	Z,END1		;YES - JUMP
		LD	H,D
		LD	L,E		;PUT SCORE #1 IN SCORE #2
END1:		LD	DE,SCORE2
		LD	BC,LENS
		LDIR			;PUT SCORE #2 IN LOCAL SCORE #2 VAR
		POP	HL		;GET SCORE #1
		LD	DE,SCORE1
		LD	BC,LENS
		LDIR			;PUT SCORE #1 IN LOCAL SCORE #1 VAR
		PCALL	ZCHECK,SCORE1	;CLEAR THE LEADING ZEROS OR NULLS
		PCALL	ZCHECK,SCORE2	;CLEAR THE LEADING ZEROS OR NULLS
		PCALL	ZCHECK,HSCORE
		PCALL	SCHECK,SCORE1,HSCORE	;UPDATE HIGH SCORE
		PCALL	SCHECK,SCORE2,HSCORE	;UPDATE HIGH SCORE
		LD	A,1
		LD	(NABUF),A		;SET FLAGS FOR OPTION ROUTINE
		IF	YESOP NE 0
;
;	HAVE OPTIONS SCREEN
;
			LD	A,(PARM)
			CP	3
			JR	Z,ES1
			PCALL	OPTION,DATA2,ENDAT2,3	;TWO PLAYER SCREEN
			JR	ES2
ES1:			PCALL	OPTION,DATA1,ENDAT1,3	;ONE PLAYER SCREEN
ES2:			LD	HL,TABLE
			CP	1		;CHECK FOR PLAY AGAIN?
			RET	Z
			CP	2		;CHECK FOR NEW OPTIONS?
			JP	Z,RESTART	
			JP	0000H		;DEFAULT TO EXIT
		ELSE
;	
;	HAVE NO OPTIONS SCREEN
;
			LD	A,(PARM)
			CP	3
			JR	Z,ES3
			PCALL	OPTION,DATA2,ENDAT2,2	;TWO PLAYER SCREEN 
			JR	ES4
ES3:			PCALL	OPTION,DATA1,ENDAT1,2	;ONE PLAYER SCREEN
ES4:			CP	1		;CHECK FOR PLAY AGAIN?
			RET	Z
			JP	0000H		;DEFAULT TO EXIT
		ENDIF

;
;	THIS ROUTINE PUTS SCORE IN HI SCORE IF SCORE > HI SCORE
;	USES LENGTH OF SCORE EQUATE 'LENS' TO INITIALIZE COUNTER
;
SCHECK:		PUSH	BC		;PUT THE SCORE ADDRESS IN HL
		POP	HL
		LD	C,LENS+1	;SET SCORE COUNTER
NXTBYTE:	DEC	C		;DECREMENT BYTE COUNTER
		RET	Z		;COUNTER=0? - YES - RETURN
		LD	A,(DE)		;PUT HIGH SCORE FIRST BYTE IN A REG
		LD	B,(HL)		;LOAD THE SCORE FIRST BYTE IN B
		INC	HL		;GO TO THE NEXT BYTES
		INC	DE	
		CP	B		;ARE THE BYTES EQUAL?
		JR	Z,NXTBYTE	;YES - LOOP
		RET	NC		;NO - HIGH SCORE BYTE IS BIGGER SO NO CHANGE 
		DEC	HL		;GO BACK TO DIFFERENT BYTES ADDRESS
		DEC	DE
SWITCH:		LD	A,(HL)		;LOAD SCORE BYTE IN A REG
		LD	(DE),A		;LOAD HIGH SCORE BYTE IN ADDRESS
		INC	HL		
		INC	DE
		DEC	C		;IF COUNTER NOT ZERO CONTINUE SWITCH HIGH SCORE WITH SCORE
		JR	NZ,SWITCH
		RET

;
;	THIS ROUTINE CLEARS THE LEADING ZEROS  OR NULLS IN ANY SCORE
;	EXCEPT FOR THE LAST ZERO BASED ON THE LENGTH OF SCORE
;	AS DEFINED IN THE EQUATE 'LENS'
;
ZCHECK:		LD	E,LENS		;SET COUNTER USING LENGTH OF SCORE
ZC1:		DEC	E		;DECREMENT COUNTER
		RET	Z		;COUNTER=0? - YES - RETURN
		LD	A,(BC)		;GET BYTE FROM STRING
		CP	'1'		;CHECK IF BYTE<='0'? 
		RET	NC		;NO -RETURN
		LD	A,20H		;PUT 'SPACE' IN A REG
		LD	(BC),A		;PUT IN STRING
		INC	BC		;GO TO NEXT BYTE IN STRING
		JR	ZC1

;*****************************************************************************
;
;	DESCRIPTION:	THIS CODE WILL HANDLE THE OPTIONS FOR THE GAME
;			ASSUMING YOU SET UP THE OPTION DATA STRUCTURES
;			FIRST (PRESENTLY SET TO 20 OPTIONS) 
;
;	COMMENTS AND WARNINGS:	
;		LOOK AT THE EXAMPLES ABOVE AND FOLLOW THEM.
;		BUT MAKE SURE YOUR QUESTION LABELS ARE AT THE
;		END OF THE DATA STRUCTURE AND IN THE ORDER
;		IN WHICH THEY WILL BE ANSWERED. SPACING BETWEEN
;		QUESTIONS MUST BE AT LEAST 1 LINE BUT CAN BE MORE.
;		ALSO PUT IN THE # OF ANSWERS VARIABLE AT THE LAST LABEL.
;******************************************************************************

;
;	TABLE THAT HOLDS REPLIES FOR OPTIONS 
;	SET AT A MAXIMUM OF 10 NOW (TO ENLARGE JUST CHANGE EQUATE NUMOPT)
;
	IF	YESOP NE 0
TABLE:	DS	NUMOPT*2+2
	ENDIF

OPCODE:
	IF	YESOP EQ 0		;IF NO OPTIONS 
		RET			;RETURN
	ENDIF
	IF	(YESOP EQ 1) OR (YESOP EQ 3)	;IF THERE ARE SHELL OPTIONS
		LD	IX,OPDATA
		LD	IY,TABLE
OP1:		LD	C,(IX)
		LD	B,(IX+1)	;LOAD START POINTER TO DATA STRUCTURE
		LD	E,(IX+2)
		LD	D,(IX+3)	;LOAD END POINTER TO DATA STRUCTURE
		LD	A,(DE)		;GET BYTE TELLING # OF ANSWERS
		LD	L,A		;PUT IN REGISTER L
		CP	0FFH		;IS OPTION A NUMBER SCREEN?
		CALL	Z,SETUP		;YES - SETUP VARIABLES
		CALL	OPTION		;PUT ON SCREEN
		LD	(IY),L		;SAVE ANSWER CHOSEN
		INC	IY
		LD	(IY),H
		INC	IY
		LD	BC,4
		ADD	IX,BC		;GO TO NEXT ADDRESS
		PUSH	IX
		POP	BC		;LOAD IX IN BC
		LD	HL,ENDOP	;LOAD END ADDRESS OF DATA STRUCTURE
		AND	A
		SBC	HL,BC		;TEST SEE IF END OF DATA STRUCTURE
		JR	NZ,OP1		;NO - LOOP
		LD	(IY),0		;PUT A NULL AT END OF TABLE FOR C
		LD	(IY+1),0
		LD	HL,TABLE	;SET ADDRESS OF TABLE FOR RETURN 
		IF 	YESOP EQ 1	;IF THERE ARE ONLY SHELL OPTIONS 
			RET		;RETURN TO GAME
		ELSE
			JP	USER_OP	;ELSE JUMP TO DO REST OF USER OPTIONS
		ENDIF
	ENDIF
	IF	YESOP EQ 2		;IF USER CONTROLLED OPTIONS ONLY
		JP	USER_OP		;JUMP TO DO USER OPTIONS
	ENDIF


;
;	THIS ROUTINE SETS UP THE VARIABLES FOR OPTION FOR A NUMBER SCREEN
;
SETUP:
		PUSH	BC		;SAVE REGISTERS
		PUSH	DE
		PUSH	HL
		EX	DE,HL		;PUT END ADDRESS IN HL REG
		INC	HL
		LD	C,(HL)
		INC	HL
		LD	B,(HL)
		LD	(INC_VAR),BC	;SETUP INCREMENT VARIABLE
		INC	HL
		LD	C,(HL)
		INC	HL
		LD	B,(HL)
		LD	(LOW_VAL),BC	;SETUP LOWER LIMIT VALUE
		INC	HL
		LD	C,(HL)
		INC	HL
		LD	B,(HL)
		LD	(HIGH_VAL),BC	;SETUP UPPER LIMIT VALUE
		POP	HL
		POP	DE
		POP	BC
		RET
		
		END
