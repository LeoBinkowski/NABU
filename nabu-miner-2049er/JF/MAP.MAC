	.Z80	
;*************************************************
;MINER 2049er SCREEN LAYOUT DEVELOPMENT
;	08JUN84 JF 	ALLOW EXIT OF REDOUT FOR HELP OR RESTART
;	24MAY84	JF	CHANGED CLEAR SCREEN FLAG (SJUMP -> SCLEAR)
;	22MAY84 JF	BIGGER GAME OVER MINER MESSAGE IN GAMEOV
;	17MAY84	JF	NEW BF AND BFC [LEO.JF.PAT]
;	16MAY84	JF	FORCE ZOTTSE IN SCORUN
;	15MAY84 JF 	MAKE SURE ALL UPDATES DONE IN JF MAIN B4 DOSCR
;			FOR NEW ZOTSE HAD TO CHANGE DOLC [DOLLAR COLOR]
;	14MAY84 JF	CHANGE GAME OVER COLORS
;			FAST ZOTTSE
;	12MAY84 LB	CHANGED REFERENCE: PLANUM TO NUMPLA
;	10MAY84	JF	TEST OF CKLIM
;		JF	CHECK OUT DEATH AND LIVES
;	08MAY84	JF	SOUND INITIALIZATIONS
;	08MAY84	JF	SOUND FLAGS
;				SSTART=IN REDOUT
;				SOVER=IN GAMOV
;				SJUMP= IN CLRSCR
;	06MAY84 JF	GAMEOVER COLOR
;			TIMEOUT FOR GAMEOVER
;			SLOWER TIMER
;			STATION 10 NUMBERS
;	04MAY84 JF	MAINLINE FOR CANNON TONNAGE [DODANG]
;			CHANGE GAME OVER COLORS
;	03MAY84	JF	BIGGER TRANSPORTER
;			GAME OVER MINER ROUTINE
;			NEW BF
;	02MAY84	JF	MELD PAT / JF + 
;	18APR84		ALL NEW VERSION
;------------------------------------------------------------------------------
	.RADIX	10

CCP	EQU	0	;0=LEO [TAKES OUT TASK1] 1=JF [LEAVES TASK1 IN]
			;0=PRODUCTION	1=JF TEST WITHOUT LEO STUFF
 			;**** ALSO USED IN : ***
			;	ADSCOR.MAC
			;	JFMON.MAC
			;	MONTSK.MAC
			;	TIME.MAC
			;=== USE CCPM TO ASSEMBLE THEM ALL ===
			;    =============================	
			;***********************
CCPTSK	EQU	1	;0=MONTSK IN MAINLINE FOR DEBUG 1=MONTSK AS TASK
CCPSCR	EQU	1	;0=DONT HAVE REDOUT WHILE SCREEN BUILT 1=REGULAR

	.XLIST

	INCLUDE	COMMON.MRO
	INCLUDE	STRUCT.MRO
	INCLUDE	LINKTAB.EXA
	INCLUDE	CLKAT.MRO
	INCLUDE ARITH.MRO

COPBUF	MACRO	FRADD,TOADD,TOTBTS
;COPY A BUFFER OF LENGTH TOTBTS FROM STARTING ADDRESS FRADD TO
;STARTING ADDRESS TOADD
	LD DE,TOADD
	LD HL,FRADD
	LD BC,TOTBTS
	LDIR
	ENDM

	.LIST

; VRAM ADDRESSES	
; **************
	PTRADD::	DW	0000H		;PATTERN TABLE BASE ADDRESS
	SPRADD::	DW	1800H		;SPRITE TABLE BASE ADDRESS
	COLADD::	DW	2000H		;COLOR TABLE BASE ADDRESS
	PG1ADD::	DW	3800H		;GRAPHICS 1 PATTERN TABLE
	NAMADD::	DW	3C00H		;NAME TABLE BASE ADDRESS
	ATRADD::	DW	3F00H		;SPRITE ATRIBUTE TABLE BASE ADDRESS
	CG1ADD::	DW	3F80H		;GRAPHICS 1 COLOUR TABLE

	EXTRN	LNKTB
	IF CCP		;NOT NEEDED FOR PRODUCTION
	  EXTRN CKLIM
	  EXTRN INITSND,SOUND,SNDTCB,SNDFLG
	  EXTRN	TASK1,SPT,TCB1,SPX,SPY
	  CANX::	DB	0	;CANNON
	  CANY::	DB	0	;
	  DILIFT::	DB	0	;LIFT
	  LIFTX::	DB	0	;
	  LIFTY::	DB	0	;
	ELSE
	  EXTRN LEO_INIT,BOBTCB
	  EXTRN CANX,CANY,BIZCNT,DILIFT,LIFTX,LIFTY
	ENDIF

	EXTRN	SC1,SC2,SC3,SC4,SC5,SC6,SC7,SC8,SC9,SC10
	EXTRN	ADDENT,INICAT,FINCAT,SETD6,CKCAT
	EXTRN	ADDTAB,LASLAD,LASSLI,LASTRR,LASTSE
	EXTRN	LADTAB,SLITAB,TRRTAB,TSETAB
	EXTRN	ADDTSE,ADDMON,LASMON,MONTAB,PUTMON
	EXTRN	NIXMON,SPTNUM,MONTSK,MONTCB
	EXTRN   VALTAB,ADSCOR,COPSCO,SCOCOP,INISCO,SBUF1,SBUF2
	EXTRN	FIRST,PREPLA,PLANUM,LEV1,LEV2,ZONE1,ZONE2
	EXTRN	SCOFLG,SCOTSK,SCOTCB
	EXTRN	PLAY1,PLAY2
	EXTRN	TIMER,TIMTSK,TIMTCB,DISTIM,TIMBON,TIMFLG
	EXTRN	CCATX,CCATY,CLAFLG
	EXTRN	ZOTFLG,TSEFLG,ZOVAFG,BLKSCO
	EXTRN 	XMANFG,XMATCB,XMATSK
	EXTRN	MARFLG,WASFLG,RADMAR,RADWAS,MARTSK,PLUFLG,RADPLU
	EXTRN	PUTWAS,DOSCR,DODANG,TRRCOL,TRRCHG
	EXTRN	SSTART,SOVER,SCLEAR,HELP,RSTART,KEYPRS
	
	EXTRN	NUMPLA	;LEO PUT THIS IN...
;OTHER
	JFX::		DB	0
	JFY::		DB	0
	DX::		DB	0
	DY::		DB	0
	XX:		DW	0
	YY:		DW	0
	F:		DB	0
	ADD:		DW	0
	BASE:		DW	0
	ZZ:		DB	0
	I:		DB	0
	J:		DB	0
	K:		DB	0
	II:		DW	0
	JJ:		DW	0
	KK:		DW	0

;EQUATES
	HELPIN	EQU	0EAH	;HELP KEY PRESSED
	HELPOU	EQU	0FAH	;HELP KEY RELEASED
	LCREST	EQU	0BDH	;LOWER CASE RESTART
	UCREST  EQU	0ABH	;UPPER CASE RESTART

START::
	LD SP,(6)		;SET STACK POINTER
	N.LINKIO LNKTB		;INITIALIZE OPERATING SYSTEM
	
AGAIN:	CALL GAMINI		;INITIALIZE GAME
LLL::	
	CALL JFMAIN		;MAINLINE SUBROUTINES
	JP LLL			;LOOP FOREVER


;------------------------ SUBROUTINES -----------------------------------------

JFMAIN::
;********************************************************************
;	JF MAINLINE STUFF
;	IN TEST MODE MAINLINE KEEPS CALLING THIS ENDLESSLY
;	IN PRODUCTION MODE LEO KEEPS CALLING THIS IN HIS MAINLINE
;********************************************************************

	IF8. (NXT_GUY),.EQ.,2		;IF WE DIE, NEXT GUY'S TURN
	        ASIGN8. (NXT_GUY),1	;SO WE DONT CHANGE PUTSCR
		CALL PUTSCR		;PUT UP APPROPRIATE SCREEN
		CALL SCOTSK		;KEEP RUNNING SCORE
		CALL DISTIM		;KEEP RUNNING TIMER
	ENDIF.
	IF8. (NXT_GUY),.EQ.,1		;GO THROUGH MAINLINE ONCE MORE
		ASIGN8. (NXT_GUY),2
	ENDIF.

	IF8. (INIT_SCR),.EQ.,2		;SCREEN HAS BEEN SUCCESSFULLY DONE
		ASIGN8. (INIT_SCR),1	;SO WE DONT CHANGE PUTSCR
		CALL PUTSCR		;IF WE SUCCED (FIRE), GET NEXT SCREEN
	ENDIF.
	IF8. (INIT_SCR),.EQ.,1		;GO THROUGH MAINLINE ONCE MORE
		ASIGN8. (INIT_SCR),2
	ENDIF.

IF CCPTSK EQ 0			;PUT MONSTER TASK IN MAINLINE TO TEST
	CALL MONTSK		;TO TEST
ENDIF	;CCPTSK

IF CCP	;FOR JF TEST LEAVE IN

CLTEST:
	PCALL CKLIM,(SPX),(SPY)	;TEST LIMIT CHECKING

	IF8. (ENDGAM),.EQ.,1		;END OF GAME FLAG
		;*** SOME END OF GAME STUFF ***
		;IN PRODUCTION LEO TAKES CARE OF THIS

		CALL JFSTOP		;WAIT HERE UNTIL JOYSTICK INPUT
		CALL GAMINI		;FOR NOW START ALL OVER
		JP XJFMAI		;GO BACK TO TOP
	ENDIF.
        
ENDIF	;IF CCP

	IF8. (FIRST),.EQ.,1	;AFTER FIRST SCREEN HAS BEEN PUT UP
	  CALL CLAIM		;DO CATWALK CLAIMS
	  CALL ZOTTSE		;ERASE TREASURES OR THEIR VALUES
	  CALL SCORUP		;PUT UP TREASURE VALUE
	  CALL SCOTSK		;KEEP RUNNING SCORE
	  CALL DISTIM		;KEEP RUNNING TIMER
	  IF8. (XMANFG),.EQ.,1	;TURN OFF XMATSK [TOGGLE BACK-GROUND]
	    ASIGN8. (XMANFG),0	;RESET FLAG
	    ASIGN8. (SSTART),0	;RESET SOUND FLAG
	    N.CLKRV XMATCB	;REMOVE EXTRA MAN BLUE TOGGLE TASK
	  ENDIF.
	  IF8. (PRELEV),.EQ.,10	;FOR TENTH STATION
	    CALL DODANG		;TONNAGE STUFF
	  ENDIF.
	  IF8. (TRRCOL),.GT.,0	;CHANGE TRANSPORTER COLORS
	    CALL TRRCHG
	  ENDIF.
	ENDIF.	;IF (FIRST)=1
XJFMAI:
	RET	;END OF JFMAIN

SCORUN::
;DISPLAY RUNNING SCORE
   JP SSCRUN
	PRELEV::	DB	0	;PRESENT LEVEL
	PREZON::	DB	0	;PRESENT ZONE
	SCOX::		DB	0	;X CO-ORDINATE OF SCORE
	SCOY::		DB	0	;Y CO-ORDINATE OF SCORE
	FASBUF::	DS	88	;11 PATTERNS POSSIBLE
	FBUFP::		DW	0	;POINTER FOR FASBUF
	VIDADD::	DW	0	;WHERE WE ARE AIMING
	SCODUD:: DB	0,0,0,0,0,0,0,0	;BLANKS TO PUT UP COLOR IN PUTG2
	SCOCOL:: DB	0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H
	TIMCOL:: DB	050H,050H,050H,050H,050H,050H,050H,050H

SSCRUN:

	IF8. (PREPLA),.EQ.,1	;LEFTMOST
		ASIGN16. (VIDADD),24	;2 PATTERNS IN FROM LEFT
		LD HL,SBUF1	;SCORE BUFFER FOR PLAYER 1
		LD (BASE),HL	;PUT IN (BASE)
	ELSE.			;RIGHTMOST
		ASIGN16. (VIDADD),144	;2 PATTERNS IN FROM RIGHT
		LD HL,SBUF2
		LD (BASE),HL		
	ENDIF.

	ASIGN16. (FBUFP),FASBUF
	ASIGN8. (I),0		;COUNTER
	WHILE8. (I),.LT.,11	;SCORE BUFFERS ARE 11 LONG
		IF8. (BLKSCO),.EQ.,1	;FLAG TO ERASE SCORE
		  LD A,12		;USE BLANK
		  JP BKSCO		;PROCEED
		ENDIF.
		LD HL,(BASE)		;ADDRESS OF BUFFER OFFSET
		LD A,(HL)		;NUMBER
BKSCO:		SLA A			;TIMES 8
		SLA A			;
		SLA A			;
		LD C,A			;PUT IN BC
		LD B,0					;MAKE IT A WORD
		LD HL,NUMIES				;BASE OF NUMBERS TABLE
		ADD HL,BC			;ADDRESS OF NUMBER PATTERN
		LD (ADD),HL
		COPBUF (ADD),(FBUFP),8		;PUT 8 BYTES (NUMBER) IN FASBUF
		ADD16. (FBUFP),8		;SAVE NEXT (FBUFP)
		LD HL,(BASE)			;INCREMENT SCORE BUFFER
		INC HL				;
		LD (BASE),HL			;PUT IT IN (BASE)
		ADD8. (I),1			;INCREMENT COUNTER
	ENDW.
	PCALL VRAML8,88,FASBUF,(VIDADD)
	ASIGN8. (BLKSCO),0		;RESET FLAG

	RET

GAMINI::
	N.CLKRV 0			;REMOVE ALL TASKS
	CALÌ SETD¶			;CREATÅ DIVISIOÎ BÙ ¶ TABLE
	PCALL VBLKON			;BLANK OUT SCREEN
	PCALL VSPRIST,(SPRADD)		;SET SPRITE TABLE ADDRESS
	PCALL VNAMEST,(NAMADD)		;SET NAME TABLE ADDRESS
	PCALL VATRIST,(ATRADD)		;SET ATRIBUTE TABLE ADDRESS
	PCALL VFILL,4000H,0H,0H		;CLEAR ALL OF VRAM
	PCALL CLKPRM,7,5		;GET RID OF CURSOR
	PCALL LPATRN,MONSTR,(SPRADD)	;LOAD SPRITE TABLE
	PCALL VSETSPA,1,0		;SET SPRITE SIZE AND MAGNIFICATION

	PCALL 	LPATRN,JMINER,(PG1ADD)	;LOAD MINER MESSAGE

	LD HL,SPTNUM			;PRESET FOR FIRST NIXMON
	LD (HL),0FFH
;******** TEST BB ******************
IF CCP			;FOR JF USE, LEAVE OUT FOR PRODUCTION
	PCALL SPNAME,0,0F4H		;SET PATTERN 0F4H TO SPRITE 0
	PCALL SPCOLR,0,WHITE		;SET SPRITE COLOR FAKE TEST BB
	ASIGN8. (SPY),0C0H		;SO FAKE BB DOES NOT SHOW
	PCALL SPMOVE,0,(SPY),(SPX)	;FIRST SHOW
	SETSK TASK1,TCB1,1,1		;MOVE SPRITE AND CHECK CATWALKS
;******** TEST SOUND ******************
	CALL INITSND		;INITIALIZE SOUND
	SETSK SOUND,SNDTCB,1,1	;SOUND TASK
	ASIGN8. (SNDFLG),1		;ALLOWS SOUND TASK TO RUN
ELSE
	ASIGN8. (BIZCNT),0
ENDIÆ	;IÆ CCÐ 
;**************************************
	
	CALL INISCO			;INITIALIZE SCORE VARIABLES

	RET 	;END OF GAMINI

JFSTOP:
;WAIT FOR INPUT
JFLLL:	N.DEVRDY KEYBOARD,JSTCK1
	AND A
	JP NZ,XJFLLL
	JP JFLLL
XJFLLL:	RET	;END OF JFSTOP

PUTG2:
;	PUTS UP GRAPHICS 2 MODE BEFORE SCREEN APPEARS
;	DOES SOME LAST INSTANT INITIALIZATIONS FOR SCREENS

	PCALL	VSETG2			;SET GRAPHICS 2
	PCALL	VPTRNST,(PTRADD)	;SET PATTERN TABLE ADDRESS
	PCALL	VCOLRST,(COLADD)	;SET COLOR TABLE ADDRESS
	CALL	SETNAM			;ONE-TO-ONE TO PATTERN TABLE
	SETCOLR	BLACK,WHITE		;SET BACK-GROUND COLOR

	ASIGN8. (I),0		;FOR COUNTER
	ASIGN16. (VIDADD),(COLADD)	;POINT TO COLOR TABLE
	WHILE8. (I),.LE.,31	;FROM PAT 0 TO 31 MAKE WHITE FOR SCORES
		PCALL VRAML8,8,SCOCOL,(VIDADD)	;MAKE IT ALL WHITE
		ADD16. (VIDADD),8		;INCREMENT COL-TAB ADDRESS
		ADD8. (I),1	;INCREMENT COUNTER
	ENDW.

	ASIGN8. (I),14		;FOR COUNTER
	ASIGN16. (VIDADD),(COLADD)	;POINT TO COLOR TABLE
	ADD16. (VIDADD),112		;MIDDLE OF 1ST ROW
	WHILE8® (I),.LE.,1·	;FROÍ PAÔ 1´ TÏ 17 TIME COLOR
DUDS:		PCALL VRAML8,8,TIMCOL,(VIDADD)	;MAKE IT ALL TIMCOL
		ADD16. (VIDADD),8		;INCREMENT COL-TAB ADDRESS
		ADD8. (I),1	;INCREMENT COUNTER
	ENDW.

	LD A,(PREPLA)		;SAVE PRESENT PLAYER
	LD (K),A		;IN (K)
	ASIGN8. (PREPLA),1	;TO PUT SCORE UP
	CALL SCORUN		;  FOR PLAYER 1
	IF8. (PLANUM),.EQ.,2	;IF WE HAVE 2 PLAYERS
		ASIGN8. (PREPLA),2	;PUT SCORE UP
		CALL SCORUN		;  FOR PLAYER 2
	ENDIF.
	LD A,(K)		;RESTORE (PREPLA)
	LD (PREPLA),A		;FROM (K)

	IF8. (MARFLG),.EQ.,1	;ATTACH RADIOACTIVE MARTINI TASK
	  CALL RADMAR
	ENDIF.

	IF8. (WASFLG),.EQ.,1	;ATTACH RADIOACTIVE WASTE TASK
	  CALL WASIDE		;CREATE SIDES OF WASTE
	  CALL PUTWAS		;CREATE RADIACTIVE WASTE
	  CALL RADWAS		;START WASTSK
	ENDIF.

	IF8. (PLUFLG),.EQ.,1	;ATTACH RADIOACTIVE PLUNGERS TASK
	  CALL RADPLU
	ENDIF.

	PCALL	VBLKOFF			;VSETG2 SETS BLKON SO TAKE OFF

	RET	;END OF PUTG2

WASIDE:
;	PUT SIDES OF RADIACTIVE WASTE UP BEFORE CREATING IT
	JP SWSIDE
	SIDE:	DB	1,1
		DW	SIDEC
	SIDEC:	DB	040H,040H,040H,040H,040H,040H,040H,040H
SWSIDE:
	ASIGN8. (J),37		;START OF LEFT SIDE
	ASIGN8. (DX),216	;START OF RIGHT SIDE
	ASIGN8. (DY),160	;TOP OF SIDES
	WHILE8. (DY),.LT.,192	;TO BOTTOM OF SCREEN
		PCALL DOPIC,(J),(DY),SIDE
		PCALL DOPIC,(DX),(DY),SIDE
		ADD8. (DY),8
	ENDW.

	RET	;END OF WASIDE

PUTG1:
;PUT UP GRAPHICS 1 MODE FOR FLASHING RED SCREEN WHILE STATION SCREEN
;	IS BEING CREATED

IF CCPSCR	;ALLOWS VIEWING OF STATION SCREEN BEING BUILT IF 0

	PCALL	VSETG1			;SET GRAPHICS 1
	PCALL	VPTRNST,(PG1ADD)	;SET PATTERN TABLE ADDRESS
	PCALL	VCOLRST,(CG1ADD)	;SET COLOR TABLE ADDRESS
	PCALL	VFILL,768,06BH,(NAMADD)	;ZERO OUT NAME TABLE 6B=BLANK
	PCALL	LPATRN,MINRED,(CG1ADD)	;LOAD REDS

;MINER
	PCALL PUTPAT,9,4,076H		;M FIX FOR MINER
	PCALL PUTPAT,9,5,077H		;
	ASIGN8. (J),000H		; MINER
	ASIGN8. (X),10			;START TOPS AT (10,4)
	ASIGN8. (Y),4			;
	ASIGN8. (JFY),5			;BOTTOMS AT (10,5)
	ASIGN8. (I),0			;START COUNTER
	WHILE8. (I),.LT.,7		;MINER IS 7 PATTERNS LONG
		PCALL PUTPAT,(X),(Y),(J)
		ADD8. (J),1
		PCALL PUTPAT,(X),(JFY),(J)
		ADD8. (J),1
		ADD8. (X),1
		ADD8. (I),1
	ENDW.

	PCALL REDNUM,(PREPLA),18,4	;MINER NUMBER=PRESENT PLAYER

;PREPARE FOR
	ASIGN8. (J),00EH		; PREPARE FOR
	ASIGN8. (X),7			;START TOPS AT (7,9)
	ASIGN8. (Y),9			;
	ASIGN8. (JFY),10		;BOTTOMS AT (7,10)
	ASIGN8. (I),0			;START COUNTER
	WHILE8. (I),.LT.,16		;PREPARE FOR IS 16 PATTERNS LONG
		PCALL PUTPAT,(X),(Y),(J)
		ADD8. (J),1
		PCALL PUTPAT,(X),(JFY),(J)
		ADD8. (J),1
		ADD8. (X),1
		ADD8. (I),1
	ENDW.

;STATION
	ASIGN8. (J),02EH		; STATION
	ASIGN8. (X),9			;START TOPS AT (9,14)
	ASIGN8. (Y),14			;
	ASIGN8. (JFY),15		;START BOTTOMS AT (9,15)
	ASIGN8. (I),0			;START COUNTER
	WHILE8. (I),.LT.,10		;STATION IS 10 PATTERNS LONG
		PCALL PUTPAT,(X),(Y),(J)
		ADD8. (J),1
		PCALL PUTPAT,(X),(JFY),(J)
		ADD8. (J),1
		ADD8. (X),1
		ADD8. (I),1
	ENDW.

;ZONE
	ASIGN8. (J),042H		; ZONE
	ASIGN8. (X),11			;START TOPS AT (11,18)
	ASIGN8. (Y),18			;
	ASIGN8. (JFY),19		;START BOTTOMS AT (11,19)
	ASIGN8. (I),0			;START COUNTER
	WHILE8. (I),.LT.,6		;ZONE IS 6 PATTERNS LONG
		PCALL PUTPAT,(X),(Y),(J)
		ADD8. (J),1
		PCALL PUTPAT,(X),(JFY),(J)		
		ADD8. (J),1
		ADD8. (X),1
		ADD8. (I),1
	ENDW.
ENDIF	;IF CCPSCR

NNN:
	IF8. (PREPLA),.EQ.,1		;FOR PLAYER 1
		ASIGN8. (PRELEV),(LEV1)	
		ASIGN8. (PREZON),(ZONE1)
	ELSE.				;FOR PLAYER 2
		ASIGN8. (PRELEV),(LEV2)
		ASIGN8. (PREZON),(ZONE2)
	ENDIF.

 IF CCPSCR	;ALLOWS VIEWING OF SCREEN BEING BUILT IF 0

	PCALL REDNUM,(PRELEV),20,14		;STATION NUMBER
	PCALL REDNUM,(PREZON),18,18		;ZONE NUMBER

	ASIGN8. (REDTOG),0		;SO FIRST TIME ALWAYS RED
	SETCOLR	DRED			;SET BACK-GROUND COLOR

  ENDIF	;IF CCPSCR

	PCALL	VBLKOFF			;VSETG1 SETS BLKON SO TAKE OFF

XPG1:	RET	;END OF PUTG1

REDNUM:
;PUTS UP GRAPHICS 1 MODE NUMBERS FOR MINER, STATION AND ZONE

	LD A,0		;RESET 10 FLAG
	LD (K),A	;
	LD A,E				;PUT E IN (X)
	LD (X),A			;
	LD A,L				;PUT L IN (Y)
	LD (Y),A
	LD A,C				;NUMBER TO PUT UP	
	CP 10		;IS NUMBER 10 ?
	JP NZ,REGNUM	;NO, IT IS REGULAR NUMBER
	ASIGN8. (K),1	;FLAG THAT WE HAVE A TEN
	LD A,1		;YES, START OUT WITH 1
REGNUM:
	SLA A				;MULTIPLY TIMES 4
	SLA A
	LD C,A				;PUT IN C 
	LD A,04EH			;LOAD BASE OF NUMBERS (0 BASE)
	ADD A,C				;ADD UP TO GET RIGHT NUMBER
	LD (J),A			;PUT IN (J)
	PCALL PUTPAT,(X),(Y),(J)	;TOP OF NUMBER
	LD A,(Y)			;BOTTOM OF NUMBER
	INC A 				;
	LD (Y),A			;
	LD A,(J)			;BOTTOM OF NUMBER
	INC A 				;
	LD (J),A			;
	PCALL PUTPAT,(X),(Y),(J)	;NUMBER IS 4 PATTERNS (2X2)
	ADD8. (X),1			;
	SUB8. (Y),1			;
	ADD8. (J),1			;
	PCALL PUTPAT,(X),(Y),(J)	;
	ADD8. (Y),1			;
	ADD8. (J),1			;
	PCALL PUTPAT,(X),(Y),(J)	;
	IF8. (K),.EQ.,1		;WE HAVE A TEN, DO ZERO
	    ASIGN8. (K),0	;TURN OFF FLAG
	    ADD8. (X),1		;MOVE RIGHT ONE
	    SUB8. (Y),1		;MOVE UP 1
	    LD A,0		;PUT UP 0 OF 10
	    JP REGNUM		;
	ENDIF.
		
	RET	;END OF REDNUM

REDOUT::
;TOGGLES COLORS FOR FLASHING SCREEN

	JP DORO

	RDOTCB:		DS 	6	;TCB FOR 
	REDTOG:		DB	0	;TOGGLE ALTERNATELY BLACK/RED
	REDX::		DB	0	;REDOUT EXIT FLAG FOR HELP/RESTART
	REDCNT:		DB	0	;KEEP COUNT FOR EACH COLOR
DORO:
	LD A,(KEYPRS)			;LEO LOADS THIS WITH LAST KEY PRESSED
	CP 0				;IS THERE ANYTHING ?
	JP Z,OKRED			;NO, CARRY ON, ELSE CHECK VALUE
	CP HELPIN			;IS IT HELP KEY PRESSED ?
	JP Z,XREDX			;YES, GO SET EXIT FLAG
	CP HELPOU			;IS IT HELP KEY RELEASED ?
	JP Z,XREDX			;YES, GO SET EXIT FLAG
	CP UCREST			;NO, IS IT UPPER CASE RESTART ?
	JP Z,XREDX			;YES, GO SET EXIT FLAG
	CP LCREST			;NO, IS IT LOWER CASE RESTART ?
	JP NZ,OKRED			;NO, THEN CARRY ON AT OKRED
XREDX:  LD (REDX),A			;YES, SET RED EXIT FLAG
OKRED:	
	LD A,(REDCNT)		;DEC COUNT
	DEC A
	LD (REDCNT),A
	JP NZ,XRDOUT		;IF NOT ZERO SKIP OUT
	ASIGN8. (REDCNT),30	;RESET FOR NEXT TIME
	PCALL VBLKON			;WHILE WE CHANGE TABLE
	LD A,(REDTOG)			;CURRENT VALUE OF TOGGLE
	XOR 1				;TOGGLE IT
	LD (REDTOG),A			;REPLACE IN (REDTOG)
	JP NZ,REDB			;IF NOT 0 GO REDB
BLKB:
	SETCOLR	BLACK			;SET BACK-GROUND COLOR DARK RED
	PCALL	LPATRN,MINRED,(CG1ADD)	;LOAD REDS
	JP XDORO
REDB:
	SETCOLR	DRED			;SET BACK-GROUND COLOR BLACK
	PCALL	LPATRN,MINBLK,(CG1ADD)	;LOAD BLACKS

XDORO:	PCALL VBLKOFF			;TURN SCREEN BACK ON
XRDOUT: RET	;END OF REDOUT

CLRSCR:
;	CLEARS SCREEN BEFORE CREATING THE NEXT ONE

	ASIGN8. (SCLEAR),1		;TURN ON SOUND
	ASIGN16. (II),17FFH
	ASIGN8. (I),0			;FOR EVERY ROW
	WHILE8. (I),.LT.,24
	    ASIGN8. (J),0			;FOR EVERY BYTE
	    ASIGN16. (JJ),(II)			;START AT NEXT ROW
	    WHILE8. (J),.LT.,8
		ASIGN8. (K),0			;FOR EVERY COLUMN
		ASIGN16. (KK),(JJ)		;
		WHILE8. (K),.LT.,32
		    ASIGN16. (ADD),(PTRADD)
		    ADD16. (ADD),(KK)
		    PCALL VRAMWR,(ADD),0	;WRITE TO PAT
		    ASIGN16. (ADD),(COLADD)
		    ADD16. (ADD),(KK)
		    PCALL VRAMWR,(ADD),0	;WRITE TO COL
		    SUB16. (KK),8
		    ADD8. (K),1
		ENDW.	;(K)<32
		SUB16. (JJ),1
		ADD8. (J),1
	    ENDW.	;(J)<8
	    SUB16. (II),256
	    ADD8. (I),1
	ENDW.	;(I)<24
	ASIGN8. (SCLEAR),0		;TURN OFF SOUND

	RET	;END OF CLRSCR

PUTSCR::
;PUTS UP PROPER SCREEN FOR PROPER PLAYER

	JP SPTSCR
	SCRTAB:		DW	SC1,SC2,SC3,SC4,SC5	;SCREEN TABLE
			DW	SC6,SC7,SC8,SC9,SC10	;ADD HERE
	EOSCRT:						;END OF SCREEN TABLE
	TOTSCR:		DB	10	;TOTAL NUMBER OF SCREENS
	SCRNUM::	DB	0FFH		;SCREEN NUMBER
	INIT_SCR::	DB	0		;WE WANT NEXT SCREEN (ALIVE)
	NXT_GUY::	DB	0		;NEXT GUY'S TURN (DIED)
	CATCNT::	DB	0		;CLAIMED CATWALK TALLY 
	ENDGAM::	DB	0		;END OF GAME FLAG
	DDPLAY::	DB	0		;DEAD PLAYER FLAG
SPTSCR:

IF CCP			;FOR JF TESTING
	N.CLKRV TCB1				;GET RID OF FAKE BB TASK
ENDIF

	IF8. (FIRST),.EQ.,1		;WE HAVE ALREADY DONE A SCREEN 
	  IF CCPTSK
	    N.CLKRV MONTCB		;STOP MONTSK
	  ENDIF
	  N.CLKRV TIMTCB		;STOP TIMER TASK
	  IF8. (NXT_GUY),.EQ.,1		;GET NEXT GUY [THIS ONE DIED]
	    CALL NIXMON				;GET RID OF MONSTERS
	    IF8. (WASFLG),.EQ.,2	;WE HAVE RADIOACTIVE WASTE GOING
	      CALL RADWAS	;TURN IT OFF B4 CLEARING SCREEN
	    ENDIF.
	    IF8. (PLUFLG),.EQ.,2	;WE HAVE RADIOACTIVE PLUNGERS GOING
	      CALL RADPLU	;TURN THEM OFF B4 CLEARING SCREEN
	    ENDIF.
	    CALL SCOCOP		;SAVE WORKING SCORE FOR PRE-PLAYER B4 TOGGLE
	    IF8. (PREPLA),.EQ.,1	;SUBTRACT LIFE FOR PREPLAY
	      SUB8. (PLAY1),1		;FOR PLAYER 1
	      IF8. (PLAY1),.LT.,1	;ZERO LIVES LEFT
		;*** DEATH MESSAGE ***
		ASIGN8. (DDPLAY),1	;FOR GAMOV
		CALL GAMOV		;MINER MESSAGE & STOP
	      ENDIF.	;(PLAY1)<1
	    ELSE.	;(PREPLAY)=1
	      SUB8. (PLAY2),1		;FOR PLAYER 2
	      IF8. (PLAY2),.LT.,1	;ZERO LIVES LEFT
		;*** DEATH MESSAGE ***
		ASIGN8. (DDPLAY),2	;FOR GAMOV
		CALL GAMOV		;MINER MESSAGE & STOP
	      ENDIF.	;(PLAY2)<1
	    ENDIF.	;(PREPLAY)=1
	    CALL CLRSCR				;CLEAR SCREEN
	    IF8. (MARFLG),.EQ.,2	;WE HAVE A RADIOACTIVE MARTINI GOING
	      CALL RADMAR	;TURN IT OFF AFTER CLEARING SCREEN
	    ENDIF.
	    IF8. (PLAY1),.GT.,0		;WE STILL HAVE LIVES
		JP GAMEOK
	    ENDIF.
	    IF8. (PLAY2),.GT.,0		;WE STILL HAVE LIVES
		JP GAMEOK
	    ENDIF.
	    ;*** END OF GAME ***
	    ASIGN8. (ENDGAM),1	;FLAG END OF GAME
	    JP XPTSCR			;EXIT THIS SUBROUTINE
GAMEOK:			;WE STILL HAVE A GAME
	    IF8. (NUMPLA),.EQ.,2	;IF 2 PLAYERS ---LEO CHANGED HERE****
	      IF8. (PREPLA),.EQ.,1	;TOGGLE PLAYER
		IF8. (PLAY2),.GT.,0	;IF PLAYER 2 STILL ALIVE
	          ASIGN8. (PREPLA),2
		ENDIF.
	      ELSE.	;(PREPLAY)=1
		IF8. (PLAY1),.GT.,0	;PLAYER 1 STILL ALIVE
	          ASIGN8. (PREPLA),1
		ENDIF.
	      ENDIF.	;(PREPLA)=1
	    ENDIF.	;(PLANUM)=2
	    ASIGN8. (NXT_GUY),0		;RESET FLAG
	  ENDIF.	;(NXT_GUY)=1
	  IF8. (INIT_SCR),.EQ.,1	;NEXT SCREEN FOR SAME PLAYER
	    IFF CCP		;FOR PRODUCTION
	      N.CLKRV BOBTCB	;GET RID OF BB TASK
	    ENDIF
	    CALL TIMBON		;TIME BONUS
	    CALL NIXMON				;GET RID OF MONSTERS
	    IF8. (WASFLG),.EQ.,2	;WE HAVE RADIOACTIVE WASTE GOING
	      CALL RADWAS	;TURN IT OFF B4 CLRSCR
	    ENDIF.
	    IF8. (PLUFLG),.EQ.,2	;WE HAVE RADIOACTIVE PLUNGERS GOING
	      CALL RADPLU	;TURN IT OFF B4 CLRSCR
	    ENDIF.
	    CALL CLRSCR				;CLEAR SCREEN
	    IF8. (MARFLG),.EQ.,2	;WE HAVE A RADIOACTIVE MARTINI GOING
	      CALL RADMAR	;TURN IT OFF AFTER CLRSCR
	    ENDIF.
	    CALL SCOCOP		;SAVE WORKING SCORE FOR PRE-PLAYER AF BONUS
	    IF8. (PREPLA),.EQ.,1	;INCREMENT SCREEN
	      ADD8. (LEV1),1		;
	      IF8. (LEV1),.GT.,(TOTSCR)	;CHECK IF > 10 [10 SO FAR]
		ASIGN8. (LEV1),1	;BACK TO LEVEL 1
		ADD8. (ZONE1),1		;INC ZONE
		IF8. (ZONE1),.GT.,10	;CHECK FOR ZONE > 10
		  ASIGN8. (ZONE1),1	;BACK TO 1 ???
		ENDIF.
	      ENDIF.	;(LEV1)>10	
	    ELSE.			;FOR PLAYER 2
	      ADD8. (LEV2),1		;
	      IF8. (LEV2),.GT.,(TOTSCR)	;CHECK IF > 10 [10 SO FAR]
		ASIGN8. (LEV2),1	;BACK TO LEVEL 1
		ADD8® (ZONE2),±		;INÃ ZONE
		IF8® (ZONE2),.GT.,1°	;CHECË FOÒ ZONÅ ¾ 10
		  ASIGN8® (ZONE2),±	;BACË TÏ ± ???
		ENDIF.
	      ENDIF.	;(LEV2)>10	
	    ENDIF.	;(PREPLA)=1
	    ASIGN8. (INIT_SCR),0	;RESET FLAG
	  ENDIF.	;(INIT.SCR)=1
	ELSE.					;FIRST SCREEN
	  ASIGN8. (FIRST),1		;FLAG IT
	  ASIGN8. (INIT_SCR),0
	ENDIF.		;(FIRST)=1 [NOT 1ST SCREEN]

	CALL COPSCO	;COPY PRE-PLAYER SCORE TO WORKING SCORE AFTER TOGGLE
	PCALL ADSCOR,0		;TO GET LIVES RIGHT
	ASIGN8. (SCOFLG),0		;SO WE DO NOT DISPLAY IT
	IF8. (XMANFG),.GT.,0	;WE HAVE A TOGGLE GOING
	  ASIGN8. (SSTART),0	;TURN SOUND OFF
	  N.CLKRV XMATCB	;DETACH IT
	ENDIF.
	CALL PUTG1				;SET UP GRAPHICS 1
IF CCPSCR
	ASIGN8. (SSTART),1			;REDOUT SOUND
	ASIGN8. (REDX),0			;RESET EXIT FLAG
	ASIGN8. (REDCNT),1			;COUNTER FOR REDOUT
	SETSK REDOUT,RDOTCB,1,1			;RED MESSAGE
ENDIF
	LD A,(PRELEV)			;SET AT PUT G1
	DEC A				;TABLE IS 0 BASE
	SLA A		;MULTIPLY TIMES 2
	LD C,A		;PUT IN C
	LD B,0		;MAKE BC A WORD. OFFSET OF TABLE
	LD HL,SCRTAB	;GET BASE OF SCREEN TABLE
	ADD HL,BC	;ADD BASE + OFFSET
	LD C,(HL)	;PUT IT IN BC
	INC HL		;  SCREEN ADDRESS
	LD B,(HL)	;
	LD H,B		;MOVE BC TO HL FOR JUMP
	LD L,C		;
	CALL DOSCR	;HL HAS ADDRESS OF SCREEN TO BUILD
SCRRET::		;SCREEN ROUTINES SHALL JUMP BACK TO HERE
IF CCPSCR
	IF8. (REDX),.EQ.,0		;NORMAL EXIT WAIT TILL END OF COLOR
REDLOO:     LD A,(REDCNT)		;
	    CP 3
	    JP NZ,REDLOO		    
	    LD A,(REDTOG)		;CHECK FOR DOO OF DEE-DOO
	    CP 0
	    JP NZ,REDLOO
	ENDIF.
	
	N.CLKRV RDOTCB			;REMOVE REDOUT TASK
	ASIGN8. (SSTART),0		;TURN OFF REDOUT SOUND
ENDIF

	IF8. (REDX),.NE.,0		;WE HAD A REDOUT EXIT
	    PCALL VBLKON		;WHILE WE GO TO NEW SCREEN
	    IF8. (REDX),.EQ.,HELPIN	;HELP
		JP HELP
	    ENDIF.
	    IF8. (REDX),.EQ.,HELPOU	;HELP
		JP HELP
	    ENDIF.
	    JP RSTART			;ELSE RESTART
	ENDIF.

	CALL PUTG2			;SET UP GRAPHICS 2

IF CCP		;FOR JF TEST ONLY
	;**** FAKE TEST BB ****
	ASIGN8. (SPY),173		;READY SPRITE CO-ORDINATES
	ASIGN8. (SPX),0			;
	PCALL SPMOVE,0,(SPY),(SPX)	;MOVE SPRITE
	SETSK TASK1,TCB1,1,1		;MOVE SPRITE AND CHECK CATWALKS
ELSE
	CALL LEO_INIT
ENDIF

	CALL PUTMON			;CREATE MONSTERS FROM MONTAB
IF CCPTSK
	SETSK MONTSK,MONTCB,1,1		;MOVE MONSTERS & DETECT TREASURES
ENDIF
	ASIGN8. (TIMFLG),1		;FLAG FOR DISPLAY
	CALL DISTIM			;SHOW TIME BEFORE START OF TIMER
	SETSK TIMTSK,TIMTCB,90,90	;KEEP TIMER GOING
XPTSCR:

	RET	;END OF PUTSCR

GAMOV:
;PUT GAME OVER PLAYER # AND PAUSE
	ASIGN8. (SOVER),1		;GAMEOV SOUND [HE TURNS IT OFF]
	ASIGN8. (K),066H		;FIRST BASCKGROUND COLOR RED/RED

;	FIRST CLEAR AREA
COLOO:
	ASIGN16. (II),(COLADD)		;COLOR TABLE BASE ADDRESS
	ADD16. (II),2080		;WHERE MESSAGE WILL START
	ASIGN8. (J),24			;NUMBER OF PATTERNS ACCROSS TO CLEAR
	WHILE8. (J),.GT.,0		;LOOP 24 TIMES
	    ASIGN16. (JJ),(II)		;PUT BASE ADDRESS OF 3 PATTS IN JJ
	    PCALL VFILL,8,(K),(JJ)	;CLEAR IT [DRED,DRED]
	    ADD16. (JJ),256		;TO DO NEXT PAT DOWN
	    PCALL VFILL,8,(K),(JJ)	;CLEAR IT [DRED,DRED]
	    ADD16. (JJ),256		;TO DO NEXT PAT DOWN
	    PCALL VFILL,8,(K),(JJ)	;CLEAR IT [DRED,DRED]
	    ADD16. (II),8		;MOVE (II) RIGHT ONE PAT
	    SUB8. (J),1			;DEC LOOP COUNTER
	ENDW.	;J>0

	IF8. (K),.EQ.,016H		;ALREADY DONE LOOP TWICE
	    JP XGAMOV			;SO EXIT
	ENDIF.

;	WRITE IT
	ASIGN16. (JJ),(PTRADD)		;PATTERN TABLE BASE ADDRESS
	ADD16. (JJ),2080		;WHERE MESSAGE WILL START
	ASIGN16. (II),OVMESS		;WHERE MESSAGE STARTS IN RAM
	ASIGN16. (I),22			;MESSAGE IS 22 + 2 FOR NUMBER
	WHILE8. (I),.GT.,0		;LOOP
	    ASIGN16. (ADD),(JJ)		;VRAM ADDRESS
	    ASIGN8. (J),3		;FOR EACH OF 3 PATTERNS
	    WHILE8. (J),.GT.,0		;
		PCALL VRAMLD,8,(II),(ADD)
		ADD16. (II),8		;NEXT ONE OVER
		ADD16. (ADD),256	;DOWN 1
		SUB8. (J),1		;DEC COUNTER
	    ENDW.	;(I)>0
	    ADD16. (JJ),8		;MOVE ADDRESS RIGHT 1
	    SUB8. (I),1			;DEC COUNTER
	ENDW.	;(I)>0

	IF8. (DDPLAY),.EQ.,1		;FOR MINER 1
	    ASIGN16. (II),OVMI1
	ELSE.				;MINER 2
	    ASIGN16. (II),OVMI2
	ENDIF.

	ASIGN16. (I),2			;MESSAGE IS 22 + 2 FOR NUMBER
	WHILE8. (I),.GT.,0		;LOOP
	    ASIGN16. (ADD),(JJ)		;VRAM ADDRESS
	    ASIGN8. (J),3		;FOR EACH OF 3 PATTERNS
	    WHILE8. (J),.GT.,0		;
		PCALL VRAMLD,8,(II),(ADD)
		ADD16. (II),8		;NEXT ONE OVER
		ADD16. (ADD),256	;DOWN 1
		SUB8. (J),1		;DEC COUNTER
	    ENDW.	;(I)>0
	    ADD16. (JJ),8		;MOVE ADDRESS RIGHT 1
	    SUB8. (I),1			;DEC COUNTER
	ENDW.	;(I)>0

;	MAKE IT APPEAR
	ASIGN8. (K),016H		;BLACK/RED
	JP COLOO			;DO COLORS AGAIN

XGAMOV:
	CALL JFWAIT			;STAY HERE FOR WHILE

	RET	;END OF GAMOV

JFWAIT:
;	WAITS FOR 180 INTERRUPTS AFTER GAME OVER MESSAGE APPEARS

	JP SJFWT
	JFWFLG:		DB	0	;FLAG TO WAIT
	JFWTCB:		DS	6	;FOR JFWTSK
SJFWT:
	ASIGN8. (JFWFLG),0	;RESET FLAG
	SETSK JFWTSK,JFWTCB,1,0180	;WAIT FOR TASK 180 INTERRUPTS
	WHILE8. (JFWFLG),.EQ.,0
		LD A,B
	ENDW.
	N.CLKRV JFWTCB			;REMOVE IT
	
	RET	;END OF JFWAIT

JFWTSK:
;	TASK USED BY JFWAIT TO WAIT AFTER GAME OVER MESSAGE

	ASIGN8. (JFWFLG),1

	RET	;END OF JFWTSK

SETNAM:
;SET NAME TABLE TO CORRESPOND 1 TO 1 TO PATTERN TABLE
	ASIGN8.	(X),0
	ASIGN16. (YY),0
	ASIGN16. (BASE),(NAMADD)
	WHILE16. (YY),.LT.,769
		PCALL VRAMWR (BASE),(X)
		LD A,(X)
		INC A
		LD (X),A
		LD BC,(BASE)
		INC BC
		LD (BASE),BC
		LD BC,(YY)
		INC BC
		LD (YY),BC
	ENDW.

	RET	;END OF SETNAM

DOPIC::
;TAKE A PICTURE OF XDIM BY YDIM PATTERNS 
;AND PUT IT AT (XPAT+XSHI,YPAT+YSHI)
	JP SDOPIC
;FOR PUTTING PICTURE UP
	ROTCOL:		DS 	8	;COLOR OF LAST ROTATED BYTE
	ROTBYT:		DS	8	;SET OF ROTATED PATTERNS
	T8:		DB	0	;TEMPORARY
	T16:		DW	0	;TEMP
	T16A:		DW	0	;TEMP
	OVFLAG::		DB	0	;OVERWRITE FLAG
	ORFLAG::		DB	1	;OR FLAG
	W:		DB	0	;FOR X-SHIFT LOOP IN DOXSHI
	X:		DB	0	;FOR X PATTERN LOOP
	Y:		DB	0	;FOR Y PATTERN LOOP
	Z.:		DB	0	;FOR BYTES IN PATTERN LOOP
	XDIM:		DB	0	;NUMBER OF PATS ALONG X
	YDIM:		DB	0	;PATS DOWN Y
	XPAT:		DB	0	;X PAT START
	XSHI:		DB	0	;X PIXEL SHIFT
	YPAT:		DB	0	;Y PAT START
	YSHI:		DB	0	;Y PIXEL SHIFT
	VBASE:		DW	0	;WHERE PIC STARTS
	VADD:		DW	0	;VIDEO ADDRESS
	VOFF:		DW	0	;VIDEO BYTE OFFSET
	CBASE:		DW	0	;WHERE COLOR STARTS
	CADD:		DW	0	;COLOR ADDRESS
	COFF:		DW	0	;COLOR BYTE OFFSET
	PICBAS:		DW	0	;BASE ADDRESS OF PICTURE PATS
	PICADD:		DW	0	;BASE ADD OF INDIVIDUAL PICTURE PATS
	PICOFF:		DW	0	;ADDRESS OF PIC BYTE
	PICVAL:		DB	0	;VALUE OF BYTE AT PICOFF
	PCOBAS:		DW	0	;BASE ADDRESS OF PICTURE COLOR PATS
	PCOADD:		DW	0	;BASE ADD OF INDIVIDUAL PIC COL PATS
	PCOOFF:		DW	0	;ADDRESS OF PIC COLOR BYTE
	PCOVAL:		DB	0	;VALUE OF BYTE AT PCOOFF
SDOPIC:
;------ NEW WAY USING PCALL -------
	LD A,C		;BC=(X POSITION)
	LD (XSHI),A	;PUT IN (XSHI)
	LD A,E		;DE=(Y POSITION)
	LD (YSHI),A	;PUT IN (YSHI)
	LD A,(HL)	;ADDRESS OF PICTURE INFO START = X DIMENSION
	LD (XDIM),A	;PUT IN (XDIM)
	INC HL		;Y DIM
	LD A,(HL)	;
	LD (YDIM),A	;
	INC HL		;PICTURE COLOR ADDRESS
	LD C,(HL)	;LOW BYTE OF WORD
	INC HL		;
	LD B,(HL)	;HIGH BYTE OF WORD
	LD (PCOADD),BC	;
	INC HL		;NOW HL IS THE ADDRESS OF THE ACTUAL PICTURE
	LD (PICADD),HL	;PUT IT IN (PICADD)
;------ NEW WAY USING PCALL -------

PUFAKO:		;ENTRY WHEN VARIABLE DIMENSIONS REQUIRED
	LD A,(XSHI)		;START OUT WITH XP
	SRL A			;DIVIDE
	SRL A			;  BY
	SRL A			;    8
	LD (XPAT),A		;SAVE IN (XPAT)
	LD A,(XSHI)		;START OUT WITH XP
	AND 07H			;GET MOD
	LD (XSHI),A		;SAVE IN (XSHI)
	LD A,(YSHI)		;START OUT WITH YP
	SRL A			;DIVIDE
	SRL A			;  BY
	SRL A			;     8
	LD (YPAT),A		;PUT IN (YPAT)
	LD A,(YSHI)		;START OUT WITH YP
	AND 07H			;GET MOD
	LD (YSHI),A		;SAVE IN (YSHI) 
	LD DE,(XPAT)	;HOW MANY PATTERNS RIGHT
	SLA E		;MULTIPLY
	SLA E		;   BY
	SLA E		;    8
	LD A,(YPAT)	;HOW MANY PATTERNS RIGHT
	LD D,A		;MULTIPLY BY 256 AND ADD TO X
	LD HL,(PTRADD)	;PAT TABLE BASE
	ADD HL,DE	;ADD OFFSET TO BASE
	LD (VBASE),HL	;PUT RESULT IN VBASE
	LD HL,(COLADD)	;COL TABLE BASE
	ADD HL,DE	;ADD OFFSET TO BASE
	LD (CBASE),HL	;PUT RESULT IN CBASE
	ASIGN8. (Y),0
	WHILE8. (Y),.LT.,(YDIM)
ASX:		IF8. (XSHI),.GT.,0	;IF WE HAVE AN XSHI
			LD A,2		;COUNTER
			LD HL,ROTBYT
LRC:			LD B,8		;ZERO OUT THE 8 ROTBYT'S
ZRB:			LD (HL),0
			INC HL
			DJNZ ZRB
			LD HL,ROTCOL
			DEC A
			JP NZ,LRC
		ENDIF.
		ASIGN8. (X),0
		WHILE8. (X),.LT.,(XDIM)
LASTX:			LD DE,(X)	;X OFFSET OF PIC
			SLA E		;MULTIPLY
			SLA E		;   BY
			SLA E		;    8
			LD A,(Y)	;Y OFFSET OF PIC
			LD D,A		;MULTIPLY BY 256 AND ADD TO X
			LD HL,(VBASE)	;PAT BASE
			ADD HL,DE	;ADD OFFSET TO BASE
			LD (VADD),HL	;PUT RESULT IN VADD
			LD HL,(CBASE)	;COL BASE
			ADD HL,DE	;ADD OFFSET TO BASE
			LD (CADD),HL	;PUT RESULT IN CADD
			LD A,0
			LD (Z.),A
			WHILE8. (Z.),.LT.,8	;FOR EACH BYTE OF PAT
				LD DE,(Z.)	;PICK UP BYTE OFFSET
				LD A,0		;MAKE
				LD D,A		;   WORD
				LD HL,(VADD)	;START AT VIDEO PAT BASE
				ADD HL,DE	;ADD TO PATTERN BASE
				LD (VOFF),HL	;SAVE IN VOFF
				LD HL,(CADD)	;START AT COLOR PAT BASE
				ADD HL,DE	;ADD TO PATTERN BASE
				LD (COFF),HL	;SAVE IN COFF
				IF8. (X),.EQ.,(XDIM)
					ASIGN8. (PICVAL),0
					ASIGN8. (PCOVAL),0
					JP WR
				ENDIF.
				IF8. (Z.),.LT.,(YSHI)	;GET FROM LAST ROW
					IF8. (Y),.EQ.,0	;FIRST ROW
						JP INCZ	;SKIP IT
					ELSE.		;GO GET IT
					;HL=(PICADD)-((XDIM-1)*8+(YSHI)-(Z.))
						LD DE,(XDIM)	;
						DEC E		;
						SLA E		;
						SLA E		;
						SLA E		;
						LD A,(YSHI)	;
						ADD A,E		;
						LD DE,(Z.)	;
						SUB E		;
						LD E,A		;
						LD D,0		;
						LD (T16),DE	;
						LD HL,(PICADD)	;CURR PAT ADD
						LD (T16A),HL	;
						SUB16. (T16A),(T16)	;
						LD HL,(T16A)	;
						LD A,(HL)	;LOAD
						LD (PICVAL),A	;  PICVAL
						LD HL,(PCOADD)	;CURR COL ADD
						LD (T16A),HL	;
						SUB16. (T16A),(T16)	;
						LD HL,(T16A)	;
						LD A,(HL)	;LOAD
						LD (PCOVAL),A	;  PCOVAL
					ENDIF.		;GO GET IT
				ELSE.	;Z. GE YSHI 
					IF8. (Y),.GE.,(YDIM)
						JP INCX
						ENDIF.	
					LD A,(Z.)	;BYTE OFFSET
					LD DE,(YSHI)	;SHIFT
					SUB E		;A=Z.-SHIFT
					LD E,A		;PUT IN DE
					LD D,0		;ADD
					LD HL,(PICADD)	;PATT BASE
					ADD HL,DE	;    INTO HL
					LD A,(HL)	;LOAD
					LD (PICVAL),A	;  PICVAL
					LD HL,(PCOADD)	;COL BASE
					ADD HL,DE	;    INTO HL
					LD A,(HL)	;LOAD
					LD (PCOVAL),A	;  PCOVAL
				ENDIF.	;Z. ? YSHI
WR:				IF8. (XSHI),.GT.,0
				  CALL DOXSHI	;DO X-SHIFT
				ENDIF.		;IF XSHI>0
				IF8. (ORFLAG),.EQ.,1	;WE WANT TO OR
				    PCALL VRAMRD,(VOFF)	;READ WHAT'S THERE
				    LD HL,PICVAL	;LOAD WHAT WE HAVE
				    OR (HL)		;OR THE TWO
				    LD (PICVAL),A	;PUT IN (PICVAL)
				    IF8. (PCOVAL),.EQ.,0;IF NO COLOR
				      PCALL VRAMRD,(COFF);GRAB LAST COLOR
				      LD (PCOVAL),A	;LOAD INTO PCOVAL
				    ENDIF.		;IF PCOVAL=0
				ENDIF.		;IF ORFLAG=1
				IF8. (OVFLAG),.EQ.,0	;DO NOT OVERWRITE
				  IF8. (PICVAL),.GT.,0  ;CHECK FOR 'BLANKS'
				    PCALL VRAMWR,(VOFF),(PICVAL)  ;WRITE TO PAT
				    PCALL VRAMWR,(COFF),(PCOVAL)  ;WRITE TO COL
				  ENDIF.
				ELSE.			;OVERWRITE
				  IF8. (X),.EQ.,(XDIM)	;XXXX
				    JP INCZ
				  ENDIF.
				  PCALL VRAMWR,(VOFF),(PICVAL)  ;WRITE TO PAT
				  PCALL VRAMWR,(COFF),(PCOVAL)  ;WRITE TO COL
				ENDIF.
INCZ:				LD A,(Z.)
				INC A
				LD (Z.),A
			ENDW.	;(Z.)
INCX:
			LD A,(X)
			INC A
			LD (X),A
			IF8. (X),.EQ.,(XDIM)
				IF8. (XSHI),.GT.,0
					JP LASTX
				ENDIF.
			ENDIF.
			LD DE,0008H	;  PICADD
			LD HL,(PICADD)	;INC 
			ADD HL,DE	;    BY 8
			LD (PICADD),HL	;       EACH TIME
			LD HL,(PCOADD)	;INC 
			ADD HL,DE	;    BY 8
			LD (PCOADD),HL	;       EACH TIME
		ENDW.	;(X)
		LD A,(Y)
		INC A
		LD (Y),A
		IF8. (Y),.EQ.,(YDIM)
			IF8. (YSHI),.GT.,0
				JP ASX
				ENDIF.
			ENDIF.
	ENDW.		; (Y)

	RET	;END OF DOPIC

DOXSHI:
;TAKE CARE OF SHIFT IN X DIRECTION FOR DOPIC
	LD A,(XSHI)		;SET FOR ROTATE LOOP
	LD HL,ROTBYT		;ADDRESS OF ROTBYT
	LD DE,(Z.)		;BYTE OFFSET
	LD D,0			;MAKE INTO WORD
	ADD HL,DE		;GET ROTBYT OFFSET
	LD BC,(PICVAL)		;LOAD INTO C THIS-BYTE
	LD B,(HL)		;LOAD INTO B LAST-BYTE
	LD E,0			;LOAD INTO E WHAT WILL BE ROTBYT NEXT TIME
RLOOP:
	RR B			;ROTATE LAST-BYTE INTO CF
	RR C			;ROTATE CF INTO THIS-BYTE AND THIS-BYTE TO CF
	RR E			;ROT CF INTO NEXT-BYTE
	DEC A			;CHECK FOR LOOP
	JP NZ,RLOOP

	LD A,(XSHI)
	INC A
RL2:	RL E
	DEC A
	JP NZ,RL2

	LD A,C			;RETURN NEW PICVAL
	LD (PICVAL),A
	LD A,E			;RE-LOAD ROTBYT OFFSET FOR NEXT TIME
	LD (HL),A
	
	LD HL,ROTCOL		;COLOR BUFF
	LD DE,(Z.)		;
	LD D,0			;MAKE A WORD
	ADD HL,DE		;GET OFFSET
	LD A,(HL)		;LAST VALUE
	LD (T8),A		;SAVE TEMPORARILY
	LD BC,(PCOVAL)		;THIS TIME'S
	LD (HL),C		;SAVE IT FOR NEXT TIME
	IF8. (PCOVAL),.EQ.,0	;IF THIS COLOR IS TRANSPARENT
		LD A,(T8)	;USE PREVIOUS COLOR
		LD (PCOVAL),A	;
		LD (HL),A	;
	ENDIF.
	IF8. (X),.EQ.,(XDIM)	;EXTRA PIECE OF LAST PICTURE PATTERN
		LD A,(T8)	;COLOR MUST BE PREVIOUS COLOR
		LD (PCOVAL),A	;
	ENDIF.

	RET	;END FO DOXSHI

ZOTTSE::
;	ERASE TREASURE OR TREASURE VALUE
;(TSEX)=X POSITION OF TREASURE
;(TSEY)=Y POSITION OF TREASURE
;(TSEDX)=X DIMENSION
;(TSEDY)=Y DIMENSION
;(ZOTX)=X POSITION OF SCORE VALUE
;(ZOTY)=Y POSITION OF SCORE VALUE
;(ZOTDX)=X DIMENSION
;(ZOTDY)=Y DIMENSION
	JP SZOT
	ZOTX::	DB	0	;X COORD FOR ZOTTING TREASURE (ZOTFLG=1)
	ZOTY::	DB	0	;Y COORD FOR ZOTTING TREASURE (ZOTFLG=1)
	ZOTDX::	DB	0	;X DIMENSION FOR ZOTTING TREASURE (ZOTFLG=1)
	ZOTDY::	DB	0	;Y DIMENISON FOR ZOTTING TREASURE (ZOTFLG=1)

	VALX::	DB	0	;X COORD FOR DISPLAYING VALUE (TSEFLG=1)
	VALY::	DB	0	;Y COORD FOR DISPLAYING VALUE (TSEFLG=1)
	VALDX::	DB	0	;X DIM FOR DISPLAYING VALUE (TSEFLG=1)
	VALDY::	DB	0	;Y DIM FOR DISPLAYING VALUE (TSEFLG=1)

	TSEX::	DB	0	;TREASURE X
	TSEY::	DB	0	;TREASURE Y
	TSEDX::	DB	0	;TSE X DIMENSION
	TSEDY::	DB	0	;TSE Y DIM

	NUMBER::	DW	0	;POINTER TO NUMBER

	ADD.T::		DW	0	;TSE ZOT ADDRESS
	ADD.TV::	DW	0	;TSE VALUE ZOT ADDRESS
	ADD.X::		DW	0	;WORKING ADDRESS

SZOT:
	IF8. (ZOTFLG),.EQ.,1	;ZOT TO DO

	  LD A,(TSEX)		;X COORD	
	  AND 0F8H		;ROUND OFF TO NEAREST PATTERN
	  LD L,A		;PUT IN LOW OF HL

	  LD A,(TSEY)		;Y COORD
	  AND 007H		;GET DIFFERENCE FROM NEAREST PATTERN
	  LD C,A		;PUT IN C
	  LD (YSHI),A		;SAVE IN (YSHI)
	  LD A,8		;GET DIFFERENCE TO 8
	  SUB C			;  TO GET LENGTH
	  LD (XSHI),A		;SAVE IN (XSHI)	  

	  LD A,(TSEY)		;Y COORD AGAIN
	  SRL A			;DIVIDE BY 8
	  SRL A
	  SRL A
	  LD H,A		;MULT X 256 AND ADD TO X IN HL
;	  LD BC,(COLADD)	;COLOR TABLE BASE
;	  ADD HL,BC		;ADD TO OFFSET
	  LD (ADD.T),HL		;SAVE IN (ADD.T)
	  
	  IF8. (YSHI),.GT.,0		;WE HAVE A Y-SHIFT
	    SUB8. (TSEDY),1		;ONE IS BEING TAKEN CARE OF IN SHIFTS
	    ASIGN8. (I),(TSEDX)		;X DIMENSION
	    LD HL,(ADD.T)		;START WITH PATTERN BASE
	    LD BC,(YSHI)		; AND ADD Y SHIFT
	    LD B,0
	    ADD HL,BC			;
	    LD (ADD.X),HL		;AND PUT IN (ADD.X)	    
	    ADD16. (ADD.T),256		;AIM AT NEXT PATTERN DOWN

	    WHILE8. (I),.GT.,0		;FOR EACH X DIM
		LD BC,(XSHI)	;LENGTH
		LD B,0		;ZERO OUT
		LD E,0		;TRANSPARENT/TRANSPARENT
		LD HL,(ADD.X)	;ADDRESS
		CALL VFILL	;DO THE VRAM FILL
		ADD16. (ADD.X),8	;MOVE 1 PATTERN RIGHT
		SUB8. (I),1		;DECREMENT COUNTER
	    ENDW.	;I>0

	  ENDIF.	;YSHI>0

	  ASIGN8. (J),(TSEDY)		;Y DIMENSION
	  PCALL MUL88,(TSEDX),8		;8 FOR EACH PATTERN ALONG X
	  LD A,C			;PUT IN A
	  LD (XSHI),A			;SAVE IN (XSHI)
	  WHILE8. (J),.GT.,0		;FOR EACH Y DIM
	    LD BC,(XSHI)	;LENGTH
	    LD B,0		;ZERO OUT
	    LD E,0		;TRANSPARENT/TRANSPARENT
	    LD HL,(ADD.T)	;ADDRESS
	    CALL VFILL	;DO THE VRAM FILL
	    ADD16. (ADD.T),256			;NEXT Y DOWN
	    SUB8. (J),1				;DEC COUNTER
	  ENDW.

	  IF8. (YSHI),.GT.,0		;WE HAVE A Y-SHIFT
	    ASIGN8. (I),(TSEDX)		;X DIMENSION
	    LD HL,(ADD.T)		;START WITH PATTERN BASE
	    LD (ADD.X),HL		;AND PUT IN (ADD.X)	    
	    LD A,(YSHI)			;NEW LENGHT = (YSHI) + 1
	    INC A			;
	    LD (XSHI),A			;PUT IN (XSHI)

	    WHILE8. (I),.GT.,0		;FOR EACH X DIM
		LD BC,(XSHI)	;LENGTH
		LD B,0		;ZERO OUT
		LD E,0		;TRANSPARENT/TRANSPARENT
		LD HL,(ADD.X)	;ADDRESS
		CALL VFILL	;DO THE VRAM FILL
		ADD16. (ADD.X),8	;MOVE 1 PATTERN RIGHT
		SUB8. (I),1		;DECREMENT COUNTER
	    ENDW.	;I>0

	  ENDIF.	;YSHI>0

	  ASIGN8. (ZOTFLG),0		;RESET FLAG

	ENDIF.	;ZOTFLG=1

	IF8. (ZOVAFG),.EQ.,1	;ZOT TO DO

	  LD A,(ZOTX)		;X COORD	
	  AND 0F8H		;ROUND OFF TO NEAREST PATTERN
	  LD L,A		;PUT IN LOW OF HL

	  LD A,(ZOTY)		;Y COORD
	  AND 007H		;GET DIFFERENCE FROM NEAREST PATTERN
	  LD C,A		;PUT IN C
	  LD (YSHI),A		;SAVE IN (YSHI)
	  LD A,8		;GET DIFFERENCE TO 8
	  SUB C			;  TO GET LENGTH
	  LD (XSHI),A		;SAVE IN (XSHI)	  

	  LD A,(ZOTY)		;Y COORD AGAIN
	  SRL A			;DIVIDE BY 8
	  SRL A
	  SRL A
	  LD H,A		;MULT X 256 AND ADD TO X IN HL
;	  LD BC,(COLADD)	;COLOR TABLE BASE
;	  ADD HL,BC		;ADD TO OFFSET
	  LD (ADD.T),HL		;SAVE IN (ADD.T)
	  
	  IF8. (YSHI),.GT.,0		;WE HAVE A Y-SHIFT
	    SUB8. (ZOTDY),1		;SHIFTS TAKE CARE OF 1
	    ASIGN8. (I),(ZOTDX)		;X DIMENSION
	    LD HL,(ADD.T)		;START WITH PATTERN BASE
	    LD BC,(YSHI)		; AND ADD Y SHIFT
	    LD B,0
	    ADD HL,BC			;
	    LD (ADD.X),HL		;AND PUT IN (ADD.X)	    
	    ADD16. (ADD.T),256		;AIM AT NEXT PATTERN DOWN

	    WHILE8. (I),.GT.,0		;FOR EACH X DIM
	        LD BC,(XSHI)	;LENGTH
	        LD B,0		;ZERO OUT
	        LD E,0		;TRANSPARENT/TRANSPARENT
	        LD HL,(ADD.X)	;ADDRESS
	        CALL VFILL	;DO THE VRAM FILL
		ADD16. (ADD.X),8	;MOVE 1 PATTERN RIGHT
		SUB8. (I),1		;DECREMENT COUNTER
	    ENDW.
	  ENDIF.

	  ASIGN8. (J),(ZOTDY)		;Y DIMENSION
	  PCALL MUL88,(ZOTDX),8		;8 FOR EACH PATTERN ALONG X
	  LD A,C			;PUT IN A
	  LD (XSHI),A			;SAVE IN (XSHI)
	  WHILE8. (J),.GT.,0		;FOR EACH Y DIM
	    LD BC,(XSHI)	;LENGTH
	    LD B,0		;ZERO OUT
	    LD E,0		;TRANSPARENT/TRANSPARENT
	    LD HL,(ADD.T)	;ADDRESS
	    CALL VFILL	;DO THE VRAM FILL
	    ADD16. (ADD.T),256			;NEXT Y DOWN
	    SUB8. (J),1				;DEC COUNTER
	  ENDW.

	  IF8. (YSHI),.GT.,0		;WE HAVE A Y-SHIFT
	    ASIGN8. (I),(ZOTDX)		;X DIMENSION
	    LD HL,(ADD.T)		;START WITH PATTERN BASE
	    LD (ADD.X),HL		;AND PUT IN (ADD.X)	    
	    LD A,(YSHI)			;NEW LENGHT = (YSHI) + 1
	    INC A			;
	    LD (XSHI),A			;PUT IN (XSHI)

	    WHILE8. (I),.GT.,0		;FOR EACH X DIM
		LD BC,(XSHI)	;LENGTH
		LD B,0		;ZERO OUT
		LD E,0		;TRANSPARENT/TRANSPARENT
		LD HL,(ADD.X)	;ADDRESS
		CALL VFILL	;DO THE VRAM FILL
		ADD16. (ADD.X),8	;MOVE 1 PATTERN RIGHT
		SUB8. (I),1		;DECREMENT COUNTER
	    ENDW.	;I>0

	  ENDIF.	;YSHI>0

	  ASIGN8. (ZOVAFG),0	;RESET FLAG

	ENDIF.	;ZOVAFG=1

	RET	;END OF ZOTTSE

SCORUP::
;	PUT UP SCORE VALUE OF TREASURE AS IT IS CLAIMED
;	VALX AND VALY ARE PRESET FROM MONTSK WHICH SETS TSEFLG

	IF8. (TSEFLG),.EQ.,0	;NO SCORE TO PUT UP
		JP XSCUP	;EXIT
	ENDIF.
	IF8. (ZOTFLG),.EQ.,1	;WE HAVE NOT ERASED TREASURE YET
;		JP XSCUP	;EXIT
		CALL ZOTTSE	;FORCE THE ERASE
	ENDIF.
	LD HL,VALTAB
	PUSH HL
	POP IX
	LD A,(IX+2)
	LD (VALDX),A
	LD A,1
	LD (VALDY),A
	LD C,(IX+4)
	LD B,(IX+5)
	LD (NUMBER),BC
	PCALL DOPIC,(VALX),(VALY),(NUMBER)

	LD HL,(VALTAB)
	LD (NUMBER),HL
	PCALL ADSCOR,(NUMBER)
	ASIGN8. (TSEFLG),0	;RESET FLAG	
XSCUP:
 	RET	;END OF SCORUP

CLAIM::
;CCATY=Y POSITION OF CATWALK PIECE
;CCATX=X POSITION OF CATWALK PIECE

	IF8. (CLAFLG),.EQ.,0	;NO CLAIM
		JP XCLAIM	;EXIT
	ENDIF.
	PCALL DOPIC,(CCATX),(CCATY),XXCAT
	PCALL ADSCOR,5				;ADD 5 TO SCORE
	SUB8. (CATCNT),1			;KEEP DECREASING (CATCNT)
	IF8. (CATCNT),.LT.,1			;IF ZERO
		ASIGN8. (INIT_SCR),1		;  SET FLAG
	ENDIF.
	ASIGN8. (CLAFLG),0		;RESET CLAIM FLAG
XCLAIM:

	RET	;END OF CLAIM

XXCAT:		DB	1,1
		DW	XXCATC
		DB	0FCH,0FCH,0FCH,0FCH,0FCH,0FCH,000H,000H
XXCATC:		DB	0B0H,0B0H,0B0H,0B0H,0B0H,0B0H,000H,000H

;--------------------- PICTURES --------------------------------
BLK::	DB	3,1
	DW	BLKC
BLKC:	DB	0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0
CATL::	DB	1,1
	DW	CATLC
	DB      0FCH,0FCH,000H,0FCH,000H,0FCH,000H,000H
CATR::	DB	1,1
	DW	CATRC
	DB      0FCH,000H,0FCH,000H,0FCH,000H,000H,000H
CATP::	DB	2,1
	DW	CATPC
	DB      0FFH,0FCH,003H,0FCH,003H,0FCH,000H,000H
	DB      0F0H,000H,0F0H,000H,0F0H,000H,000H,000H
LADL::	DB	2,1
	DW	LADLC
	DB      0C0H,0C0H,0C0H,0FFH,0C0H,0C0H,0C0H,0FFH
	DB      0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H
LADR::	DB	1,1
	DW	LADRC
	DB      0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H
SLID::	DB	2,1
	DW	SLIDC
	DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
	DB	0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H
SLIR::	DB	3,1
	DW	SLIRC
	DB      0FFH,03FH,01FH,007H,001H,000H,000H,000H
 	DB      0F0H,0FCH,0FEH,0FFH,0FFH,000H,000H,000H
 	DB      000H,000H,000H,080H,0E0H,000H,000H,000H
SLIL::	DB	3,1
	DW	SLILC	
	DB      000H,000H,000H,001H,007H,00FH,000H,000H
	DB      00FH,03FH,07FH,0FFH,0FFH,0FFH,000H,000H
	DB      0FFH,0FCH,0F8H,0E0H,080H,000H,000H,000H
AX::	DB	2,2
	DW	AXC 	
	DB  	000H,000H,00EH,01FH,01FH,01FH,00EH,00EH
     	DB      010H,038H,07CH,0FEH,0FEH,0FEH,07CH,078H
     	DB      00EH,00EH,00EH,00EH,00EH,00EH,00EH,00EH
     	DB      000H,000H,000H,000H,000H,000H,000H,000H
PLAT::	DB	1,1
	DW	PLATC
	DB	000H,000H,000H,000H,000H,000H,0FFH,0FFH
CUP::	DB	2,1
	DW	CUPC
	DB      03FH,03FH,03FH,03FH,03FH,01EH,000H,000H
 	DB      040H,0A0H,020H,020H,0C0H,000H,000H,000H
CANT::	DB	1,1
	DW	CANTC	
	DB      07EH,0FFH,0FFH,0FFH,07EH,000H,000H,000H
SHOV::	DB	1,3
	DW	SHOVC	
	DB      000H,000H,000H,000H,07CH,044H,044H,028H
 	DB      010H,010H,010H,010H,010H,010H,010H,010H
 	DB      0D6H,0FEH,0FEH,07CH,038H,010H,000H,000H
TR2::	DB	3,1
	DW	TR2C	
	DB      000H,007H,007H,000H,000H,000H,000H,000H
	DB      0FFH,0FFH,0FFH,0FFH,000H,000H,000H,000H
	DB      000H,0E0H,0E0H,000H,000H,000H,000H,000H
JUG::	DB	1,2
	DW	JUGC	
	DB      000H,000H,000H,038H,038H,0FEH,0FEH,0FEH
	DB      0FEH,0FEH,0FEH,0FEH,0FEH,000H,000H,000H
OLAM::	DB	2,1
	DW	OLAMC	
	DB      001H,007H,01CH,0FFH,0FFH,07FH,000H,000H
	DB      0C0H,000H,000H,0F0H,0F0H,0E0H,000H,000H
OLAMC:	
	DB	060H,060H,060H,070H,070H,070H,000H,000H
	DB	060H,000H,000H,070H,070H,070H,000H,000H
PLI::	DB	1,2
	DW	PLIC	
	DB      044H,044H,082H,082H,06CH,038H,044H,082H
	DB      082H,082H,082H,082H,000H,000H,000H,000H
PLIC:	
	DB	0D0H,0D0H,0D0H,0D0H,0D0H,0D0H,0D0H,0D0H
	DB	0D0H,0D0H,0D0H,0D0H,000H,000H,000H,000H
PIC::	DB	3,2
	DW	PICC	
	DB      000H,000H,003H,006H,008H,000H,000H,000H
	DB      018H,0FFH,0FFH,018H,018H,018H,018H,018H
	DB      000H,000H,0C0H,060H,010H,000H,000H,000H
	DB      000H,000H,000H,000H,000H,000H,000H,000H
	DB      018H,018H,018H,018H,018H,018H,018H,018H
	DB      000H,000H,000H,000H,000H,000H,000H,000H
PICC:	
	DB	000H,000H,0E0H,0E0H,0E0H,000H,000H,000H
	DB	060H,0E0H,0E0H,060H,060H,060H,060H,060H
	DB	000H,000H,0E0H,0E0H,0E0H,000H,000H,000H
	DB      000H,000H,000H,000H,000H,000H,000H,000H
	DB	060H,060H,060H,060H,060H,060H,060H,060H
	DB      000H,000H,000H,000H,000H,000H,000H,000H
CAN::	DB	2,1
	DW	CANC	
	DB      000H,000H,000H,000H,020H,050H,048H,03FH
	DB      040H,080H,080H,080H,080H,080H,080H,0F8H
CANC:	
	DB	000H,000H,000H,000H,0E0H,0E0H,0E0H,0E0H
	DÂ	0F0H,0B0H,0B0H,0B0H,0B0H,0B0H,0E0H,0E0H
BUR::	DB	2,1
	DW	BURC	
	DB      03FH,0FFH,03FH,03FH,0FFH,03FH,000H,000H
	DB      0C0H,0F0H,0C0H,0C0H,0F0H,0C0H,000H,000H
BURC:	
	DB	090H,090H,060H,060H,090H,090H,000H,000H
	DB	090H,090H,060H,060H,090H,090H,000H,000H
FUN::	DB	2,2
	DW	FUNC	
	DB      0FFH,03FH,01FH,00FH,006H,006H,006H,007H
	DB      0F0H,0C0H,080H,000H,000H,000H,000H,0C0H
	DB      006H,006H,006H,006H,006H,006H,000H,000H
	DB      000H,000H,000H,000H,000H,000H,000H,000H
FUNC:	
	DB	0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
	DB	0E0H,0E0H,0E0H,000H,000H,000H,000H,0E0H
	DB	0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,000H,000H
	DB      000H,000H,000H,000H,000H,000H,000H,000H
TRR::	DB	3,5
	DW	TRRC	
	DB      01FH,01FH,018H,018H,018H,018H,018H,018H
	DB      0FFH,0FFH,000H,000H,000H,000H,000H,000H
	DB      0F8H,0F8H,018H,018H,018H,018H,018H,018H
	DB      018H,018H,018H,01FH,0FFH,0FFH,0E0H,0E0H
	DB      000H,000H,000H,0FFH,0FFH,0FFH,000H,000H
	DB      018H,018H,018H,0F8H,0FFH,0FFH,007H,007H
	DB      0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
	DB      000H,000H,000H,000H,000H,000H,000H,000H
	DB      007H,007H,007H,007H,007H,007H,007H,007H
	DB      0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
	DB      000H,000H,000H,000H,000H,000H,000H,000H
	DB      007H,007H,007H,007H,007H,007H,007H,007H
	DB      0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
	DB      000H,000H,000H,000H,000H,000H,000H,000H
	DB      007H,007H,007H,007H,007H,007H,007H,007H

TRRC:	
	DB	0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H
	DB	0C0H,0C0H,000H,000H,000H,000H,000H,000H
	DB	0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H
	DB	0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H
	DB	000H,000H,000H,0C0H,0C0H,0C0H,000H,000H
	DB	0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H
	DB	0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H
	DB      000H,000H,000H,000H,000H,000H,000H,000H
	DB	0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H
	DB	0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H
	DB      000H,000H,000H,000H,000H,000H,000H,000H
	DB	0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H
	DB	0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H
	DB      000H,000H,000H,000H,000H,000H,000H,000H
	DB	0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H
TONE::	DB	1,1
	DW	TRRC	
	DB      000H,038H,0F8H,038H,038H,038H,0FFH,000H
TTWO::	DB	1,1
	DW	TRRC	
	DB      000H,07EH,0E7H,00EH,038H,0E0H,0FFH,000H
TTRE::	DB	1,1
	DW	TRRC	
	DB      000H,0FFH,00EH,01CH,00EH,0E7H,07EH,000H
TFOR::	DB	1,1
	DW	TRRC	
	DB      000H,00EH,01EH,02EH,04EH,0FFH,00EH,000H
TRK::	DB	1,1
	DW	TRKC
	DB 	000H,000H,000H,000H,000H,0FCH,0FCH,0E0H
TRKC:   DB	000H,000H,000H,000H,000H,040H,040H,040H
TRKE::	DB	1,1
	DW	TRKEC
	DB 	000H,000H,000H,000H,000H,0E0H,0E0H,0E0H
TRKEC:  DB	000H,000H,000H,000H,000H,040H,040H,040H
DET::	DB	2,2
	DW	DETC	
	DB      03FH,004H,004H,024H,024H,0FFH,0FFH,0FFH
	DB      080H,000H,000H,080H,080H,0E0H,0E0H,0E0H
	DB      0FFH,0FFH,0FFH,0FFH,000H,000H,000H,000H
	DB      0E0H,0E0H,0E0H,0E0H,000H,000H,000H,000H
DETC:	
	DB	060H,040H,040H,040H,040H,080H,080H,080H
	DB	060H,000H,000H,040H,040H,080H,080H,080H
	DB	080H,080H,080H,080H,000H,000H,000H,000H
	DB	080H,080H,080H,080H,000H,000H,000H,000H
ANV::	DB	2,2
	DW	ANVC	
	DB      0FFH,0FFH,0FFH,0FFH,0EFH,00FH,00FH,00FH
	DB      0FFH,0FCH,0F0H,000H,000H,000H,000H,000H
	DB      03FH,0FFH,000H,000H,000H,000H,000H,000H
	DB      0FCH,0FFH,000H,000H,000H,000H,000H,000H
ANVC:	DB	040H,040H,040H,040H,040H,040H,040H,040H
	DB	040H,040H,040H,000H,000H,000H,000H,000H
	DB	040H,040H,000H,000H,000H,000H,000H,000H
	DB	040H,040H,000H,000H,000H,000H,000H,000H
JACK::	DB	2,2
	DW	JACKC	
	DB      03FH,0D9H,021H,007H,007H,007H,007H,007H
	DB      0F8H,036H,008H,0C0H,0C0H,0C0H,0C0H,0C0H
	DB      001H,001H,001H,001H,001H,000H,000H,000H
	DB      000H,000H,000H,000H,000H,000H,000H,000H
JACKC:	DB	060H,060H,060H,040H,040H,040H,040H,040H
	DB	060H,060H,060H,040H,040H,040H,040H,040H
	DB	0E0H,0E0H,0E0H,0E0H,0E0H,000H,000H,000H
	DB	000H,000H,000H,000H,000H,000H,000H,000H
GOG::	DB	2,1
	DW	GOGC	
	DB      07FH,08EH,08EH,071H,000H,000H,000H,000H
	DB      0C0H,020H,020H,0C0H,000H,000H,000H,000H
GOGC:	DB	070H,070H,070H,070H,000H,000H,000H,000H
	DB	070H,070H,070H,070H,000H,000H,000H,000H
IRON::	DB	2,1
	DW	IRONC	
	DB      03FH,040H,040H,021H,0FFH,0FFH,000H,000H
	DB      000H,080H,080H,000H,0F0H,0F8H,000H,000H
IRONC:	DB	060H,060H,060H,060H,0E0H,0E0H,000H,000H
	DB	000H,060H,060H,000H,0E0H,0E0H,000H,000H
CAKE::	DB	2,2
	DW	CAKEC	
	DB      006H,006H,026H,026H,0FFH,0FFH,0FFH,0FFH
	DB      000H,000H,040H,040H,0F0H,0F0H,0F0H,0F0H
	DB      0FFH,0FFH,0FFH,0FFH,000H,000H,000H,000H
	DB      0F0H,0F0H,0F0H,0F0H,000H,000H,000H,000H
CAKEC:	DB	050H,050H,050H,050H,080H,080H,070H,080H
	DB	050H,050H,050H,050H,080H,080H,070H,080H
	DB	080H,070H,080H,080H,000H,000H,000H,000H
	DB	080H,070H,080H,080H,000H,000H,000H,000H
FLO::	DB	2,2
	DW	FLOC	
	DB      030H,030H,0FCH,0ECH,038H,036H,001H,001H
	DB      030H,030H,0FCH,0DCH,070H,0B0H,000H,000H
	DB      00FH,00FH,007H,007H,007H,000H,000H,000H
	DB      0E0H,0E0H,0C0H,0C0H,0C0H,000H,000H,000H
FLOC:	DB	070H,070H,070H,070H,070H,070H,0C0H,0C0H
	DB	070H,070H,070H,070H,070H,070H,0C0H,0C0H
	DB	060H,060H,060H,060H,060H,000H,000H,000H
	DB	060H,060H,060H,060H,060H,000H,000H,000H
JOY::	DB	2,1
	DW	JOYC	
	DB      008H,008H,008H,008H,048H,0FFH,0FFH,0FFH
	DB      000H,020H,020H,040H,020H,020H,0C0H,000H
JOYC:	DB	0F0H,0F0H,0F0H,0F0H,0F0H,030H,030H,030H
	DB	000H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,000H
DOL::	DB	2,2
	DW	DOLC	
	DB      0FFH,0FEH,0F8H,0F2H,0F2H,0F8H,0FEH,0F2H
	DB      0FFH,07FH,01FH,04FH,07FH,01FH,04FH,04FH
	DB      0F8H,0FEH,0FFH,000H,000H,000H,000H,000H
	DB      01FH,07FH,0FFH,000H,000H,000H,000H,000H
DOLC:	DB	0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H
	DB	0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H
	DB	0C0H,0C0H,0C0H,000H,000H,000H,000H,000H
	DB	0C0H,0C0H,0C0H,000H,000H,000H,000H,000H
;----------------------- COLORS ---------------------------------
CATLC:	DB	0B0H,0B0H,000H,0B0H,000H,0B0H,000H,000H
CATRC:	DB	0B0H,000H,0B0H,000H,0B0H,000H,000H,000H
CATPC:	DB	0B0H,0B0H,0B0H,0B0H,0B0H,0B0H,000H,000H
	DB	0B0H,000H,0B0H,000H,0B0H,000H,000H,000H
LADLC:	DB      060H,060H,060H,060H,060H,060H,060H,060H
LADRC:	DB      060H,060H,060H,060H,060H,060H,060H,060H
SLIDC:	DB	050H,050H,050H,050H,050H,050H,050H,050H
	DB	050H,050H,050H,050H,050H,050H,050H,050H
SLIRC:	DB	050H,050H,050H,050H,050H,000H,000H,000H
	DB	050H,050H,050H,050H,050H,000H,000H,000H
	DB	000H,000H,000H,050H,050H,000H,000H,000H
SLILC:	DB	000H,000H,000H,050H,050H,050H,000H,000H
	DB	050H,050H,050H,050H,050H,050H,000H,000H
	DB	050H,050H,050H,050H,050H,000H,000H,000H
AXC:	DB  	000H,000H,0C0H,0E0H,0E0H,0E0H,0C0H,0C0H
	DB	0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
	DB	0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H
     	DB      000H,000H,000H,000H,000H,000H,000H,000H
TAXC:	DB  	046H,046H,046H,046H,046H,046H,046H,046H
	DB	046H,046H,046H,046H,046H,046H,046H,046H
	DB	046H,046H,046H,046H,046H,046H,046H,046H
     	DB      046H,046H,046H,046H,046H,046H,046H,046H
PLATC:	DB	000H,000H,000H,000H,000H,000H,0A0H,0A0H
CUPC:	DB	030H,040H,030H,030H,040H,030H,000H,000H
	DB	030H,030H,030H,030H,030H,000H,000H,000H	
CANTC:	DB	040H,040H,060H,030H,030H,000H,000H,000H
SHOVC:	DB	000H,000H,000H,000H,040H,040H,040H,040H
	DB	030H,030H,030H,030H,030H,030H,030H,030H
	DB	030H,030H,030H,030H,030H,030H,000H,000H
TR2C:	DB	000H,060H,060H,000H,000H,000H,000H,000H
	DB	080H,080H,080H,080H,000H,000H,000H,000H
	DB	000H,060H,060H,000H,000H,000H,000H,000H
JUGC:	DB	000H,000H,000H,040H,040H,040H,040H,040H
	DB	030H,030H,030H,030H,030H,000H,000H,000H
;IN BETWEEN MESSAGE:
;		MINER __
;	      PREPARE FOR
;	       STATION __
;		ZONE __

JMINER::
           DB 078H
 DB 000H,000H,0FCH,0FEH,0FEH,08EH,08EH,08EH,08EH
 DB 001H,08EH,08EH,08EH,08EH,08EH,08EH,08EH,08EH
 DB 002H,000H,038H,038H,038H,038H,038H,038H,038H
 DB 003H,038H,038H,038H,038H,038H,038H,038H,038H
 DB 004H,000H,0FFH,0FFH,0FFH,0E3H,0E3H,0E3H,0E3H
 DB 005H,0E3H,0E3H,0E3H,0E3H,0E3H,0E3H,0E3H,0E3H
 DB 006H,000H,00FH,08FH,08FH,08EH,08EH,08EH,08FH
 DB 007H,08FH,08FH,08EH,08EH,08EH,08FH,08FH,08FH
 DB 008H,000H,0F0H,0F8H,0F8H,038H,000H,000H,0C0H
 DB 009H,0C0H,0C0H,000H,000H,038H,0F8H,0F8H,0F8H
 DB 00AH,000H,0FFH,0FFH,0FFH,0E3H,0E3H,0E3H,0FFH
 DB 00BH,0FFH,0FFH,0E1H,0E1H,0E1H,0E1H,0E1H,0E1H
 DB 00CH,000H,000H,080H,080H,080H,080H,080H,080H
 DB 00DH,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H,0C0H
 DB 00EH,000H,0FFH,0FFH,0FFH,0E3H,0E3H,0E3H,0FFH
 DB 00FH,0FFH,0FFH,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
 DB 010H,000H,00FH,08FH,08FH,08EH,08EH,08EH,08FH
 DB 011H,08FH,00FH,00EH,00EH,00EH,00EH,00EH,00EH
 DB 012H,000H,0F0H,0F8H,0F8H,038H,038H,038H,0F8H
 DB 013H,0FCH,0FCH,01CH,01CH,01CH,01CH,01CH,01CH
 DB 014H,000H,07FH,07FH,07FH,071H,070H,070H,07EH
 DB 015H,07EH,07EH,070H,070H,071H,07FH,07FH,07FH
 DB 016H,000H,087H,0C7H,0C7H,0C7H,007H,007H,007H
 DB 017H,007H,007H,007H,007H,0C7H,0C7H,0C7H,087H
 DB 018H,000H,0F8H,0FCH,0FCH,01CH,01CH,01CH,0FCH
 DB 019H,0FCH,0F8H,000H,000H,000H,000H,000H,000H
 DB 01AH,000H,03FH,07FH,07FH,071H,071H,071H,07FH
 DB 01BH,07FH,07FH,071H,071H,071H,071H,071H,071H
 DB 01CH,000H,087H,0C7H,0C7H,0C7H,0C7H,0C7H,0C7H
 DB 01DH,0C7H,0C7H,0C7H,0C7H,0C7H,0C7H,0C7H,0C7H
 DB 01EH,000H,0F8H,0FCH,0FCH,01CH,01CH,01CH,0FCH
 DB 01FH,0FEH,0FEH,0FEH,00EH,00EH,00EH,00EH,00EH
 DB 020H,000H,03FH,03FH,03FH,038H,038H,038H,03FH
 DB 021H,03FH,03FH,038H,038H,038H,03FH,03FH,03FH
 DB 022H,000H,0C0H,0E0H,0E0H,0E0H,000H,000H,000H
 DB 023H,000H,000H,000H,000H,0E0H,0E0H,0E0H,0C0H
 DB 024H,000H,01FH,01FH,01FH,01CH,01CH,01CH,01FH
 DB 025H,01FH,01FH,01CH,01CH,01CH,01CH,01CH,01CH
 DB 026H,000H,0E0H,0F1H,0F1H,071H,001H,001H,081H
 DB 027H,081H,081H,001H,001H,001H,001H,001H,000H
 DB 028H,000H,0FEH,0FFH,0FFH,0C7H,0C7H,0C7H,0C7H
 DB 029H,0C7H,0C7H,0C7H,0C7H,0C7H,0FFH,0FFH,0FEH
 DB 02AH,000H,01FH,01FH,01FH,01CH,01CH,01CH,01FH
 DB 02BH,01FH,01FH,01CH,01CH,01CH,01CH,01CH,01CH
 DB 02CH,000H,0E0H,0F0H,0F0H,070H,070H,070H,0F0H
 DB 02DH,0F8H,0F8H,038H,038H,038H,038H,038H,038H
 DB 02EH,000H,07FH,0FFH,0FFH,0E3H,0E0H,0E0H,0FFH
 DB 02FH,0FFH,07FH,003H,003H,0E3H,0FFH,0FFH,07FH
 DB 030H,000H,00FH,08FH,08FH,080H,000H,000H,000H
 DB 031H,080H,080H,080H,080H,080H,080H,080H,000H
 DB 032H,000H,0FEH,0FEH,0FEH,0E0H,0E0H,0E0H,0E0H
 DB 033H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
 DB 034H,000H,01FH,03FH,03FH,038H,038H,038H,03FH
 DB 035H,03FH,03FH,038H,038H,038H,038H,038H,038H
 DB 036H,000H,0C3H,0E3H,0E3H,0E0H,0E0H,0E0H,0E0H
 DB 037H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
 DB 038H,000H,0FFH,0FFH,0FFH,038H,038H,038H,038H
 DB 039H,038H,038H,038H,038H,038H,038H,038H,038H
 DB 03AH,000H,08EH,08EH,08EH,00EH,00EH,00EH,00EH
 DB 03BH,00EH,00EH,00EH,00EH,00EH,00EH,00EH,00EH
 DB 03CH,000H,01FH,03FH,03FH,038H,038H,038H,038H
 DB 03DH,038H,038H,038H,038H,038H,03FH,03FH,01FH
 DB 03EH,000H,0C3H,0E3H,0E3H,0E3H,0E3H,0E3H,0E3H
 DB 03FH,0E3H,0E3H,0E3H,0E3H,0E3H,0E3H,0E3H,0C3H
 DB 040H,000H,0FCH,0FEH,0FEH,08EH,08EH,08EH,08EH
 DB 041H,08EH,08EH,08EH,08EH,08EH,08EH,08EH,08EH
 DB 042H,000H,0FFH,0FFH,0FFH,000H,000H,000H,07FH
 DB 043H,0FFH,0FFH,0E0H,0E0H,0E0H,0FFH,0FFH,0FFH
 DB 044H,000H,0E1H,0E3H,0E3H,0E3H,0E3H,0E3H,0E3H
 DB 045H,0C3H,083H,003H,003H,003H,0E3H,0E3H,0E1H
 DB 046H,000H,0FCH,0FEH,0FEH,08EH,08EH,08EH,08EH
 DB 047H,08EH,08EH,08EH,08EH,08EH,0FEH,0FEH,0FCH
 DB 048H,000H,03FH,03FH,03FH,038H,038H,038H,038H
 DB 049H,038H,038H,038H,038H,038H,038H,038H,038H
 DB 04AH,000H,0C3H,0E3H,0E3H,0E3H,0E3H,0E3H,0E3H
 DB 04BH,0E3H,0E3H,0E3H,0E3H,0E3H,0E3H,0E3H,0E3H
 DB 04CH,000H,0FCH,0FEH,0FEH,08EH,080H,080H,0F0H
 DB 04DH,0F0H,0F0H,080H,080H,08EH,0FEH,0FEH,0FCH
 DB 04EH,07FH,0FFH,0FFH,0E0H,0E0H,0E0H,0E0H,0E0H
 DB 04FH,0E0H,0E0H,0E0H,0E0H,0E0H,0FFH,0FFH,07FH
 DB 050H,0E0H,0F0H,0F0H,070H,070H,070H,070H,070H
 DB 051H,070H,070H,070H,070H,070H,0F0H,0F0H,0E0H
 DB 052H,01EH,01FH,01FH,007H,007H,007H,007H,007H
 DB 053H,007H,007H,007H,007H,007H,07FH,07FH,07FH
 DB 054H,000H,000H,000H,000H,000H,000H,000H,000H
 DB 055H,000H,000H,000H,000H,000H,0F0H,0F0H,0F0H
 DB 056H,07FH,0FFH,0FFH,0E0H,000H,000H,000H,07FH
 DB 057H,0FFH,0FFH,0E0H,0E0H,0E0H,0FFH,0FFH,0FFH
 DB 058H,0E0H,0F0H,0F0H,070H,070H,070H,070H,0F0H
 DB 059H,0F0H,0E0H,000H,000H,000H,0F0H,0F0H,0F0H
 DB 05AH,03FH,07FH,07FH,070H,000H,000H,003H,003H
 DB 05BH,003H,000H,000H,000H,0E0H,0FFH,0FFH,07FH
 DB 05CH,0E0H,0F0H,0F0H,070H,070H,070H,0F0H,0E0H
 DB 05DH,0F0H,070H,070H,070H,070H,0F0H,0F0H,0E0H
 DB 05EH,0E0H,0E0H,0E0H,0E3H,0E3H,0E3H,0FFH,0FFH
 DB 05FH,07FH,003H,003H,003H,003H,003H,003H,003H
 DB 060H,000H,000H,000H,080H,080H,080H,0F0H,0F0H
 DB 061H,0F0H,080H,080H,080H,080H,080H,080H,080H
 DB 062H,0FFH,0FFH,0FFH,0E0H,0E0H,0E0H,0FFH,0FFH
 DB 063H,0FFH,000H,000H,000H,0E0H,0FFH,0FFH,07FH
 DB 064H,0F0H,0F0H,0F0H,000H,000H,000H,0E0H,0F0H
 DB 065H,0F0H,070H,070H,070H,070H,0F0H,0F0H,0E0H
 DB 066H,07FH,0FFH,0FFH,0E0H,0E0H,0E0H,0FFH,0FFH
 DB 067H,0FFH,0E0H,0E0H,0E0H,0E0H,0FFH,0FFH,07FH
 DB 068H,0E0H,0F0H,0F0H,070H,000H,000H,0E0H,0F0H
 DB 069H,0F0H,070H,070H,070H,070H,0F0H,0F0H,0E0H
 DB 06AH,07FH,0FFH,0FFH,0E0H,000H,000H,000H,000H
 DB 06BH,000H,000H,000H,000H,000H,000H,000H,000H
 DB 06CH,0E0H,0F0H,0F0H,070H,070H,070H,070H,0E0H
 DB 06DH,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
 DB 06EH,07FH,0FFH,0FFH,0E0H,0E0H,0E0H,0FFH,07FH
 DB 06FH,0FFH,0E0H,0E0H,0E0H,0E0H,0FFH,0FFH,07FH
 DB 070H,0E0H,0F0H,0F0H,070H,070H,070H,0F0H,0E0H
 DB 071H,0F0H,070H,070H,070H,070H,0F0H,0F0H,0E0H
 DB 072H,07FH,0FFH,0FFH,0E0H,0E0H,0E0H,0E0H,0FFH
 DB 073H,0FFH,07FH,000H,000H,0E0H,0FFH,0FFH,07FH
 DB 074H,0E0H,0F0H,0F0H,070H,070H,070H,070H,0F0H
 DB 075H,0F0H,0F0H,070H,070H,070H,0F0H,0F0H,0E0H
 DB 076H,000H,0FEH,0FFH,0FFH,0E3H,0E3H,0E3H,0E3H
 DB 077H,0E3H,0E3H,0E3H,0E3H,0E3H,0E3H,0E3H,0E3H

MINRED:
	DB 004H
 DB 000H,060H,060H,060H,060H,060H,060H,060H,060H
 DB 001H,060H,060H,060H,060H,060H,060H,060H,060H
 DB 002H,060H,060H,060H,060H,060H,060H,060H,060H
 DB 003H,060H,060H,060H,060H,060H,060H,060H,060H
MINBLK:
	DB 004H
 DB 000H,010H,010H,010H,010H,010H,010H,010H,010H
 DB 001H,010H,010H,010H,010H,010H,010H,010H,010H
 DB 002H,010H,010H,010H,010H,010H,010H,010H,010H
 DB 003H,010H,010H,010H,010H,010H,010H,010H,010H

N80::	DB	2,1
	DW	NUMCOL
 DB      0FCH,0CCH,0FCH,0CCH,0FCH,000H,000H,000H	;	8
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
N90::	DB	2,1
	DW	NUMCOL
 DB      0FCH,0CCH,0FCH,00CH,00CH,000H,000H,000H	;	9
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
N100::	DB	3,1
	DW	NUMCOL
 DB      030H,030H,030H,030H,030H,000H,000H,000H	;	1
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
N200::	DB	3,1
	DW	NUMCOL
 DB      0FCH,00CH,0FCH,0C0H,0FCH,000H,000H,000H	;	2
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
N300::	DB	3,1
	DW	NUMCOL
 DB      0FCH,00CH,0FCH,00CH,0FCH,000H,000H,000H	;	3
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
N400::	DB	3,1
	DW	NUMCOL
 DB      0CCH,0CCH,0FCH,00CH,00CH,000H,000H,000H	;	4
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
N500::	DB	3,1
	DW	NUMCOL
 DB      0FCH,0C0H,0FCH,00CH,0FCH,000H,000H,000H	;	5
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
N600::	DB	3,1
	DW	NUMCOL
 DB      0FCH,0C0H,0FCH,0CCH,0FCH,000H,000H,000H	;	6
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
N700::	DB	3,1
	DW	NUMCOL
 DB      0FCH,00CH,00CH,00CH,00CH,000H,000H,000H	;	7
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
N1100::	DB	4,1
	DW	NUMCOL
 DB      030H,030H,030H,030H,030H,000H,000H,000H	;	1
 DB      030H,030H,030H,030H,030H,000H,000H,000H	;	1
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
NL100::	DB	2,1
	DW	NUMCOL
 DB      033H,032H,032H,032H,033H,000H,000H,000H	;SMALL 100
 DB      0DEH,0D6H,0D6H,0D6H,0DEH,000H,000H,000H
NL200::	DB	2,1
	DW	NUMCOL
 DB      0FBH,01AH,0FAH,0C2H,0FBH,000H,000H,000H	;SMALL 200
 DB      0DEH,0D6H,0D6H,0D6H,0DEH,000H,000H,000H
NL300::	DB	2,1
	DW	NUMCOL
 DB      0FBH,01AH,07AH,01AH,0FBH,000H,000H,000H	;SMALL 300
 DB      0DEH,0D6H,0D6H,0D6H,0DEH,000H,000H,000H

NUMCOL::
 DB	 0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H	; WHITE
 DB	 0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H	; WHITE
 DB	 0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H	; WHITE
 DB	 0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H	; WHITE

MONSTR::	
 DB 024H
 DB 0DCH,00EH,03EH,03FH,0C7H,0FCH,03BH,01FH,00FH	;MEAN LEFT 1
 DB 0DDH,071H,0E1H,000H,000H,000H,000H,000H,000H
 DB 0DEH,000H,000H,080H,080H,060H,0E0H,080H,000H
 DB 0DFH,0C0H,0C0H,000H,000H,000H,000H,000H,000H
 DB 0E0H,00EH,03EH,03FH,0C7H,0FCH,03BH,01FH,00FH	;MEAN LEFT 2
 DB 0E1H,038H,038H,000H,000H,000H,000H,000H,000H
 DB 0E2H,000H,000H,080H,080H,060H,0E0H,080H,000H
 DB 0E3H,0E0H,070H,000H,000H,000H,000H,000H,000H
 DB 0E4H,007H,007H,01FH,01EH,063H,07DH,01FH,00FH	;MEAN RIGHT 1
 DB 0E5H,038H,038H,000H,000H,000H,000H,000H,000H
 DB 0E6H,000H,0C0H,0C0H,030H,0F0H,0C0H,080H,000H
 DB 0E7H,0E0H,070H,000H,000H,000H,000H,000H,000H
 DB 0E8H,007H,007H,01FH,01EH,063H,07DH,01FH,00FH	;MEAN RIGHT 2
 DB 0E9H,071H,0E1H,000H,000H,000H,000H,000H,000H
 DB 0EAH,000H,0C0H,0C0H,030H,0F0H,0C0H,080H,000H
 DB 0EBH,0C0H,0C0H,000H,000H,000H,000H,000H,000H
 DB 0ECH,00EH,03FH,040H,07FH,04EH,060H,03FH,00EH	;GREEN 1
 DB 0EDH,00EH,071H,000H,000H,000H,000H,000H,000H
 DB 0EEH,000H,080H,040H,0C0H,040H,0C0H,080H,000H
 DB 0EFH,000H,0C0H,000H,000H,000H,000H,000H,000H
 DB 0F0H,00EH,03FH,040H,07FH,04EH,060H,03FH,00EH	;GREEN 2
 DB 0F1H,071H,0E0H,000H,000H,000H,000H,000H,000H
 DB 0F2H,000H,080H,040H,0C0H,040H,0C0H,080H,000H
 DB 0F3H,0C0H,0E0H,000H,000H,000H,000H,000H,000H
 DB 0F4H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H	;STICK BOB 3X16
 DB 0F5H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
 DB 0F6H,000H,000H,000H,000H,000H,000H,000H,000H
 DB 0F7H,000H,000H,000H,000H,000H,000H,000H,000H
 DB 0F8H,0FCH,0CCH,0FCH,0CCH,0FCH,000H,000H,000H	;80
 DB 0F9H,000H,000H,000H,000H,000H,000H,000H,000H
 DB 0FAH,0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H
 DB 0FBH,000H,000H,000H,000H,000H,000H,000H,000H
 DB 0FCH,0FCH,0CCH,0FCH,00CH,00CH,000H,000H,000H	;90
 DB 0FDH,000H,000H,000H,000H,000H,000H,000H,000H
 DB 0FEH,0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H
 DB 0FFH,000H,000H,000H,000H,000H,000H,000H,000H
WAT::	DB	3,1
	DW	WATC
	DB      00FH,00CH,030H,03FH,0FFH,0FFH,0FFH,03FH
	DB      0E0H,060H,018H,0F8H,0FFH,0FEH,0FEH,0F8H
	DB      000H,000H,060H,0C0H,080H,000H,000H,000H
WATC:	DB	0C0H,0C0H,0C0H,030H,030H,030H,030H,030H
	DB	0C0H,0C0H,0C0H,030H,030H,030H,030H,030H
	DB	000H,000H,0C0H,030H,030H,000H,000H,000H
CAND::	DB	2,2
	DW	CANDC	
	DB      040H,044H,044H,044H,0E4H,04EH,044H,044H
	DB      040H,040H,040H,040H,0E0H,040H,040H,040H
	DB      044H,03FH,00EH,004H,004H,004H,00EH,03FH
	DB      040H,080H,000H,000H,000H,000H,000H,080H
CANDC:	DB	0A0H,0A0H,0A0H,0A0H,020H,020H,020H,020H
	DB	0A0H,0A0H,0A0H,0A0H,020H,020H,020H,020H
	DB	020H,020H,020H,020H,020H,020H,020H,020H
	DB	020H,020H,020H,020H,020H,020H,020H,020H
HAM::	DB	2,2
	DW	HAMC	
	DB      01FH,03FH,066H,0C6H,006H,006H,006H,006H
	DB      0C0H,0C0H,040H,000H,000H,000H,000H,000H
	DB      006H,006H,006H,000H,000H,000H,000H,000H
	DB      000H,000H,000H,000H,000H,000H,000H,000H
HAMC:	DB	0E0H,0E0H,0E0H,0E0H,060H,060H,060H,060H
	DB	0E0H,0E0H,0E0H,000H,000H,000H,000H,000H
	DB	060H,060H,060H,000H,000H,000H,000H,000H
	DB	000H,000H,000H,000H,000H,000H,000H,000H
BF::	DB	2,2
	DW	BFC
	DB      0C7H,0C6H,0C7H,0C6H,0F7H,01FH,006H,006H
	DB      09EH,033H,0B3H,033H,09EH,0BEH,030H,03CH
	DB      066H,066H,03CH,0F9H,0DBH,0FBH,0C3H,0C3H
	DB      030H,030H,030H,0CFH,066H,0E6H,066H,066H
BFC:	DB	070H,070H,070H,070H,070H,080H,080H,080H
	DB	070H,070H,070H,070H,070H,080H,080H,080H
	DB	080H,080H,080H,0C0H,0C0H,0C0H,0C0H,0C0H
	DB	080H,080H,080H,0C0H,0C0H,0C0H,0C0H,0C0H
KEG1::	DB	1,1
	DW	KEG1C	
	DB      060H,0F0H,0F0H,0F0H,0F0H,0F0H,000H,000H
KEG1C:	DB	0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
KEG2::	DB	2,1
	DW	KEG2C	
	DB      061H,0F3H,0F3H,0F3H,0F3H,0F3H,000H,000H
	DB      080H,0C0H,0C0H,0C0H,0C0H,0C0H,000H,000H
KEG2C:	DB	0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
	DB	0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
KEG3::	DB	2,2
	DW	KEG3C	
	DB      00CH,01EH,01EH,01EH,01EH,01EH,000H,061H
	DB      000H,000H,000H,000H,000H,000H,000H,080H
	DB      0F3H,0F3H,0F3H,0F3H,0F3H,000H,000H,000H
	DB      0C0H,0C0H,0C0H,0C0H,0C0H,000H,000H,000H
KEG3C:	DB	0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
	DB	0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
	DB	0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
	DB	0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
MAR::	DB	2,2
	DW	MARC	
	DB 	0FFH,07FH,03EH,01CH,008H,008H,008H,008H
	DB 	080H,000H,000H,000H,000H,000H,000H,000H
	DB 	008H,01CH,07FH,000H,000H,000H,000H,000H
	DB 	000H,000H,000H,000H,000H,000H,000H,000H
MARC:	DB	0B0H,0B0H,0B0H,0B0H,0F0H,0F0H,0F0H,0F0H
	DB	0B0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H
	DB	0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H
	DB	0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H,0F0H

;------------------------------------------------------------------------------
NUMIES::
 DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H	; 	0
 DB      030H,030H,030H,030H,030H,000H,000H,000H	;	1
 DB      0FCH,00CH,0FCH,0C0H,0FCH,000H,000H,000H	;	2
 DB      0FCH,00CH,0FCH,00CH,0FCH,000H,000H,000H	;	3
 DB      0CCH,0CCH,0FCH,00CH,00CH,000H,000H,000H	;	4
 DB      0FCH,0C0H,0FCH,00CH,0FCH,000H,000H,000H	;	5
 DB      0FCH,0C0H,0FCH,0CCH,0FCH,000H,000H,000H	;	6
 DB      0FCH,00CH,00CH,00CH,00CH,000H,000H,000H	;	7
 DB      0FCH,0CCH,0FCH,0CCH,0FCH,000H,000H,000H	;	8
 DB      0FCH,0CCH,0FCH,00CH,00CH,000H,000H,000H	;	9
 DB	 000H,000H,000H,010H,010H,020H,000H,000H	;	, (COMMA) [10]
 DB	 07CH,092H,010H,010H,010H,010H,010H,000H	;	"PICKY"	  [11] 
 DB	 000H,000H,000H,000H,000H,000H,000H,000H	;	(BLANK)	  [12]
;------------------------------------------------------------------------------

JBTNT::	DB	3,1
	DW	JBTNTC
	DB      0FCH,030H,030H,030H,030H,000H,000H,000H		;T
	DB      0F8H,0CCH,0CCH,0CCH,0CCH,000H,000H,000H		;N
	DB      0FCH,030H,030H,030H,030H,000H,000H,000H		;T
JBTNTC:	DB	040H,040H,040H,040H,040H,040H,040H,040H
	DB	040H,040H,040H,040H,040H,040H,040H,040H
	DB	040H,040H,040H,040H,040H,040H,040H,040H
JRTNT::	DB	3,1
	DW	JRTNTC
	DB      0FCH,030H,030H,030H,030H,000H,000H,000H		;T
	DB      0F8H,0CCH,0CCH,0CCH,0CCH,000H,000H,000H		;N
	DB      0FCH,030H,030H,030H,030H,000H,000H,000H		;T
JRTNTC:	DB	060H,060H,060H,060H,060H,000H,000H,000H
	DB	060H,060H,060H,060H,060H,000H,000H,000H
	DB	060H,060H,060H,060H,060H,000H,000H,000H
JCHARG:: DB	7,1
	DW	JCHGC
	DB      0FCH,0C0H,0C0H,0C0H,0FCH,000H,000H,000H		;C
	DB      0CCH,0CCH,0FCH,0CCH,0CCH,000H,000H,000H		;H
	DB      078H,0CCH,0FCH,0CCH,0CCH,000H,000H,000H		;A
	DB      0FCH,0CCH,0F8H,0CCH,0CCH,000H,000H,000H		;R
	DB      07CH,0C0H,0DCH,0CCH,0FCH,000H,000H,000H		;G
	DB      0FCH,0C0H,0F8H,0C0H,0FCH,000H,000H,000H		;E
	DB      000H,0FCH,000H,0FCH,000H,000H,000H,000H		;=
JCHGC:	DB	060H,060H,060H,060H,060H,000H,000H,000H
	DB	060H,060H,060H,060H,060H,000H,000H,000H
	DB	060H,060H,060H,060H,060H,000H,000H,000H
	DB	060H,060H,060H,060H,060H,000H,000H,000H
	DB	060H,060H,060H,060H,060H,000H,000H,000H
	DB	060H,060H,060H,060H,060H,000H,000H,000H
	DB	060H,060H,060H,060H,060H,000H,000H,000H
TONS::	DB	4,1
	DW	TONSC
	DB      0FCH,030H,030H,030H,030H,000H,000H,000H
	DB      0FCH,0CCH,0CCH,0CCH,0FCH,000H,000H,000H
	DB      0F8H,0CCH,0CCH,0CCH,0CCH,000H,000H,000H
	DB      0FCH,0C0H,0FCH,00CH,0FCH,000H,000H,000H
TONSC:	DB	060H,060H,060H,060H,060H,000H,000H,000H
	DB	060H,060H,060H,060H,060H,000H,000H,000H
	DB	060H,060H,060H,060H,060H,000H,000H,000H
	DB	060H,060H,060H,060H,060H,000H,000H,000H
WALL::	DB	1,1
	DW	WALLC
	DB      0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H,0E0H
WALLC:	DB	040H,040H,040H,040H,040H,040H,040H,040H
ROOF::	DB	1,1
	DW	WALLC
	DB      0FFH,0FFH,0FFH,000H,000H,000H,000H,000H

OVMESS:						;GAME OVER PLAYER 
 DB      000H,000H,000H,000H,007H,00FH,00FH,00EH
 DB      00EH,00EH,00EH,00EH,00EH,00EH,00EH,00EH
 DB      00EH,00FH,00FH,007H,000H,000H,000H,000H
 DB      000H,000H,000H,000H,0F0H,0F8H,0F8H,038H
 DB      000H,000H,000H,070H,078H,078H,038H,038H
 DB      038H,0F8H,0F8H,0F0H,000H,000H,000H,000H
 DB      000H,000H,000H,000H,07FH,0FFH,0FFH,0E3H
 DB      0E3H,0E3H,0FFH,0FFH,0FFH,0E3H,0E3H,0E3H
 DB      0E3H,0E3H,0E3H,0E3H,000H,000H,000H,000H
 DB      000H,000H,000H,000H,00FH,08FH,08FH,08EH
 DB      08EH,08EH,08EH,08EH,08EH,08EH,08EH,08EH
 DB      08EH,08EH,08EH,08EH,000H,000H,000H,000H
 DB      000H,000H,000H,000H,0F7H,0FFH,0FFH,038H
 DB      038H,038H,038H,038H,038H,038H,038H,038H
 DB      038H,038H,038H,038H,000H,000H,000H,000H
 DB      000H,000H,000H,000H,0C3H,0E3H,0E3H,0E3H
 DB      0E3H,0E3H,0E3H,0E3H,0E3H,0E3H,0E3H,0E3H
 DB      0E3H,0E3H,0E3H,0E3H,000H,000H,000H,000H
 DB      000H,000H,000H,000H,0FCH,0FCH,0FCH,080H
 DB      080H,080H,0F0H,0F0H,0F0H,080H,080H,080H
 DB      080H,0FEH,0FEH,0FEH,000H,000H,000H,000H
 DB      000H,000H,000H,000H,003H,007H,007H,007H
 DB      007H,007H,007H,007H,007H,007H,007H,007H
 DB      007H,007H,007H,003H,000H,000H,000H,000H
 DB      000H,000H,000H,000H,0F8H,0FCH,0FCH,01CH
 DB      01CH,01CH,01CH,01CH,01CH,01CH,01CH,01CH
 DB      01CH,0FCH,0FCH,0F8H,000H,000H,000H,000H
 DB      000H,000H,000H,000H,070H,078H,078H,038H
 DB      038H,038H,038H,038H,038H,038H,038H,038H
 DB      038H,03FH,03FH,01FH,000H,000H,000H,000H
 DB      000H,000H,000H,000H,001H,0F1H,0F1H,0F1H
 DB      0E1H,0E1H,0E1H,0E1H,0E1H,0E1H,0E1H,0E1H
 DB      0E1H,0E1H,0E1H,0C1H,000H,000H,000H,000H
 DB      000H,000H,000H,000H,0FEH,0FEH,0FEH,0C0H
 DB      0C0H,0C0H,0F8H,0F8H,0F8H,0C0H,0C0H,0C0H
 DB      0C0H,0FFH,0FFH,0FFH,000H,000H,000H,000H
 DB      000H,000H,000H,000H,01FH,01FH,01FH,01CH
 DB      01CH,01CH,01FH,01FH,01FH,01CH,01CH,01CH
 DB      01CH,01CH,01CH,01CH,000H,000H,000H,000H
 DB      000H,000H,000H,000H,0E0H,0F0H,0F0H,070H
 DB      070H,070H,0F0H,0F8H,0F8H,038H,038H,038H
 DB      038H,038H,038H,038H,000H,000H,000H,000H
 DB      000H,000H,000H,000H,01FH,01FH,01FH,01CH
 DB      01CH,01CH,01CH,01CH,01CH,01CH,01CH,01CH
 DB      01CH,01CH,01CH,01CH,000H,000H,000H,000H
 DB      000H,000H,000H,000H,0EFH,0FFH,0FFH,071H
 DB      071H,071H,071H,071H,071H,071H,071H,071H
 DB      071H,071H,071H,071H,000H,000H,000H,000H
 DB      000H,000H,000H,000H,087H,0C7H,0C7H,0C7H
 DB      0C7H,0C7H,0C7H,0C7H,0C7H,0C7H,0C7H,0C7H
 DB      0C7H,0C7H,0C7H,0C7H,000H,000H,000H,000H
 DB      000H,000H,000H,000H,01FH,01FH,01FH,01CH
 DB      01CH,01CH,01CH,01CH,01CH,01CH,01CH,01CH
 DB      01CH,01CH,01CH,01CH,000H,000H,000H,000H
 DB      000H,000H,000H,000H,0E1H,0F1H,0F1H,071H
 DB      071H,071H,071H,071H,071H,071H,071H,071H
 DB      071H,071H,071H,071H,000H,000H,000H,000H
 DB      000H,000H,000H,000H,0FEH,0FEH,0FEH,0C0H
 DB      0C0H,0C0H,0F8H,0F8H,0F8H,0C0H,0C0H,0C0H
 DB      0C0H,0FFH,0FFH,0FFH,000H,000H,000H,000H
 DB      000H,000H,000H,000H,01FH,01FH,01FH,01CH
 DB      01CH,01CH,01FH,01FH,01FH,01CH,01CH,01CH
 DB      01CH,01CH,01CH,01CH,000H,000H,000H,000H
 DB      000H,000H,000H,000H,0E0H,0F0H,0F0H,070H
 DB      070H,070H,0F0H,0F8H,0F8H,038H,038H,038H
 DB      038H,038H,038H,038H,000H,000H,000H,000H
OVMI1:
 DB      000H,000H,000H,000H,00FH,00FH,00FH,003H
 DB      003H,003H,003H,003H,003H,003H,003H,003H
 DB      003H,01FH,01FH,01FH,000H,000H,000H,000H
 DB      000H,000H,000H,000H,000H,080H,080H,080H
 DB      080H,080H,080H,080H,080H,080H,080H,080H
 DB      080H,0F0H,0F0H,0F0H,000H,000H,000H,000H
OVMI2:
 DB      000H,000H,000H,000H,00FH,01FH,01FH,01CH
 DB      000H,000H,000H,00FH,01FH,01FH,01CH,01CH
 DB      01CH,01FH,01FH,01FH,000H,000H,000H,000H
 DB      000H,000H,000H,000H,0E0H,0F0H,0F0H,070H
 DB      070H,070H,070H,0F0H,0F0H,0E0H,000H,000H
 DB      000H,0F0H,0F0H,0F0H,000H,000H,000H,000H


	END 	;END OF PROGRAM	



