		.Z80
;******************************************************************************
;
;	ROUTINE NAME: MUL816
;
;___________________________________________
;
;	FILE NAME: ARITH.MAC
;
;	DESCRIPTION:
;			MULTIPLYS TO 8 BIT NUMBERS TOGETHER 
;			YEILDING A POSSIBLE 16  BIT  RESULT 
;			BECAUSE 2 TO THE 8th POWER SQUARED 
;			IS 2 TO THE 16th POWER.
;
;	AUTHOR: TODD MACNAUGHT
;	DATE and ISSUE:		(July 2, 1982  Version 1.0)
;	CATALOGUE NUMBER:	(NSR - AS - 0010)
;
;	PARAMETERS PASSED:
;			MULTIPLICAND IN BC REG
;			MULTIPLIER   IN DE REG
;
;	PARAMTERS RETURNED:
;			RESULT RETURNED IN BC REG
;
;	REGISTERS CLOBBERED:
;			BC, DE, HL
;	
;	GLOBALS ACCESSED:
;			NONE
;
;	GLOBALS WRITTEN:
;			NONE
;
;	COMMENTS AND WARNINGS:
;				VERY FAST AND EFFICIENT
;				REGISTER SELECTION AND
;				INSTRUCTION SELECTION
;				YIELD MAXIMUM EFFICIENCY.   
;
;				THIS SUBROUTINE FOR USE 
;				WITH PCALL MACRO
;
;******************************************************************************
;
;
;
MUL816::
		LD B,08H	;B IS BIT COUNTER
		LD HL,0000H	;SET RESULT TO 0
MULTA:		SRL C		;SHIFT MULTIPLIER BIT INTO CARRY
		JR NC,$ + 3	;TEST CARRY
		ADD HL,DE	;ADD MULTIPLICAND TO RESULT
		SLA E		;SHIFT MULTIPLICAND LEFT
		RL D		;SAVE BIT IN D
		DJNZ MULTA	;LOOP AGAIN IF COUNTER NOT ZERO
		LD B,H		;PUT RESULT IN BC 
		LD C,L
		RET		;END OF MULT8
;
;
;
;******************************************************************************
;
;	ROUTINE NAME: MUL1616
;
;___________________________________________
;
;	FILE NAME: ARITH.MAC
;
;	DESCRIPTION:
;			MULTIPLYS TWO 16 BIT NUMBERS TOGETHER 
;			YEILDING A POSSIBLE 16  BIT  RESULT 
;			HOWEVER IT ASSUMES THAT THE RESULT ONLY
;			REQUIRES 16 BITS, SO THAT IT CAN BE CONTAINED
;			IN ONE OF THE REGISTER PAIRS 
;
;	AUTHOR: TODD MACNAUGHT
;	DATE and ISSUE:		(July 2, 1982  Version 1.0)
;	CATALOGUE NUMBER:	(NSR - AS - 0012)
;
;	PARAMETERS PASSED:
;			MULTIPLICAND IN BC REG
;			HIGH BYTE OF MULTIPLIER IN D REG
;			LOW  BYTE OF MULTIPLIER IN E REG
;
;	PARAMTERS RETURNED:
;			   RESULT RETURNED IN BC REG
;
;	REGISTERS CLOBBERED:
;			ALL
;	
;	GLOBALS ACCESSED:
;			NONE
;
;	GLOBALS WRITTEN:
;			NONE
;
;	COMMENTS AND WARNINGS:
;				VERY FAST AND EFFICIENT
;				REGISTER SELECTION AND
;				INSTRUCTION SELECTION
;				YIELD MAXIMUM EFFICIENCY.   
;
;				THIS SUBROUTINE FOR USE 
;				WITH PCALL MACRO
;
;******************************************************************************
;
MUL1616::	
		LD A,C		;PUT LOW BYTE OF MULTIPLIER  IN A
		LD C,B		;PUT HIGH BYTE OF MULTIPLIER IN C
				;DE = MULTIPLICAND
		LD B,010H	;B IS BIT COUNTER
		LD HL,0000H	;SET RESULT TO ZERO
MULTB:		SRL C		;SHIFT RIGHT MULTIPLIER HIGH BYTE
		RRA		;ROTATE RIGHT MULTIPLIER LOW BYTE
		JR NC,$ + 3	;TEST CARRY
		ADD HL,DE	;ADD MULTIPLICAND TO RESULT
		EX DE,HL	;
		ADD HL,HL	;DOUBLE SHIFT MULTIPLICAND LEFT
		EX DE,HL	;PUT IT BACK NOW
		DJNZ MULTB	;DO IT AGAIN UNTIL COUNT = ZERO
		LD B,H		;PUT RESULT IN BC
		LD C,L
		RET		;GO HOME
;
;******************************************************************************
;
;	ROUTINE NAME: MUL1632
;
;___________________________________________
;
;	FILE NAME: ARITH.MAC
;
;	DESCRIPTION:
;			MULTIPLYS TWO 16 BIT NUMBERS TOGETHER 
;			YEILDING  A 32  BIT  RESULT 
;
;	AUTHOR: TODD MACNAUGHT
;	DATE and ISSUE:		(July 2, 1982  Version 1.0)
;	CATALOGUE NUMBER:	(NSR - AS - 0012)
;
;	PARAMETERS PASSED:
;			MULTIPLICAND IN BC REG
;			MULTIPLIER IN DE REG		
;
;	PARAMTERS RETURNED:
;			HIGH BYTES OF RESULT RETURNED IN BC REG
;			LOW  BYTES OF RESULT RETURNED IN DE REG
;	REGISTERS CLOBBERED:
;			ALL
;	
;	GLOBALS ACCESSED:
;			NONE
;
;	GLOBALS WRITTEN:
;			NONE
;
;	COMMENTS AND WARNINGS:
;				VERY FAST AND EFFICIENT
;				REGISTER SELECTION AND
;				INSTRUCTION SELECTION
;				YIELD MAXIMUM EFFICIENCY.   
;
;				FOR USE WITH PCALL MACRO
;
;******************************************************************************
;
MUL1632::
	LD HL,0000H	;INITIALIZE HIGH BYTES OF RESULT TO ZERO
	XOR A		;CLEAR CARRY FLAG
	EXX		;ACTIVATE ALTERNATE REGISTER SET 
	LD B,10H	;PUT COUNTER IN ALTERNATE A REG 	
			;BC REG HAS MULTIPLICAND
			;DE REG HAS MULTIPLIER
			;HL REG HAS HIGH BYTES RESULT
			;DE REG HAS LOW  BYTES OF RESULT
MUL32:  EXX		;RESTORE STANDARD REGISTER SET
	RR D		;SHIFT HIGH BYTES OF MULTIPLIER RIGHT
	RR E		;MOVE CONTENTS OF CARRY FLAG INTO BIT 7 OF
			;E REG AND CONTENTS OF BIT 0 INTO CARRY FLAG
			;THIS RESULTS IN SHIFTING THE 16 BIT MULTIPLIER
			;RIGHT ONE BIT
	JR NC,$ + 3  ;IS BIT 0 OF MULTIPLIER SET?
	ADD HL,BC	;YES,ADD MULTIPLICAND TO MOST SIGNIFICANT BYTES OF
			;32 BIT RESULT
	SRL H		;SHIFT ENTIRE 32 BIT RESULT RIGHT ONE POSITION
	RR  L		;PUT CARRY IN BIT 7 OF REG L AND BIT 0 OF REG
			;L INTO CARRY FLAG BECAUSE IF WE GET A CARRY FROM
			;BIT 0 OF L REG WE WANT TO PUT THAT BIT IN BIT 7
			;OF D REG BECAUSE DE IS THE LOW BYTES OF RESULT
	EXX		;SWITCH TO ALTERNATE REGISTER SET
	DJNZ	MUL32	;IF B' NOT ZERO DO IT AGAIN
	EXX		;RESTORE STANDARD STANDARD  REGISTER SET
	RR D		;FINISH SHIFTING LOWER BYTES OF 32 BIT RESULT
	RR E		;BEFORE RETURNING
	LD B,H		;BC HAS HIGH BYTES OF RESULT
	LD C,L		;DE HAS LOW BYTES OF RESULT
	RET		;RETURN

;******************************************************************************
;
;	ROUTINE NAME: DIV88
;
;___________________________________________
;
;	FILE NAME: ARITH.MAC
;
;	DESCRIPTION:
;			PERFORMS A 8 BY 8 BIT INTEGER DIVISION
;			USING A RESTORING TECHNIQUE. 
;
;	AUTHOR: TODD MACNAUGHT
;	DATE and ISSUE:		(July 2, 1982  Version 1.0)
;	CATALOGUE NUMBER:	(NSR - AS - 0011)
;
;	PARAMETERS PASSED:
;			DIVIDEND  IN C REG
;			DIVISOR   IN E REG
;
;	PARAMTERS RETURNED:
;			QUOTIENT  IN B
;			REMAINDER IN C 
;
;	REGISTERS CLOBBERED:
;			A, BC, DE, HL
;	
;	GLOBALS ACCESSED:
;			NONE
;
;	GLOBALS WRITTEN:
;			NONE
;
;	COMMENTS AND WARNINGS:
;				VERY FAST AND EFFICIENT
;				REGISTER SELECTION AND
;				INSTRUCTION SELECTION
;				YIELD MAXIMUM EFFICIENCY.
;				USES RESTORING TECHNIQUE   
;
;				THIS SUBROUTINE FOR USE 
;				WITH PCALL MACRO
;
;******************************************************************************

DIV88::
        XOR A		;CLEAR ACCUMULATOR
        LD B,08H        ;SET COUNTER
DLOOP:
        RL C            ;ROTATE CARRY INTO ACCUMULATOR DIVIDEND
        RLA             ;CARRY IS OFF
        SUB E           ;TRIAL SUBTRACT DIVISOR
        JR NC,$ + 3     ;SUBTRACTION OK
        ADD A,E         ;RESTRORE ACCUMULATOR AND SET CARRY
        DJNZ DLOOP      ;NOT FINISHED?	
        LD B,A          ;PUT REMAINDER IN B
        LD A,C          ;GET QUOTIENT
        RLA             ;SHIFT LAST RESULT BIT	
        CPL             ;COMPLEMENT BITS
	LD C,B		;PUT REMAINDER IN C
	LD B,A		;PUT QUOTIENT IN B REG
        RET		;RETURN TO PAPA
;
;
;******************************************************************************
;
;******************************************************************************
;
;	ROUTINE NAME: DIV1516
;
;___________________________________________
;
;	FILE NAME: ARITH.MAC
;
;	DESCRIPTION:
;			PERFORMS A 16 BY 15 BIT INTEGER DIVISION
;			USING A RESTORING TECHNIQUE. 
;
;	AUTHOR: TODD MACNAUGHT
;	DATE and ISSUE:		(July 2, 1982  Version 1.0)
;	CATALOGUE NUMBER:	(NSR - AS - 0013)
;
;	PARAMETERS PASSED:
;			DIVIDEND  IN BC REG
;			DIVISOR   IN DE REG
;
;	PARAMTERS RETURNED:
;			QUOTIENT  IN BC
;			REMAINDER IN DE
;
;	REGISTERS CLOBBERED:
;			ALL
;	
;	GLOBALS ACCESSED:
;			NONE
;
;	GLOBALS WRITTEN:
;			NONE
;
;	COMMENTS AND WARNINGS:
;				VERY FAST AND EFFICIENT
;				REGISTER SELECTION AND
;				INSTRUCTION SELECTION
;				YIELD MAXIMUM EFFICIENCY.
;				USES RESTORING TECHNIQUE   
;
;				THIS SUBROUTINE FOR USE 
;				WITH PCALL MACRO
;
;******************************************************************************

DIV1516::	LD A,B		;PUT HIGH BYTE OF DIVIDEND IN A
		LD HL,0000H	;INITLIZE RESULT TO ZERO
		LD B,010H	;B HOLD COUNTER
LOOP16:		RL C		;16 BIT DIVIDEND SHIFTED  
		RLA		;LEFT BY THESE TWO INSTRUCTIONS
		ADC HL,HL	;SHIFT REMAINDER LEFT
		SBC HL,DE	;TRIAL SUBTRACT DIVISOR
		JR NC,$+3	;SUBTRACTION WAS OK
		ADD HL,DE	;RESTORE DIVISOR
		CCF		;CLEAR CARRY
		DJNZ LOOP16	;COUNTER NOT ZERO
		RL C		;SHIFT IN LAST 
		RLA		;BIT
		LD B,A		;BC HAVE QUOTIENT
		EX DE,HL	;DE HAVE REMAINDER
		RET		;RETURN 
;
;******************************************************************************
;
;	ROUTINE NAME: DIV328
;
;___________________________________________
;
;	FILE NAME: ARITH.MAC
;
;	DESCRIPTION:
;			PERFORMS A 32 BY 8 BIT INTEGER DIVISION
;			USING A RESTORING TECHNIQUE. 
;
;	AUTHOR: TODD MACNAUGHT
;	DATE and ISSUE:		(July 2, 1982  Version 1.0)
;	CATALOGUE NUMBER:	(NSR - AS - 0013)
;
;	PARAMETERS PASSED:
;			HIGH BYTES OF DIVIDEND  IN BC REG
;			LOW  BYTES OF DIVIDEND  IN DE REG	
;			8 BIT DIVISOR IN L REG
;
;	PARAMTERS RETURNED:
;			QUOTIENT  IN BC
;			REMAINDER IN DE
;
;	REGISTERS CLOBBERED:
;			ALL
;	
;	GLOBALS ACCESSED:
;			NONE
;
;	GLOBALS WRITTEN:
;			NONE
;
;	COMMENTS AND WARNINGS:
;				VERY FAST AND EFFICIENT
;				REGISTER SELECTION AND
;				INSTRUCTION SELECTION
;				YIELD MAXIMUM EFFICIENCY.
;				USES RESTORING TECHNIQUE   
;
;				FOR USE WITH PCALL MACRO
;
;******************************************************************************
;
DIV328::	PUSH HL		;PUT HIGH BYTES OF DIVIDEND IN HL
		LD H,B
		LD L,C
		LD B,D		;PUT LOW  BYTES OF DIVIDEND IN BC
		LD C,E
		POP DE		;PUT DIVISOR IN DE
		LD D,E
		LD E,0

		EXX		;ACTIVATE ALTERNATE REGISTER SET
		LD B,08H	;PUT COUNTER IN B' REGISTER
DV328:		EXX		;REACTIVATE STANDARD REGISTER SET
		SLA C		;SHIFT DIVIDEND AND QUOTIENT LEFT ONE BIT
		RL B
		RL L
		RL H		
		XOR A		;CLEAR CARRY FLAG FOR TRIAL SUBTRACTION
		SBC HL,DE	;TRIAL SUBTRACT 8 BIT DIVISOR FROM
				;HIGH 8 BITS OF DIVIDEND
				;CAN DIVISOR BE SUBTRACTED WITHOUT A BORROW 
		JR C,$ + 5	;NO, THEN RESTORE DIVIDEND ELSE
		INC BC		;ADD 1 TO QUOTIENT BEING PUT IN BC REG,THE LOW
				;BYTES OF THE DIVIDEND.
		JR $ + 3	;THATS ALL FOR THIS TIME.
		ADD HL,DE	;RESTORE DIVIDEND TO PREVIOUS STATE HERE
		EXX		;ARE WE FINISHED?
		DJNZ DV328	;NO, JUMP TO DV328 AND DO IT AGAIN 
		EXX		;YES,RESTORE STANDARD REG SET AND RETURN 
		EX DE,HL	;PUT REMAINDER IN DE
		RET
;******************************************************************************
;
;	ROUTINE NAME: DIV3216
;
;___________________________________________
;
;	FILE NAME: ARITH.MAC
;
;	DESCRIPTION:
;			PERFORMS A 32 BY 16 BIT INTEGER DIVISION
;			USING A RESTORING TECHNIQUE. 
;
;	AUTHOR: TODD MACNAUGHT
;	DATE and ISSUE:		(July 2, 1982  Version 1.0)
;	CATALOGUE NUMBER:	(NSR - AS - 0013)
;
;	PARAMETERS PASSED:
;			HIGH BYTES OF DIVIDEND  IN BC REG
;			LOW  BYTES OF DIVIDEND  IN DE REG	
;			16 BIT DIVISOR IN HL REG
;
;	PARAMTERS RETURNED:
;			QUOTIENT  IN BC
;			REMAINDER IN DE
;
;	REGISTERS CLOBBERED:
;			ALL
;	
;	GLOBALS ACCESSED:
;			NONE
;
;	GLOBALS WRITTEN:
;			NONE
;
;	COMMENTS AND WARNINGS:
;				VERY FAST AND EFFICIENT
;				REGISTER SELECTION AND
;				INSTRUCTION SELECTION
;				YIELD MAXIMUM EFFICIENCY.
;				USES RESTORING TECHNIQUE   
;
;				FOR USE WITH PCALL MACRO
;
;******************************************************************************
;
DIV3216::	PUSH HL		;PUT HIGH BYTES OF DIVIDEND IN HL
		LD H,B
		LD L,C
		LD B,D		;PUT LOW  BYTES OF DIVIDEND IN BC
		LD C,E
		POP DE		;PUT DIVISOR IN DE

		EXX		;ACTIVATE ALTERNATE REGISTER SET
		LD B,10H	;PUT COUNTER IN B' REGISTER
DV3216:		EXX		;REACTIVATE STANDARD REGISTER SET
		SLA C		;SHIFT DIVIDEND AND QUOTIENT LEFT ONE BIT
		RL B
		RL L
		RL H		
		XOR A		;CLEAR CARRY FLAG FOR TRIAL SUBTRACTION
		SBC HL,DE	;TRIAL SUBTRACT 16 BIT DIVISOR FROM
				;HIGH 16 BITS OF DIVIDEND
				;CAN DIVISOR BE SUBTRACTED WITHOUT A BORROW 
		JR C,$ + 5	;NO, THEN RESTORE DIVIDEND ELSE
		INC BC		;ADD 1 TO QUOTIENT BEING PUT IN BC REG,THE LOW
				;BYTES OF THE DIVIDEND.
		JR $ + 3	;THATS ALL FOR THIS TIME.
		ADD HL,DE	;RESTORE DIVIDEND TO PREVIOUS STATE HERE
		EXX		;ARE WE FINISHED?
		DJNZ DV3216	;NO, JUMP TO DV3216 
		EXX		;YES,RESTORE STANDARD REG SET AND RETURN 
		EX DE,HL	;PUT REMAINDER IN DE
		RET
;
;**************************************************************************
;
;
;	ROUTINE NAME:	ABSOLUTE
;
;------------------------------------------
;
;	FILE NAME:	ARITH.MAC
;
;	DESCRIPTION:	TAKE ABSOLUTE VALUE OF 16 BIT NUMBER
;
;	AUTHOR:		TODD MACNAUGHT
;	DATE and ISSUE:		(supplied by library)
;	CATALOGUE ID:		(    "		"   )
;
;	PARAMETERS PASSED:	NUMBER = BC REG
;
;	PARAMETERS RETURNED:	ABSOLUTE VALUE = HL REG.
;
;	REGISTERS CLOBBERED:	A,H,L
;
;	GLOBALS ACCESSED:	NONE
;
;	GLOBALS WRITTEN:	NONE
;
;	COMMENTS and WARNINGS:
;
;
;
ABSOLUTE::
		LD H,B
		LD L,C
		BIT 7,B		;CHECK IF NEGATIVE
		RET Z		;NO, THEN DONE
				;IF HERE, NUMBER MUST BE NEGATED
		LD A,L
		CPL
		LD L,A
		LD A,H
		CPL
		LD H,A
		LD BC, 01
		ADD HL,BC
		RET
;******************************************************************************
				END
;******************************************************************************
