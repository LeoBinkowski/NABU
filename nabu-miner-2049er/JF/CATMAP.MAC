;*****************************************************************************
;	CATMAP.MAC - ROUTINE TO ADD ENTRIES TO THE VARIOUS TABLES
;
;	10AUG23 RECREATED MISSING/UNRECOVERED UPCOP ROUTINE CODE
;           SCOTT LABOMBARD
;
;	15MAY84 JF	RESET TRTIMR IN INICAT
;			RESET ZOVAFG
;	06MAY84 JF	FIX ORDER OF PLATFORM TABLE
;			INITIALIZE (TRRCOL)
;	04MAY84	JF	INITIALIZATIONS FOR TONNAGE
;	03MAY84	JF	FIXED ADDWAL SO IT DOES NOT USE LASMPL
;	02MAY84	JF	INTEGRATION OF PAT/JF STUFF
;*****************************************************************************

	.Z80
	.RADIX	10

	.XLIST

	INCLUDE	COMMON.MRO
	INCLUDE	STRUCT.MRO
	INCLUDE ARITH.MRO
;	INCLUDE LINKTAB.EXA

;*************************************************************************
;		MACRO TO MOVE GIVEN BUFFER
;*************************************************************************


COPBUF	MACRO	FRADD,TOADD,TOTBTS
	LD DE,TOADD
	LD HL,FRADD
	LD BC,TOTBTS
	LDIR
	ENDM

	.LIST

;
;**************************************************************************
;		EXTERNAL SUBROUTINE NAMES
;**************************************************************************

	EXTRN TRTIMR,TRRCOL,PRELEV,TONNAGE,TONFLG,DANFLG,SETTON
	EXTRN MSTEPS,PREZON,MTOGGL,MSTCNT,CLAIM,LNKTB,SETPLAT
	EXTRN SPNAME,SPCOL,SPMOVE,SPMARK
	EXTRN ZOTTSE,JFX,JFY,DX,DY
	EXTRN GREENF,ZOTFLG,ZOVAFG,TSEFLG
	EXTRN TICKY,LASTIM,TIMER,XMANFG
	EXTRN CANX,CANY,LIFTX,LIFTY

;***************************************************************************
;			TABLE WORK AREAS
;***************************************************************************

CLAFLG::	DB	0	;CLAIM FLAG FOR CLAIM SUBROUTINE
CCATX::		DB	0	;CLAIMED CATWALK X COORDINATE
CCATY::		DB	0	;CLAIMED CATWALK Y
CATFLG::	DB	0	;
BBX::		DB	0	;BOBS X
BBY::		DB	0	;BOBS Y
LASTY::		DW	0	;POINTER TO CATMAP TABLE
SAVEY::		DW	0	;TEMPORARY USED IN CAT ROUTINES
TEMPY::		DW	0	;TEMPORARY USED IN CAT ROUTINES
BIGY::		DB	0	;BIGGEST VALUE OF Y USED IN BUILDING TABLE

	;************ CATWALK TABLE ENTRY *******************

TOPY:		DB	0	;TOP LEFT Y COORD
TOPX:		DB	0	;TOP LEFT X COORD
CNUM:		DB	0	;NUMBER OF PIECES OF CATWALK
XMAP:		DB	0,0,0,0,0	;BIT MAP OF CATWALK

	;************ TABLE ENTRY *******************

QX:		DB	0	;QUERIE X USED IN CAT CHECK ROUT.
QY:		DB	0	;QUERIE Y USED IN CAT CHECK ROUT.
LOOKFG:		DB	0	;
PCENUM:		DB	0	;PIECE NUMBER
PCEOFF:		DB	0	;PIECE OFFSET
CXBYT:			DB	0	;CATWALK BIT MAP BYTE
CXOFF:		DB	0	;CATWALK BIT MAP OFFSET

;
;**************************************************************************
;			TABLES AND TABLE POINTERS
;**************************************************************************

CATMAP::	DS	900		;CAT WALK TABLE
D6TAB::		DS	520		;6 TIMES TABLE

LADTAB::	DS	40		;LADDER TABLE
LASLAD::	DW	0		;LADDER TABLE POINTER

SLITAB::	DS	40		;SLIDE TABLE
LASSLI::	DW	0		;SLIDE TABLE POINTER

TRRTAB::	DS	10		;TRANSPORTER TABLE
LASTRR::	DW	0		;TRANSPORTER TABLE POINTER

TSETAB::	DS	120		;TREASURE TABLE
LASTSE::	DW	0		;TREASURE TABLE POINTER

MONTAB::	DS	131		;MONSTER TABLE (130+1)
LASMON::	DW	0		;MONSTER TABLE POINTER

MPLTAB::	DS	50		;MOVING PLATFORM TABLE
LASMPL::	DW	0		;MOVING PLATFORM TABLE POINTER

WALTAB::	DS	40		;WALL / ROOF TABLE
LASWAL::	DW	0		;WALL / ROOF TABLE POINTER
;
;***************************************************************************
;	THIS ROUTINE INITIALIZES ALL THE TABLES AND TABLE POINTERS
;	BEFORE THE TABLE BUILD SUBROUTINE (DOSCR) IS EXECUTED
;***************************************************************************

INICAT::
	LD HL,0
	LD (CATMAP),HL			;ZERO OUT FIRST ENTRY OF CATMAP
	LD HL,CATMAP			;POINT LASTY TO CATMAP (1ST ENTRY)
	LD (LASTY),HL			;
	LD HL,BIGY			;ZERO OUT ENTRY BUFF AND BIGY
	LD B,9				;ZERO OUT THE 9 BYTES
ZEB:	LD (HL),0
	INC HL
	DJNZ ZEB

	ASIGN16. (LASLAD),LADTAB	;INITIATE TABLE POINTERS
	LD HL,LADTAB
	LD (HL),0
	ASIGN16. (LASSLI),SLITAB	;
	LD HL,SLITAB
	LD (HL),0
	ASIGN16. (LASTRR),TRRTAB	;
	LD HL,TRRTAB
	LD (HL),0
	ASIGN16. (LASTSE),TSETAB	;
	LD HL,TSETAB
	LD (HL),0
	ASIGN16. (LASMON),MONTAB
	LD HL,MONTAB
	LD (HL),0
	ASIGN16. (LASMPL),MPLTAB	;
	LD HL,MPLTAB
	LD (HL),0
	ASIGN16. (LASWAL),WALTAB
	ASIGN16. (WALTAB),0

	LD HL,GREENF
	LD (HL),0

	ASIGN8. (ZOTFLG),0		;RESET ZOTTSE FLAG
	ASIGN8. (ZOVAFG),0		;RESET ZOTTSE FLAG FOR VALUES
	ASIGN8. (TSEFLG),0		;RESET SCORUP FLAG
	ASIGN8. (TICKY),1		;RESET FOR TIMTSK
	ASIGN8. (XMANFG),0		;RESET FOR XMATSK
	ASIGN8. (CLAFLG),0		;RESET FOR CLAIM
	ASIGN8. (CANX),0		;CANNON X COORD
	ASIGN8. (CANY),0		;CANNON Y COORD
	ASIGN8. (LIFTX),0		;LIFT X
	ASIGN8. (LIFTY),0		;LIFT Y
	ASIGN8. (TONNAGE),0		;TONNAGE AMOUNT FOR STATION 10
	ASIGN8. (TONFLG),0		;TO RUN PUTTON
	ASIGN8. (DANFLG),0		;TO PUT UP DANGER
	IF8. (PRELEV),.EQ.,10		;FOR TONNAGE STUFF
	    CALL SETTON			;SETS UP TONNAGE STUFF
	ENDIF.
	ASIGN8. (TRRCOL),0		;TRANSPORTER COLOR FLAG
	ASIGN8. (TRTIMR),0		;TRANSPORTER TIMER

	RET	;END OF INICAT
;
;***************************************************************************
;	THIS ROUTINE PUTS THE FINISHING TOUCHES ON A TABLE ONCE IT HAS
;	BEEN BUILT
;***************************************************************************	

FINCAT::
	ASIGN16. (SAVEY),(LASTY)	;MARK END OF CAT MAP
	SUB16. (SAVEY),8		;POINT TO LAST ENTRY
	ASIGN16. (LASTY),CATMAP		;START TABLE AT CATMAP
	ASIGN8. (LASTIM),(TIMER)	;FOR FLASHING ROUTINE	

	PCALL SETPLAT,MPLTAB		;SETUP PLATFORM ADDRESS 	

	RET	;END OF FINCAT
;
;****************************************************************************
;	THIS ROUTINE ADDS THE CATWALK AND RAMP SECTIONS TO THE CATWALK/RAMP
;	TABLE
;		REGISTER C  =  X COORDINATE
;		REGISTER E  =  Y COORDINATE
;		REGISTER A  =  NUMBER OF CATWALK SECTIONS
;		LASTY	    =  ADDRESS OF NEXT TABLE ENTRY
;****************************************************************************

ADDENT::

	LD (CNUM),A				;NUMBER OF CATWALK PIECES
	LD A,C					;X LOC
	LD (TOPX),A				;  TO TOPX
	LD A,E					;Y LOC
	LD (TOPY),A				;  TO TOPY
	IF8. (TOPY),.GT.,(BIGY) 		;JUST PUT AT END OF TABLE
		COPBUF TOPY,(LASTY),8		;COPY BUFFER INTO TBL AT LASTY
		ASIGN8. (BIGY),(TOPY)		;FOR NEXT TIME
		CALL INCLY			;ADD 8 TO POINT AT NEXT ENTRY
	ELSE.					;SNEAK IN
		CALL UPCOP
		CALL INCLY			;POINT TO NEXT ENTRY
		ASIGN16. (TEMPY),(LASTY)	;SAVE LASTY
	ENDIF.

	RET	;END OF ADDENT

;****************************************************************************
;
;****************************************************************************

INCLY:
	ADD16. (LASTY),8		;ADD 8 TO (LASTY)
	LD HL,(LASTY)			;PUT IN HL
	LD A,0				;ZERO OUT
	LD (HL),A			;WHERE (LASTY) POINTS
	RET	;END OF INCLY


;****************************************************************************
;
;****************************************************************************

UPCOP::
	LD HL,(LASTY)			;SAVE (LASTY)
	LD (SAVEY),HL			;IN (SAVEY)
UCLOO:
	LD HL,(LASTY)			;(TEMPY)_(LASTY)
	LD (TEMPY),HL			;
	SUB16. (TEMPY),8		;(TEMPY)_(TEMPY)-8
	LD HL,(TEMPY)			;
	LD A,(HL)			;A IS VALUE AT ADDRESS POINTED TO BY
	LD (QY),A			;  (TEMPY).  PUT IN (QY)

; **********
; THE FOLLOWING IS A RECREATION OF MISSING/UNRECOVERED CODE. SL - 8/10/2023
; **********

QLTT:
	IF8. (QY),.LT.,(TOPY)		;LAST ITERATION
LASTIT:
	    COPBUF TOPY,(LASTY),8
	    JP	XUPCOP
	ENDIF.
	IF8. (TOPY),.LT.,(QY)
UCLOP:
	    COPBUF (TEMPY),(LASTY),8
	    IF16. (TEMPY),.EQ.,CATMAP
	    ASIGN16. (LASTY),(TEMPY)
	    JP	LASTIT
	    ENDIF.
	    SUB16. (LASTY),8
	    JP	UCLOO
	ENDIF.
	LD	HL,(TEMPY)
	INC	HL
	LD	A,(HL)
	LD	(QX),A
	IF8. (QX),.GT.,(TOPX)
		JP	UCLOP
	ENDIF.
	JP	LASTIT

XUPCOP:
	ASIGN16. (LASTY),(SAVEY)

	RET	;END OF UPCOP

; **********
; END CODE RECREATION
; **********

;
;****************************************************************************
;
; THIS ROUTINE CHECKS WHETHER BB IS ON A CATWALK OR NOT, SETS FLAG TO
; TO DO CLAIM ROUTINE, AND UPDATES BIT MAP FOR CATWALK IF BB IS ON
;
;(CLAFLG)=CLAIM FLAG FOR CLAIM SUBROUTINE
;(CATMAP)=ADDRESS OF FIRST ENTRY ON TABLE
;(TOPCAT)=ADDRESS OF LAST ENTRY ON TABLE
;(LASTY)	=ADDRESS OF LAST ENTRY SEARCHED
;(LOOKFG)=FLAG THAT DETERMINES WHICH DIRECTION ON THE TABLE WE ARE SEARCHING
;		0=HAVEN'T LOOKED
;		1=GOING FROM HIGHER ENTRY TO LOWER ENTRY
;		2=GOING FROM LOWER TO HIGHER
;TABLE ENTRY:
;
; TOPY	  TOPX	   CNUM	    XMAP
;.........................................................................
;:        :        :        :        .        .        .        .        :
;.........................................................................
;
;****************************************************************************

CKCAT::
	LD A,C
	LD (BBX),A			;PASS (BBX) IN C
	LD A,E				;PASS (BBY) IN E
	LD (BBY),A		
	ASIGN8. (LOOKFG),0		;WE HAVEN'T LOOKED
	IF8. (CLAFLG),.EQ.,1		;WE ARE PRESENTLY CLAIMING A CATWALK
		JP XCKCAT		;SO EXIT
	ENDIF.
CKENT::					;START TO CHECK ENTRY
	LD HL,(LASTY)			;POINTER TO CURRENT CATMAP ENTRY
	LD A,(HL)			;VALUE AT ENTRY
	LD (TOPY),A			;LOAD INTO (TOPY)
	IF8. (BBY),.LT.,(TOPY)		;BOB PHYSICALLY ABOVE CATWALK
CKLOW:	    
	    IF8. (LOOKFG),.EQ.,2	;WE ALREADY LOOKED LOWER
		JP BAD			;SO BOB IS IN-BETWEEN
	    ENDIF.			;(LOOKFG)=2
	    IF16. (LASTY),.EQ.,CATMAP	;WE ARE AT FIRST ENTRY
		JP BAD			;WE CAN'T GO LOWER; BOB OUT OF RANGE
	    ENDIF.			;LASTY;=CATMAP
	    ASIGN8. (LOOKFG),1		;SEARCHING FROM HIGHER TO LOWER CATWALK
	    SUB16. (LASTY),8		;DECREMENT TO PREVIOUS TABLE ENTRY
	    JP CKENT			;TRY AGAIN
	ENDIF.				;(BBY)<(TOPY)
	IF8. (BBY),.GT.,(TOPY)		;BOB PHYSICALLY BELOW CATWALK
CKHI:	
	    IF8. (LOOKFG),.EQ.,1	;WE ALREADY LOOKED HIGHER
		JP BAD			;SO BOB IS IN-BETWEEN
	    ENDIF.			;(LOOKFG)=1
	    IF16. (LASTY),.EQ.,(SAVEY)	;LAST TABLE ENTRY
		JP BAD			;CAN'T GO ANY HIGHER ON TABLE
	    ENDIF.			;LASTY=TOPCAT
	    ASIGN8. (LOOKFG),2		;ON THE WAY TO HIGHER TABLE ENTRY
	    ADD16. (LASTY),8		;INCREMENT TO NEXT TABLE ENTRY
	    JP CKENT			;TRY AGAIN
	ENDIF. 				;(BBY)>(TOPY)
	;ELSE (BBY)=(TOPY)
GOTONE:
	COPBUF (LASTY),TOPY,8		;MOVE 8 BYTE ENTRY FROM (LASTY) TO TOPY
	IF8. (BBX),.LT.,(TOPX)		;NOT IN THIS CATWALK
	    JP CKLOW			;TRY LOWER
	ENDIF.				;(BBX)<(TOPX)	
	ASIGN8. (PCENUM),(BBX)		;(PCENUM)_(BBX)-(TOPX)
	SUB8. (PCENUM),(TOPX)		;(PCENUM)_(PCENUM)/6(PCEOFF)_(PCENUM)%6
	LD A,(PCENUM)			;DIVIDE BY 6
	CALL DIV6			;A=RESULT 
	INC A				;TO TEST WITH (CNUM)
	LD (PCENUM),A		
	LD A,B				;GET REMAINDER
	LD (PCEOFF),A			;  (WHAT PIXEL OF CATPICE BOB IS ON)
	IF8. (PCENUM),.GT.,(CNUM)	;OFF THE RIGHT OF CATWALK
	    JP CKHI			;TRY NEXT HIGHEST ENTRY
	ENDIF.				;(PCENUM)>(CNUM)
	SUB8. (PCENUM),1		;TO GET BYTE
	LD A,(PCENUM)			;DIVIDE
	SRL A				;  BY 
	SRL A				;    8
	SRL A				
	LD (CXBYT),A	        	;SAVE IN (CXBYT)
	LD HL,XMAP			;ADDRESS OF CATMAP
	LD C,A				;FOR
	LD B,0				; ADDITION
	ADD HL,BC			;WE NOW HAVE THE ADDRESS OF BIT MAP
	LD C,(HL)			;PUT BYTE INTO C
	LD A,(PCENUM)			;TO GET OFFSET
	AND 07				;  MOD
	LD (CXOFF),A			;SAVE IN (CXOFF)
	INC A				;BASE 0 TO BASE  1
BITLOO:
	RLC C				;ROTATE LEFT
	DEC A				;COUNT USING A
	JP NZ,BITLOO			;CONTINUE FOR NUMBER OF (CXOFF)
	BIT 0,C				;TEST BIT (NOW AT 0)
	JP NZ,GOOD			;ALREADY CLAIMED, EXIT
	LD A,C				;SET FOR 
	OR 1				;  CATWALK
	LD C,A				;BACK TO C
	LD A,(CXOFF)			;USE A FOR COUNTER
	INC A				;BASE 0 TO BASE  1
BITLO2:
	RRC C				;ROTATE RIGHT TO RESTORE BYTE
	DEC A				;COUNT USING A
	JP NZ,BITLO2		
	LD A,C				;LOAD RESET BYTE
	LD (HL),A			;PUT IT BACK
	COPBUF TOPY,(LASTY),8		;RESTORE 8 BYTE  FROM TOPY TO (LASTY)
	LD A,(BBX)			;GET CORNER OF CATWALK FOR CLAIM
	LD BC,(PCEOFF)			;C=(BBX)-(PCEOFF)
	SUB C			
	LD (CCATX),A			;FOR CLAIM SUBROUTINE
	LD A,(BBY)			;B=(BBY)
	LD (CCATY),A			;FOR CLAIM SUBROUTINE
	ASIGN8. (CLAFLG),1		;FLAG FOR CLAIM SUBROUTINE

GOOD:	LD A,1				;(BBY)=(TOPY)
	JP GBX

BAD:	LD A,0

GBX:	LD (CATFLG),A

XCKCAT:
	RET	;END OF CKCAT
;
;****************************************************************************
;
;****************************************************************************

SETD6::
	LD B,0FFH		;USE AS COUNTER
	LD C,0			;RESULT
	LD D,0			;REMAINDER
	LD HL,D6TAB		;START AT D6TAB ADDRESS
LD6:
	LD (HL),C		;LOAD RESULT
	INC HL			;AND NEXT
	LD (HL),D		;REMAINDER
	INC HL			;READY FOR NEXT NUMBER
	DEC B			;SEE HOW MANY WE'VE DONE
	JP NZ,INCD6		;CONTINUE IF NOT ZERO
	RET			;ELSE GET OUT

INCD6:
	INC D			;INCREMENT REMAINDER	
	LD A,6			;COMPARE TO 6
	CP D			;  CONTINUE IF
	JP NZ,LD6		;    LESS THAN
	INC C			;ELSE INCREMENT RESULT
	LD D,0			;  AND RESET REMAINDER TO ZERO
	JP LD6			;CONTINUE

	;END OF SETD6

DIV6:
	LD B,0			;ZERO OUT B
	LD C,A			;PUT NUMBER IN C
	SLA C			;MULTIPLY C BY 2
	RL B			;PICK UP CARRY. WE NOW HAVE TABLE OFFSET
	LD HL,D6TAB		;TABLE ADDRESS
	ADD HL,BC		;ADD OFFSET
	LD A,(HL)		;RESULT INTO A
	INC HL			;REMAINDER
	LD B,(HL)		;  IN B
	RET	;END OF DIV6
;
;****************************************************************************
;	THIS ROUTINE ADDS AN ENTRY TO A GIVEN TABLE (ADDRESS IN HL)
;	THE TABLES USED ARE LADDER TABLE, SLIDE TABLE, AND TRANSPORTER
;	TABLE
;
;		REGISTER B  -  TOP X
;		REGISTER C  -  TOP Y
;		REGISTER D  -  BOTTOM X
;		REGISTER E  -  BOTTOM Y
;		REGISTER HL -  ADDRESS OF NEXT TABLE ENTRY
;
;	IF REGISTER D = 0 THEN IT IS ONLY A TWO ENTRY TABLE AND REGISTERS
;	D AND E ARE IGNORED
;****************************************************************************


ADDTAB::
	LD (HL),B			;LOAD INTO TABLE
	INC HL
	LD (HL),C		
	INC HL
	LD A,0				;IF D IS ZERO IT IS A 2-ENTRY ONLY
	CP D		
	JP NZ,ADD4	
	JP XADD

ADD4:	LD (HL),D
	INC HL
	LD (HL),E
	INC HL

XADD:	LD (HL),0
	RET	;END OF ADDTAB

;
;****************************************************************************
;	THIS ROUTINE ADDS AN ENTRY TO THE TREASURE TABLE
;
;		REGISTER A  -  POINTER TO MONSTER VALUE TABLE
;		REGISTER B  -  TOP X
;		REGISTER C  -  TOP Y
;		REGISTER D  -  BOTTOM X
;		REGISTER E  -  BOTTOM Y
;		REGISTER H  -  X DIMENSION
;		REGISTER L  -  Y DIMENSION
;
;****************************************************************************

ADDTSE::
	PUSH HL				;SAVE DIM'S
	LD HL,LASTSE			;POINTER ADDRESS
	PUSH BC				;SAVE LOW'S
	LD C,(HL)			;LOW BYTE AT POINTER PUT IT IN C
	INC HL				;HIGH BYTE
	LD B,(HL)			;PUT IN B
	LD H,B				;MOVE INTO HL FROM BC TAB ADD 
	LD L,C				;POINTED TO BY LASTSE
	POP BC				;RESTORE LOW'S
	LD (HL),A
	INC HL
	LD (HL),B			;LOAD INTO TABLE
	INC HL
	LD (HL),C		
	INC HL
	LD (HL),D
	INC HL
	LD (HL),E
	INC HL
	POP DE				;RESTORE DIM'S
	LD (HL),D
	INC HL
	LD (HL),E
	INC HL
	LD (HL),0			;SCORE COUNTER
	INC HL
	LD (HL),0			;(POSSIBLE) END-OF-TABLE
	LD B,H				;PUT ADDRESS OF NEXT TABLE ENTRY
	LD C,L				;IN BC
	LD HL,LASTSE			;GRAB POINTER ADDRESS
	LD (HL),C			;LOAD NEW ENTRY VALUE
	INC HL				;  FROM BC
	LD (HL),B			;    TO (HL)

	RET	;END ADDTSE
;
;****************************************************************************
;	THIS ROUTINE ADDS AN ENTRY TO THE MONSTER TABLE
;
;		REGISTER A  -  PRESENT X
;		REGISTER C  -  TOP Y
;		REGISTER D  -  LEFT X
;		REGISTER E  -  RIGHT X
;		REGISTER H  -  DIRECTION
;		REGISTER L  -  SPEED
;
;****************************************************************************


ADDMON::
	PUSH BC				;SAVE
	PUSH HL
	LD HL,LASMON			;POINTER ADDRESS
	LD C,(HL)			;LOW BYTE AT POINTER PUT IT IN C
	INC HL				;HIGH BYTE
	LD B,(HL)			;PUT IN B
	PUSH BC				;SAVE TEMPORARILY IN STACK
	POP IX				;WE NOW HAVE TABLE POINTER IN IX
	POP HL				;RESTORE FROM MACRO
	POP BC				;  A-OK
	LD (IX+0),1			;FLAG THAT IT IS ALIVE
	LD (IX+1),C			;TOP Y
	LD (IX+2),D			;LEFT X
	LD (IX+3),E			;RIGHT X
	LD (IX+4),A			;PRESENT X
	LD (IX+5),H			;DIRECTION
	LD (IX+6),L			;SPEED = PIXS / MOVE
;	    IX+7		INTERVAL COUNTER [SEE PUTMON]
;	    IX+8		WHERE SPTNUM GOES [SEE PUTMON]
	LD (IX+9),0			;MARK (POSSIBLE) END OF TABLE
	PUSH IX				;PUT IX IN HL
	POP HL		
	LD BC,9
	ADD HL,BC			;ADD 9 TO POINT TO NEXT ENTRY
	LD (LASMON),HL			;PUT BACK IN (LASMON)

	RET	;END OF ADDMON

;
;****************************************************************************
;	THIS ROUTINE ADDS AN ENTRY TO THE MOVING PLATFORM TABLE
;
;		REGISTER B  -  LEFT X
;		REGISTER C  -  RIGHT Y
;		REGISTER D  -  PRESENT X
;		REGISTER E  -  PRESENT Y
;		REGISTER H  -  PLATFORM SIZE
;		REGISTER L  -  PLATFORM SPEED
;
;****************************************************************************

ADDMPL::
	PUSH HL				;SAVE PLATFORM SIZE AND PLATFORM SPEED
	PUSH BC				;SAVE LEFT X AND RIGHT S

	LD HL,LASMPL			;POINTER ADDRESS
	LD C,(HL)			;LOW BYTE AT POINTER PUT IT IN C
	INC HL				;HIGH BYTE
	LD B,(HL)			;PUT IN B
	LD H,B				;MOVE INTO HL FROM BC TAB ADD 
	LD L,C				;POINTED TO BY LASMPL

	POP BC				;RESTORE LEFT X AND RIGHT X

	LD (HL),B			;LEFT X
	INC HL
	LD (HL),C			;RIGHT X
	INC HL

	LD (HL),0			;ZERO OUT PLATFORM DIRECTION
	INC HL

	LD (HL),D			;PRESENT X
	INC HL
	LD (HL),E			;PRESENT Y
	INC HL

	POP DE				;RESTORE PLATFORM SIZE AND SPEED

	LD (HL),D			;PLATFORM SIZE
	INC HL

	LD (HL),A			;INITIAL DIRECTION	
	INC HL

	LD (HL),E			;PLATFORM SPEED
	INC HL

	LD (HL),0			;(POSSIBLE) - END OF TABLE

	LD B,H				;PUT ADDRESS OF NEXT TABLE ENTRY
	LD C,L				;IN BC
	LD HL,LASMPL			;GRAB POINTER ADDRESS
	LD (HL),C			;LOAD NEW ENTRY VALUE
	INC HL				;  FROM BC
	LD (HL),B			;    TO (HL)

	RET	;END OF ADDMPL
;
;****************************************************************************
;	THIS ROUTINE ADDS AN ENTRY TO THE WALL / ROOF TABLE
;
;		REGISTER B  -  TOP X
;		REGISTER C  -  TOP Y
;		REGISTER D  -  BOTTOM X
;		REGISTER E  -  BOTTOM Y
;
;****************************************************************************

ADDWAL::
	PUSH BC				;SAVE TOP X AND TOP Y

	LD HL,LASWAL			;POINTER ADDRESS
	LD C,(HL)			;LOW BYTE AT POINTER PUT IT IN C
	INC HL				;HIGH BYTE
	LD B,(HL)			;PUT IN B
	LD H,B				;MOVE INTO HL FROM BC TAB ADD 
	LD L,C				;POINTED TO BY LASMPL

	POP BC				;RESTORE TOP X AND TOP Y

	LD (HL),B			;TOP X
	INC HL
	LD (HL),C			;TOP Y
	INC HL

	LD (HL),D			;BOTTOM X
	INC HL
	LD (HL),E			;BOTTOM Y
	INC HL

	LD (HL),0			;(POSSIBLE) - END OF TABLE

	LD B,H				;PUT ADDRESS OF NEXT TABLE ENTRY
	LD C,L				;IN BC
	LD HL,LASWAL			;GRAB POINTER ADDRESS
	LD (HL),C			;LOAD NEW ENTRY VALUE
	INC HL				;  FROM BC
	LD (HL),B			;    TO (HL)

	RET	;END OF ADDWAL
;
;****************************************************************************
;	THIS ROUTINE PUTS THE MONSTERS AS SPRITES ON THE SCREEN
;****************************************************************************

PUTMON::
;CREATES MONSTERS INITIALLY

	JP DOPTMN
	SPTNUM::	DB	0	;SPRITE NUMBER CREATED FOR SCREEN	
	MONX::		DB	0	;MONSTER X
	MONY::		DB	0	;MONSTER Y
	MONDIR::	DB	0	;MONSTER DIRECTION
	MONPAT::	DB	0	;INITIAL PATTERN
	MONINT::	DB	0	;INITIAL INTERVAL COUNT

DOPTMN:
	LD A,8			;
	LD (MSTCNT),A		;TOGGLE COUNTER=8 MOVE COUNTER=4
	ASIGN8. (MTOGGL),0	;RESET STEP TOGGLE
	ASIGN8. (MONINT),9		;START WITH 9, [DEC BY 1 FOR EACH]
	ASIGN8. (SPTNUM),32		;START WITH SPT 32 (DEC EACH TIME)
	LD HL,MONTAB			;STARTING ADDRESS OF MONSTER TABLE
MONTLP:					;MONSTER TABLE LOOP
	PUSH HL				;PUT HL
	POP IX				; IN IX
	LD A,(IX+0)			;VALUE. IF 0 THEN EOT
	AND A
	JP NZ,MAKEMO			;NON-ZERO GO CREATE
	JP XMTLP			; ELSE EXIT LOOP
MAKEMO:
	LD A,(SPTNUM)			;DECREMENT SPRITE NUMBER
	DEC A
	LD (SPTNUM),A
	SUB8. (MONINT),1		;DECREMENT INTERVAL BY 1 FOR EACH
	LD A,(IX+1)			;GET MONY
	LD (MONY),A
	LD A,(IX+4)			;GET MONX
	LD (MONX),A
	LD A,(IX+5)			;DIRECTION
	LD (MONDIR),A
	IF8. (MONDIR),.EQ.,1		;GO RIGHT
		ASIGN8. (MONPAT),0E4H
	ELSE.				;GO LEFT
		ASIGN8. (MONPAT),0DCH
	ENDIF.
	PCALL SPNAME,(SPTNUM),(MONPAT)
	PCALL SPCOL,(SPTNUM),MAGENTA
	PCALL SPMOVE,(SPTNUM),(MONY),(MONX)
	LD A,(IX+6)		;BASE 1 SPEED
	DEC A			;PRESENT SPEED=BASE+PREZON-1
	LD (MSTEPS),A		;
	ADD8. (MSTEPS),(PREZON)	;
	IF8. (MSTEPS),.GT.,6	;TOP SPEED OF 6
	  ASIGN8. (MSTEPS),6
	ENDIF.
	LD A,(MSTEPS)		;
	LD (IX+6),A		;PUT BACK

	LD A,(MONINT)			;INITIAL INTERVAL COUNT
	LD (IX+7),A			;PUT IT IN TABLE
	LD A,(SPTNUM)			;GRAB (SPTNUM) AND
	LD (IX+8),A			; PUT SPRITE NUMBER IN TABLE FOR REF.
	PUSH IX				;PUT IX INTO HL
	POP HL
	LD BC,9				;AND ADD 9
	ADD HL,BC			; TO GET NEXT ENTRY
	JP MONTLP			;CONTINUE LOOP
XMTLP:					;MONSTER TABLE LOOP EXIT

	RET	;END OF PUTMON
;
;****************************************************************************
;	THIS ROUTINE REMOVES THE MONSTERS FROM THE SCREEN
;****************************************************************************


NIXMON::
;MOVE ALL SPRITES OFF SCREEN
	ASIGN8. (MONX),0
	ASIGN8. (MONY),0C0H				;OFF SCREEN
	WHILE8. (SPTNUM),.LT.,32
		PCALL SPMOVE,(SPTNUM),(MONY),(MONX)
		ADD8. (SPTNUM),1
	ENDW.
	;GET RID OF ALL OF BB
	PCALL SPMARK,0

	RET	;END OF NIXMON

	END 	;END OF PROGRAM	

