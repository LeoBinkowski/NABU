;*****************************************************************
;*                                                               *
;*    FILE NAME:             SOUND.MAC  	                 *
;*                                                               *
;*    MODULE PART NO.: 73-90038680 NAME:  MINER 2049er 		 *
;*                                                               *
;*    FILE DESCRIPTION:                                          *  
;*                                                               *
;*	This module does the sound for Miner 2049er.             *
;*                                                               *
;*                                                               *
;*                                                               *
;*                                                               *
;*                                                               *
;*    PROGRAMMER: L. Binkowski, G. Adams (EXTREMELY little done) *
;*                                                               *
;*    ENVIRONMENT- Development Machine: NABU 1100, MCP 1.8       *
;*                                                               *
;*               - Assembler: MACRO-80                           *
;*                                                               *
;*                                                               *
;*****************************************************************
;*                                                               *
;*    REVISION HISTORY: (current first)                          *
;*                                                               *
;*    Rev.    Date       Created By         Revision Details     *
;*    ---  ----------  ---------------  -----------------------  *
;*                                                               *
;*    02   02 JUL 84	L. Binkowski	John's sound change req	 *
;*								 *
;*    01   22 MAY 84    L. Binkowski    Initial release to spec  *
;*                                                               *
;*****************************************************************
 		
	.Z80
	CSEG
	.RADIX 10

	INCLUDE ARITH.MRO
	INCLUDE STRUCT.MRO
	INCLUDE COMMON.MRO

EXTRN AUDIOWR,TIMER

;

SNDTCB:: DB 0,0,0,0,0,0
  
VOL_A	EQU	8	;VOLUME REGISTER FOR CHANNEL A
VOL_B	EQU	9	; " 	   "	  "	"    B	
VOL_C	EQU	10	; "	   "      "     "    C		

FINE_A	EQU	0	;FINE 8 BITE TUNE CHANNEL A
CORS_A	EQU	1	;COURSE 4 BIT TUNE CHANNEL A

FINE_B	EQU	2	;FINE AND COURSE FOR CHANNEL B	
CORS_B	EQU	3

FINE_C	EQU	4	;FINE AND COURSE FOR CHANNEL C
CORS_C	EQU	5

NOISE	EQU	6	;NOISE PERIOD REGISTER NUMBER

FINE_E	EQU	11	;ENVELOPE PERIOD...FINE AND COURSE
CORS_E	EQU	12	;REGISTER NUMBERS

SHAP_E	EQU	13	;REGISTER FOR ENVELOPE SHAP_E

SONG:		DB	0		;SONG FLAG

C1OVER:	DB	0		;COUNTER FOR GAME OVER
NAOVER:	DW	0		;NOTE ON A FOR GAME OVER

C1JUMP:	DW	0
NAJUMP:	DW	0


C1PRIZ:	DB	0		;COUNTER 
NAPRIZ:	DW	0		;NOTE ON A 

C1STAR:	DB	0		;COUNTER FOR START LEVEL FLASES LENGTH
C2STAR:	DB	0		;COUNTER FOR START LEVEL FLASHES

WPER:	DB	0		;WALKING PERIOD
WKCNT:	DB	0		;WALKING COUNTER
DO_HIW:	DB	0

SDICNT:	DB	0		;COUNTER FOR DYING SOUND
DIVOL:	DB	0		;VOLUME VARIABLE FOR DYING SOUND

RAPER:	DB	0		;PERIOD OF RADIOACTIVE SOUND
RACNT:	DB	0		;COUNTER FOR RADIOACTIVE SOUND

KILCNT:	DB	0
KILPER:	DB	0

BEAMCNT:DB	0
BEAMPTR:DW	0
BEAMVOL:DB	0
BEAMTON:DB	0

FLSHTM: DB	0
C1TIME:	DB	0
C2TIME:	DB	0
FTIME:		DB	0

C1BONU:	DB	0
F1BONU:	DB	0

C1KILL:	DB	0		;COUNTER FOR KILLING MONSTER SOUND


SNDFLG::		DB	0
SWALK::		DB 	00		;MINER WALKING
SCANN::					;SAME FOR CANNON (KILL THAT IS)
SKILL::   	DB 	00		;MINER KILLS MONSTER
SOVER::		DB	00		;GAME OVER
SSLIDE:: 	DB	00		;GOING DOWN SLIDE
STIME::		DB	00		;COUNT DOWN TIMER BEEPING
SJUMP::		DB	00		;MINER JUMPING
					;0001 = JUMP UP
					;0010 = UP-> DOWN
					;0100 = DOWN
					;1000 = CONTINUE

SPRIZE::	DB	00		;TAKING PRIZE
SSTART::  	DB	00		;ENTRY TO LEVEL
SPLAT::		DB	00		;BIT 7 SET = PLATFORM STOPPED
					;BIT 6 SET = PLATFORM DOWN
					;BIT 5 SET = PLATFORM UP
					;BIT 4 SET = PLATFORM LEFT AND RIGHT
					;	   = CANNON MOVE
	
SBONUS::	DB	00		;BONUS COUNTER *** NOT TURNED OFF HERE
SDIE::		DB	00		;MINER DIES
SRACTIVE::	DB	00		;MINER RADIOACTIVE
SBEAM::		DB	00		;TRANSPORTER
SCLEAR::	DB	0H		;CLEARING SCREEN SOUND FLAG


;*************************************************************************
;
;THE ABOVE FLAGS ARE USED BY THE GAME TASK IN CONTROLLING THE SOUNDS
;THEIR VALUES ARE UNIVERSAL
;
;0 = SOUND EFFECT OFF
;1 = START UP SOUND EFFECT
;2 = SOUND EFFECT UNDER WAY	(THIS VALUE IS SET BY THE SOUND ONLY)
;
;***THERE ARE EXCEPTIONS
;*********************************************************************


INITSND::
	
	LD HL,SONG		;FIRST OF THE FLAGS TO 0
	LD B,33			;NUMBER OF BYTES TO 0	
	
SINIT2:
	LD (HL),0
	INC HL			;ZERO ALL FLAGS (14 BYTES OF SEQUENTIAL DATA)
	DJNZ SINIT2	

	PCALL AUDIOWR,7,11011100		;TONE ON A,B  NOISE ON C
	CALL ALLOFF				;VOLUME ON A,B,C = 0
	RET					;RETURN TO GAME



;***********************************************************************
;
;ROUTINE NAME : SOUND
;
;
;	this routine handles the execution of the sounds for the 
;	game miner 2049.....it is executed by it's own task and
;	communicates with the game task through a series of flags.
;
;*** AT THE START OF THE GAME --SNDINIT-- MUST BE CALLED TO SET
;*** SET UP THE SOUND CHIP AS REQUIRED
;
;FROM THERE ON THE ONLY THING CALLED BY THE GAME IS THE TASK
;SOUND WHICH IS HANDLED BY THE TASK HANDLER AND NEED NOT BE CALLED
;BY THE MAIN GAME PROGRAM
;
;	-this routine monitors all of the 
;	flags defined in this module and descides on the required
;	action...it calls smaller individual routines for each of the 
;	sounds
;
;THE PRIORITY OF THE SOUNDS IS
;
;	GAMEOVER
;	DONE LEVEL
;	START LEVEL
;	BONUS COUNTER
;	FREE MAN
;	DYING
;	KILL	
;	PRIZE
;	THUD
;	TRANSPORTER
;	CANNON SHOT
;   	FALLING
;	JUMPING
;	SLIDE				
;					these are all contolled by
;	PLAT. STOP		7}	splat   where the regular values
;	PLAT. DOWN		6}	apply as well as the bits indicated
;  	PLAT. UP		5}	here being set	
;	PLAT. LEFT		4}$	(0,1..reserved for universal)
;	CANNON MOVE		4}$	

;	OUT OF TIME
;	WALK
;
;
;SONG IS USED TO INDICATE IF WE ARE PLAYING MUSIC....IE
;IF WHILE EXAMINING ALL THE FLAGS WE FIND THE HIGHEST PRIORITY SOUND
;TO BE PLAYING THEN SONG IS SET TO 1 INDICATING TO ALL SUBSEQUENT
;SOUNDS THAT A HIGHER PRIORITY SOUND IS BEING PLAYED
;
;NOTICE THE ORDER IN WHICH THE FLAGS ARE TESTED...THE TESTING
;IS IN THE ORDER OF HIGHEST TO LOWEST PRIORITY...THE LOWEST BEING TESTED
;LAST
;  
;***********************************************************************


SOUND::				;TASK CALL LABEL
				;THE TASK CONTROL BLOCK MUST USE THIS AS THE
				;TASK NAME.

	
	ASIGN8.(SONG),0		;INDICATE WE ARE PLAYING NO SOUNDS
				;THIS WILL ALTERED IF SOUND IS PALYING BY
				;THE INDIVIDUAL ROUTINES 
	LD A,(SNDFLG)
	AND A			;IF <> 0	(IF SOUND PLAYING) THEN
	JP Z,INITSND		;EXIT THE TASK


SOUND2:			;MONITOR ALL THE FLAGS	


	LD A,(SOVER)		;GET FLAG
	AND A			;IF <> 0
	CALL NZ,S_OVER		;THEN DO SOUND

	LD A,(SCLEAR)
	AND A
	CALL NZ,S_CLEAR		;WE GO HERE BUT ACTUALLY DO SOMETHING ELSE.
	
	LD A,(SJUMP)		;GET FLAG
	AND A			;IF <> 0
	CALL NZ,S_JUMP		;THEN DO SOUND

	LD A,(SBONUS)		;GET FLAG
	AND A			;IF <> 0
	CALL NZ,S_BONU		;THEN DO BONUS SOUND

	LD A,(SDIE)		;GET FLAG
	AND A			;IF <> 0
	CALL NZ,S_DIE		;THEN DO DIE SOUND

	LD A,(SRACTIVE)		;GET FLAG
	AND A			;IF <> 0 
	CALL NZ,S_RACTIVE	;THEN DO RADIOACTIVE SOUND

	LD A,(SKILL)		;GET FLAG
	AND A			;IF <> 0
	CALL NZ,S_KILL		;THEN DO KILL MONSTER SOUND

	LD A,(SPRIZE)		;GET FLAG
	AND A			;IF <> 0
	CALL NZ,S_PRIZ		;THEN DO PRIZE SOUND
	
	LD A,(SBEAM)		;GET FLAG
	AND A			;IF <> 0 
	CALL NZ,S_BEAM		;THEN DO BEAMING SOUND

	LD A,(SPLAT)		;GET FLAG
	AND A			;IF <> 0
	CALL NZ,S_PLAT		;THEN DO SOUND

	LD A,(STIME)		;GET FLAG
	AND A			;IF <> 0
	CALL NZ,S_TIME		;THEN DO SOUND

	LD A,(SWALK)		;GET FLAG
	AND A			;IF <> 0
	CALL NZ,S_WALK		;THEN DO SOUND
	
	LD A,(SSTART)
	AND A
	CALL	NZ,S_STAR
SEXIT:
	LD A,(SPLAT)		;IF NO LIFT, BONUS, OR PRIZE
	LD BC,(SBONUS)
	OR C			;THEN NO SOUND ON A
	LD BC,(SPRIZE)
	OR C
	LD BC,(SSTART)
	OR C
	LD BC,(STIME)
	OR C
	LD BC,(SOVER)
	OR C
	JR NZ,S1EX
	;
	PCALL	AUDIOWR,VOL_A,0
S1EX:
	LD A,(SJUMP)
	LD BC,(SDIE)
	OR	C		;IF NO JUMP, DIE, LIFT, OR TRANSPORTER
	LD BC,(SPLAT)
	OR	C		;THEN NO SOUND ON B
	LD BC,(SBEAM)
	OR	C
	LD BC,(SOVER)
	OR C
	LD BC,(SCLEAR)
	OR C
	JR	NZ,S2EX		;ONLY B
	;
	PCALL	AUDIOWR,VOL_B,0	;CLEAR SOUND IF NOT THERE
S2EX:
	LD A,(SWALK)		;NOW HOW ABOUT THE WALK AND RADIOACTIVE
	LD BC,(SRACTIVE)
	OR	C
	LD BC,(SKILL)		;AND THE KILLING OF THE MONSTERS
	OR	C
	LD BC,(SDIE)		;AND THE DYING OF OUR HERO
	OR	C
	JR	NZ,S3EX
	;
	PCALL	AUDIOWR,VOL_C,0	;CLEAR NOISE IF NOT THERE
S3EX:
	RET


;**************************************************************************
;
;PUTNOT:
;
;D = COURSE TUNE (4 bits)		C = CHANNEL REGISTER # 0,2,4,6
;E = FINE TUNE (8 bits)				6--->NOISE FOR C CHANNEL
;
;
;ALLOFF:
;		turns the volume on all three channels to 0
; 
;***************************************************************************
;

ALLOFF:
	PCALL AUDIOWR,VOL_A,0
	PCALL AUDIOWR,VOL_B,0
	PCALL AUDIOWR,VOL_C,0

	RET


PUTNOT:

	PUSH BC			;SAVE CHANNEL REGISTER NUMBER
	PUSH DE			;SAVE NOTE
	LD D,0			;CLEAR COURSE TUNE FROM NOTE

	CALL AUDIOWR		;WRITE FINE TUNE  TO REGISTER BC

	POP DE			;RESTORE NOTE
	POP BC			;RESTORE CHANNEL REGISTER NUMBER
	
	LD A,C			;GET REGISTER NUMBER
	CP 6			;ARE WE UPDATING THE NOISE
	RET Z			;IF SO THEN WE CAN ONLY UPDATE THAT ONE 
				;REGISTER
	
;SINCE THE CALLING ROUTINE IS UPDATING A TONE THEN WE MUST NOW UPDATE
;THE NEXT SEQUENTIAL REGISTER WITH THE COURSE TUNE

	INC BC			;INCREMENT REGISTER NUMBER TO PT TO NEXT
				;SEQUENTIAL REGISTER 
	LD A,D			;GET COURSE TUNE 
	LD E,A			;PLACE IN E
	LD D,0			;CLEAR D
	
	CALL AUDIOWR		;UPDATE THE NOTE IN THE COURSE TUNE REGISTER
	
	RET

;***************************************************************************
;S_OVER :	THIS PLAYS THE SOUND FOR THE GAME OVER MESSAGE
;
;
;AUDED : TOA AA14 PA30 TOB AB8 PB4000 LA PA20+ WT1 GA50 S
;
;C1OVER - COUNTER USED
;T1OVER - VARIABLE USED TO KEEP TRACK OF NOTE
;***************************************************************************
;

S_OVER:

;	LD A,(SONG)
;	AND A			;IF ANOTHER SONG PLAYING
;	RET NZ			;THEN RETURN

	LD A,(SOVER)		;GET FLAG
	BIT 0,A			;ARE WE JUST STARTING
	JP Z,S2_OVER		;NO SO CONTINUE TO PLAY
	
				;WE ARE JUST STARTING THIS SOUND UP SO
				;WE MUST RESET THE TONES ON THE CHANNELS

	ASIGN8.(SOVER),2	;INDICATE THAT NEXT TIME WE WILL CONTINUE
				;TO PLAY
 
	ASIGN8.(C1OVER),0	;RESET THE COUNTER
	ASIGN16.(NAOVER),0030	;RESET THE NOTE TO BE PLAYED

;	CALL ALLOFF			;* TURN VOL ON ALL 3 CHANNELS TO 0
	PCALL AUDIOWR,VOL_A,14		;* VOLUME ON B = 8
	PCALL AUDIOWR,VOL_B,08
	PCALL AUDIOWR,FINE_B,0A0H
	PCALL AUDIOWR,CORS_B,00FH	;* WRITE NOTE OF 4000 TO CHANNEL B

	
S2_OVER:			;WE ARE CONTINUING TO PLAY THE MUSIC

;	ASIGN8.(SONG),1		;INDICATE AN EFFECT IS NOW ENGAGED
	PCALL PUTNOT,FINE_A,(NAOVER)		;WRITE NAOVER TO CHANNEL A
	
	ADD16.(NAOVER),15	;PA+20
	
	LD A,(C1OVER)
	ADD A,1
	LD (C1OVER),A
	CP 50
	RET NZ

				;--- WE ARE DONE DOING THIS EFFECT 
	ASIGN8.(SOVER),0	
;	CALL ALLOFF		;PLACE ALL VOLUMES BACK TO 0 
	
	RET


;***************************************************************************
;S_START:	THIS PLAYS THE SOUND FOR THE START OF GAME /FREE MAN
;
;
;AUDED : TOA AA14 LA PA300 WT30 PA600 WT30 GA2 S
;
;C1STAR - COUNTER USED FOR TIME BETWEEN FLASHES
;C2STAR - COUNTER FOR THE NUMBER OF FLASHES TO DO
;NASTAR - VARIABLE USED TO KEEP TRACK OF NOTE
;***************************************************************************
;

S_STAR:

	LD A,(SSTART)		;GET FLAG
	BIT 2,A
	JR NZ,BOOPIN
	BIT 0,A			;ARE WE JUST STARTING
	JP Z,S2_STAR		;NO SO CONTINUE TO PLAY
	ASIGN8. (FLSHTM),30
	ASIGN8.	(STIME),0
	JR BOOP2IN
				;WE ARE JUST STARTING THIS SOUND UP SO
				;WE MUST RESET THE TONES ON THE CHANNELS
BOOPIN:
	ASIGN8. (FLSHTM),15
BOOP2IN:
	ASIGN8.(SSTART),2	;INDICATE THAT NEXT TIME WE WILL CONTINUE
				;TO PLAY
 
	LD A,0
	LD (C1STAR),A
	LD (C2STAR),A

	PCALL AUDIOWR,VOL_A,14		;* VOLUME ON B = 8
S2_STAR:			;WE ARE CONTINUING TO PLAY THE MUSIC

	
	LD A,(C2STAR)
	BIT 0,A			;IF BIT 0 IS SET THEN
	JP NZ,S3_STAR		;FLASH WITH PERIOD OF 600
  
	PCALL PUTNOT,FINE_A,300		;FLASH WITH 300
	JP S4_STAR

S3_STAR:

	PCALL PUTNOT,FINE_A,600		;FLASH WITH 600
	
S4_STAR:

	
	LD A,(C1STAR)
	ADD A,1
	LD (C1STAR),A
	LD BC,(FLSHTM)
	CP C
	RET NZ

	ASIGN8.(C1STAR),0		;RESET THE TIMER
	LD A,(C2STAR)		;GET NUMBER OF FLASHES COUNTER
	ADD A,1
	LD (C2STAR),A
	CP 6		;IF COUNTER NOT YET UP
	RET NZ		;THEN RETURN AND CONTINUE TO PLAY THIS EFFECT

			;DONE DOING THIS EFFECT
	ASIGN8.(SSTART),0	;CLEAR IDICATION FLAG
;	CALL ALLOFF		;PLACE ALL VOLUMES BACK TO 0 
	
	RET

;***************************************************************************
;S_BONU:	THIS PLAYS THE SOUND FOR THE BONUS TIMER COUNTDOWN
;
;
;
;C1BONU - COUNTER USED FOR TIME BETWEEN FLASHES
;F1BONU - COUNTER FOR THE NUMBER OF FLASHES TO DO
;***************************************************************************
;

S_BONU:

;	LD A,(SONG)
;	AND A			;IF ANOTHER SONG PLAYING
;	RET NZ			;THEN RETURN

	LD A,(SBONUS)		;GET FLAG
	BIT 0,A			;ARE WE JUST STARTING
	JP Z,S2_BONU		;NO SO CONTINUE TO PLAY
	
				;WE ARE JUST STARTING THIS SOUND UP SO
				;WE MUST RESET THE TONES ON THE CHANNELS

	ASIGN8.(SBONUS),2	;INDICATE THAT NEXT TIME WE WILL CONTINUE
				;TO PLAY
 
	LD A,0
	LD (C1BONU),A
	LD (F1BONU),A
	
	ASIGN8. (SWALK),0		;CLEAR THE WALKING SOUND
;	CALL ALLOFF			;* TURN VOL ON ALL 3 CHANNELS TO 0
	PCALL AUDIOWR,VOL_A,15		;* VOLUME ON B = 8
	
S2_BONU:			;WE ARE CONTINUING TO PLAY THE MUSIC

;	ASIGN8.(SONG),1
	IF8. (F1BONU),.EQ.,0

        	PCALL PUTNOT,FINE_A,500
	ELSE.
		PCALL PUTNOT,FINE_A,000
	ENDIF.

	LD A,(C1BONU)
	INC A 
	LD (C1BONU),A
	CP 2
	RET NZ
	
	XOR A
	LD (C1BONU),A

	LD A,(F1BONU)
	XOR 1
	LD (F1BONU),A

	RET

		
;***************************************************************************
;S_TIME:	THIS PLAYS THE SOUND FOR THE GAME OVER MESSAGE
;
;
;
;
;C1TIME - COUNTER USED FOR TIME BETWEEN FLASHES
;C2TIME - COUNTER FOR THE NUMBER OF FLASHES TO DO
;NATIME - VARIABLE USED TO KEEP TRACK OF NOTE
;***************************************************************************
;

S_TIME:

	LD A,(SBONUS)		;IF THE BONUS SOUND IS RUNNING, THEN DON'T
	AND	A		;RUN THIS.
	RET	NZ
STCN1:
	LD A,(STIME)		;GET FLAG
	CP 2			;ARE WE JUST STARTING
	JP Z,S2_TIME		;NO SO CONTINUE TO PLAY
	
				;WE ARE JUST STARTING THIS SOUND UP SO
				;WE MUST RESET THE TONES ON THE CHANNELS

	ASIGN8.(STIME),2	;INDICATE THAT NEXT TIME WE WILL CONTINUE
				;TO PLAY
 
	LD A,(TIMER)
	LD (C2TIME),A		;OLD COPY OF TIMER
	INC A
	LD (C1TIME),A		;COUNTER USED HERE

	ASIGN8.(FTIME),0	;CLEAR FLAG

;	CALL ALLOFF			;* TURN VOL ON ALL 3 CHANNELS TO 0
	PCALL AUDIOWR,VOL_A,14		;* VOLUME ON B = 8
	
S2_TIME:			;WE ARE CONTINUING TO PLAY THE MUSIC


	IF8. (C2TIME),.NE.,(TIMER)	;IF THE TIMER HAS CHANGED IN GAME
	THEN.

		
	   LD A,(TIMER)
	   LD (C1TIME),A
   	   INC A
	   LD (C2TIME),A			;SET TO NEW TIME

	ENDIF.

	IF8. (FTIME),.EQ.,0	;IF FTIME = 0
	THEN.

	   PCALL PUTNOT,FINE_A,700

	ELSE.

	   PCALL PUTNOT,FINE_A,000

	ENDIF.

	ASIGN8.(SONG),1	
	LD A,(C1TIME)		;DEC ARE DELAY COUNTER
	DEC A
	LD (C1TIME),A
	RET NZ

;THE DELAY TIMER IS UP

	LD A,(FTIME)
	NEG
	ADD A,1
	LD (FTIME),A		;FLIP FROM 0 TO 1  OR 1 TO 0
	
	LD A,(TIMER)
	INC A
	LD (C1TIME),A
		
	RET

;***************************************************************************
;S_PRIZ :	THIS PLAYS THE SOUND FOR THE TAKING THE TREASURE (PRIZE)
;
;
;AUDED : TOA AA14 PA10 LA PA40+ WT1 GA30 S
;
;C1PRIZ - COUNTER USED
;T1PRIZ - VARIABLE USED TO KEEP TRACK OF NOTE
;***************************************************************************
;

S_PRIZ:

;	LD A,(SONG)
;	AND A			;IF ANOTHER SONG PLAYING
;	RET NZ			;THEN RETURN

	LD A,(SPRIZE)		;GET FLAG
	BIT 0,A			;ARE WE JUST STARTING
	JP Z,S2_PRIZ		;NO SO CONTINUE TO PLAY
	
				;WE ARE JUST STARTING THIS SOUND UP SO
				;WE MUST RESET THE TONES ON THE CHANNELS

	ASIGN8.(SPRIZE),2	;INDICATE THAT NEXT TIME WE WILL CONTINUE
				;TO PLAY
 
	ASIGN8.(C1PRIZ),0	;RESET THE COUNTER
	ASIGN16.(NAPRIZ),0010	;RESET THE NOTE TO BE PLAYED

;	CALL ALLOFF			;* TURN VOL ON ALL 3 CHANNELS TO 0
	PCALL AUDIOWR,VOL_A,14		;* VOLUME ON A=14  
	
S2_PRIZ:			;WE ARE CONTINUING TO PLAY THE MUSIC

	ASIGN8.(SONG),1		;INDICATE AN EFFECT IS NOW ENGAGED
	PCALL PUTNOT,FINE_A,(NAPRIZ)		;WRITE NAOVER TO CHANNEL A
	
	ADD16.(NAPRIZ),40	;PA+40
	
	LD A,(C1PRIZ)
	ADD A,1
	LD (C1PRIZ),A
	CP 30
	RET NZ

				;--- WE ARE DONE DOING THIS EFFECT 
	ASIGN8.(SPRIZE),0	
	PCALL AUDIOWR,VOL_A,0	;ONLY THIS TUNE
;	CALL ALLOFF		;PLACE ALL VOLUMES BACK TO 0 
	
	RET

;***************************************************************************
;S_JUMP :	THIS PLAYS THE SOUND FOR THE SLIDING
;		/JUMPING/FALLING	
;
;
;
;C1JUMP - COUNTER USED
;NAJUMP - NOTE
;***************************************************************************
;

S_JUMP:

;	LD A,(SONG)
;	AND A			;IF ANOTHER SONG PLAYING
;	RET NZ			;THEN RETURN

	LD A,(SJUMP)
	BIT 3,A			;IF BIT 3 SET 
	JP NZ,S2_JUMP		;CONTINUE TO PLAY 
	BIT 1,A			;IF BIT 1 SET
	JP NZ,SUPDWN		;DO MERGE FROM UP TO DOWN

;WE ARE JUST STARTING UP OR DOWN (FALL)

	ASIGN16.(C1JUMP),2		;SET TO DOWN SOUND
	ASIGN16.(NAJUMP),200
;	CALL ALLOFF
	PCALL AUDIOWR,VOL_B,15
	
	LD A,(SJUMP)
	BIT 2,A
	JP NZ,S2_JUMP		;YES WE ARE DOING START DOWN SO CONTIN.

;WE ARE ACTUALLY DOING THE START UP

	ASIGN16.(C1JUMP),-2
	JP S2_JUMP

SUPDWN:				;DO MERGE BY NEGATING C1JUMP TO +4
	ASIGN16.(C1JUMP),2	;DOWN NOW
	ASIGN8.(SJUMP),8

S2_JUMP:
	
	ASIGN8.(SJUMP),8
	ASIGN8.(SONG),1
	PCALL PUTNOT,FINE_B,(NAJUMP)
	ADD16.(NAJUMP),(C1JUMP)
	PCALL AUDIOWR,VOL_B,15
	RET

S_CLEAR:
	LD A,(SCLEAR)
	BIT 0,A
	JR NZ,SETCLEAR
S2_CLEAR:
	PCALL PUTNOT,FINE_B,(NAJUMP)
	ADD16. (NAJUMP),(C1JUMP)
	PCALL AUDIOWR,VOL_B,15
	RET
SETCLEAR:
	ASIGN16. (C1JUMP),-2
	ASIGN16. (NAJUMP),300
	ASIGN8. (SCLEAR),8
	ASIGN8.	(SJUMP),0
	LD	(SWALK),A
	LD	(SKILL),A
	JP S2_CLEAR


;***************************************************************************
;S_KILL :	THIS PLAYS THE SOUND FOR THE KILLING A MONSTER
;
;
;AUDED : NOA AA16 PN31 PE10000 CE4 S
;
;C1KILL		;COUNTER TO WAIT FOR SUCTION TO FINISH
;
;***************************************************************************
;

S_KILL:
	LD A,(SKILL)
	CP 1		;SEE IF WE SHOULD INITIALIZE THIS SOUND
	CALL Z,SINIKILL
	;
	LD A,(KILPER)
	AND A
	JR Z,STOPKILL
	;
	LD A,(KILCNT)	;GET THE COUNTER
	AND A
	JR Z,SETKCNT	;IF ZERO RESET IT, AND DECREMENT THE SOUND
	;
	DEC8. (KILCNT)
WRITKILL:
	PCALL AUDIOWR,VOL_C,12	;SET THE VOLUME
	PCALL AUDIOWR,6,(KILPER)	;SET THE PERIOD
	;
	RET
	;
SINIKILL:
	ASIGN8. (SKILL),2
	ASIGN8. (KILPER),31
	ASIGN8. (KILCNT),5
	RET
STOPKILL:
	ASIGN8. (SKILL),0
SETKCNT:
	ASIGN8. (KILCNT),5
	DEC8. (KILPER)
	JR	WRITKILL
;
;
;	LD A,(SONG)
;	AND A			;IF ANOTHER SONG PLAYING
;	RET NZ			;THEN RETURN

;	LD A,(SKILL)		;GET FLAG
;	BIT 0,A			;ARE WE JUST STARTING
;	JP Z,S2_KILL		;NO SO CONTINUE TO PLAY
	
;				;WE ARE JUST STARTING THIS SOUND UP SO
;				;WE MUST RESET THE TONES ON THE CHANNELS

;	ASIGN8.(SKILL),2	;INDICATE THAT NEXT TIME WE WILL CONTINUE
				;TO PLAY
 
;	ASIGN8.(C1KILL),0	;RESET THE COUNTER

;	CALL ALLOFF			;* TURN VOL ON ALL 3 CHANNELS TO 0
;	PCALL AUDIOWR,VOL_C,16		;* VOLUMME ON A=16 (ENVELOPE ACTIVE)


;	PCALL AUDIOWR,NOISE,31		;PN 31
;	PCALL PUTNOT,FINE_E,6000	;PERIOD NOTE = 10,000
;	PCALL AUDIOWR,SHAP_E,4		;ENVELOPE SHAP_E = 4

;S2_KILL:			;WE ARE CONTINUING TO PLAY THE MUSIC

;	ASIGN8.(SONG),1		;INDICATE AN EFFECT IS NOW ENGAGED
	
;	LD A,(C1KILL)
;	ADD A,1
;	LD (C1KILL),A
;	CP 250
;	RET NZ

				;--- WE ARE DONE DOING THIS EFFECT 
;	ASIGN8.(SKILL),0	
;	CALL ALLOFF		;PLACE ALL VOLUMES BACK TO 0 
	
	RET


;***************************************************************************
;S_PLAT :	THIS PLAYS ALL THE SOUNDS FOR THE MOVING PLATFORM (ELEVAT)
;		GREG IS FOOLISH: ACTUALLY HE'S SPEAKING OF THE HYDRAULIC LIFT.
;				THIS ALSO DOES CANNON LEFT OR RIGHT
;
;AUDED 	STOP: TOB TOA AA15 AB15 PA4000 PB3500 
;	UP  :  "   "   "    "   PA600  PB1900
;	LEFT:  "   "   "    "   PA1000 PB2500      
;
;
;NOTES :   the flag splat  unlike the other sound flags has multiple
;          meaning as described at the top of this file.
;
;	    	
;***************************************************************************
;

S_PLAT:

;	LD A,(SONG)
;	AND A			;IF ANOTHER SONG PLAYING
;	RET NZ			;THEN RETURN

	LD A,(SPLAT)		;GET FLAG
	CP 2			;ARE WE ALREADY PLAYINFG
	JP Z,S2_PLAT		;NO SO CONTINUE TO PLAY
	

;	CALL ALLOFF
	PCALL AUDIOWR,VOL_A,15
	PCALL AUDIOWR,VOL_B,15
	
	LD A,(SPLAT)
	BIT 7,A			;IF BIT 7 SET
	JP NZ,P_STOP		;THEN DO PLATFORM STOP SOUND
	BIT 6,A			;IF BIT 6 SET THEN
	JP NZ,P_DOWN		;DO PLATFORM DOWN SOUND
	BIT 5,A			;IF BIT 5 SET THEN
	JP NZ,P_UP		;PLATFORM UP SOUND

;DEFAULT TO DO CANNON LEFT RIGHT (PLAT LEFT RIGHT)

				;CANNON MOVING OR PLATFORM LEFT AND RIGHT
	PCALL PUTNOT,FINE_A,1500
	PCALL PUTNOT,FINE_B,2500
	JP S2_PLAT

P_STOP:			;PLATFORM STOPPED SOUND 
	PCALL PUTNOT,FINE_A,4000
	PCALL PUTNOT,FINE_B,3500
	JP S2_PLAT


P_DOWN:			;PLATFORM DOWN SOUND
	PCALL PUTNOT,FINE_A,1000
	PCALL PUTNOT,FINE_B,2500
	JP S2_PLAT

P_UP:				;PLATFORM UP SOUND
	PCALL PUTNOT,FINE_A,600 
	PCALL PUTNOT,FINE_B,1900

S2_PLAT:
	ASIGN8.(SPLAT),2	;INDICATE THAT NEXT TIME WE WILL CONTINUE
				;TO PLAY
	ASIGN8.(SONG),1		;INDICATE AN EFFECT IS NOW ENGAGED
	
	RET
S_WALK:
	;	THIS ROUTINE WILL DO THE SOUND FOR THE WALKING
	;
	;	AUTHOR: LEO BINKOWSKI MAY 14/84
	;
	LD	A,(SKILL)	;IF BOOM, THEN STOP FEET
	AND	A
	RET	NZ
	LD	A,(DO_HIW)	;SEE IF WE DO THE HIGHER OR DA LOWER
	AND	A
	JR	NZ,HI_WALK	;YES....THEN HIGHER
	;
	LD	A,(WKCNT)	;CHECK THE COUNTER
	AND	A
	JR	Z,SETLOW
	;
LO_WALK:LD	A,(WPER)	;GET THE NOISE PERIOD
	ADD	A,3		;MAKE THE SOUND LOWER
	LD	(WPER),A
	JR	RETWALK		;RETURN FROM WALKING
	;
HI_WALK:LD	A,(WKCNT)
	AND	A
	JR	Z,SETHIW
	;
	LD	A,(WPER)
	SUB	3
	LD	(WPER),A
RETWALK:
	LD	A,(WKCNT)
	DEC	A
	LD	(WKCNT),A
	PCALL	AUDIOWR,6,(WPER)	;MODULATE THE FREQUENCY
	PCALL	AUDIOWR,10,12		;SET THE AMPLITUDE
	ASIGN8.	(SONG),1
	RET
SETLOW:
	LD	A,1		;SET THE FLAG
	LD	(DO_HIW),A
	LD	A,10		;RESET THE COUNTER
	LD	(WKCNT),A
	LD	A,31
	LD	(WPER),A	;RESET THE FREQUENCY
	JR	HI_WALK
SETHIW:
	XOR	A
	LD	(DO_HIW),A
	LD	(WPER),A
	LD	A,6
	LD	(WKCNT),A
	JR	LO_WALK
;
;
S_DIE:
	;THIS ROUTINE DOES THE DYING SOUND FOR BOUNTY BOB
	;
	ASIGN8.	(SRACTIVE),0
	LD	A,(SDIE)
	CP	2
	JR	Z,CDIE
	XOR	A		;TURN OFF RADIOACTIVE SOUND
	LD	(SJUMP),A	;JUMP SOUND
	LD	(SDICNT),A	;AND SET THE TIMER
	ASIGN8.	(SDIE),2
	PCALL	PUTNOT,FINE_B,09FFH	;PUT A NICE LOW SOUND IN
	;
	PCALL	AUDIOWR,6,29		;AND A NOISE
	PCALL	AUDIOWR,10,16
	PCALL	AUDIOWR,9,16		;NOW VOLUME (WITH ENVELOPE)
	PCALL	AUDIOWR,11,98H
	PCALL	AUDIOWR,12,3AH		;AND THE ENVELOPE PERIOD
	PCALL	AUDIOWR,13,0
	RET
CDIE:
	INC8.	(SDICNT)
	LD	A,(SDICNT)
	CP	120
	RET	NZ			;RETURN IF SOUND IS NOT FINISHED
	ASIGN8.	(SDIE),0		;OTHERWISE KILL IT.
	RET
;
S_RACTIVE:
	; THIS ROUTINE WILL GENERATE THE SOUND FOR BOB BEING RADIOACTIVE
	;
	LD 	A,(RACNT)
	AND	A
	PUSH	AF
	PCALL	AUDIOWR,VOL_C,12
	PCALL	AUDIOWR,6,(RAPER)
	POP	AF
	JR	Z,SETPER
	;
	DEC	A
	LD	(RACNT),A
	RET
SETPER:
	IF8.	(RAPER),.EQ.,31
	  ASIGN8. (RAPER),10
	ELSE.
	  ASIGN8. (RAPER),31
	ENDIF.
	ASIGN8.	(RACNT),6
	RET
S_BEAM:
	;THIS ROUTINE WILL DO THE SOUND FOR TRANSPORTING BOB.
	;
	;	AUTHOR: LEO BINKOWSKI MAY 15/84
	;
	LD	A,(SBEAM)	;GET THE BEAM FLAG
	CP	1		;IS IT STARTING TO DEMATERIALIZE?
	CALL	Z,SETDEMAT	;YES...INITIALIZE THE DEMATERIALIZATION
	;
	LD	A,(SBEAM)
	CP	2		;IS IT STARTING TO MATERIALIZE?
	CALL	Z,SETMATER	;YES...INITIALIZE THE MATERIALIZATION SOUND
	;
	LD	A,(SBEAM)	
	CP	3		;IN THE MIDDLE OF DEMATERIALIZATION?
	JP	Z,SDEMATR
	;
SMATER:
	;HERE WE ACTUALLY DO THE MATERIALIZING SOUND
	CALL	BRUNTHRU	;RUN THROUGH THE FUNNY TONES
	LD	A,(BEAMCNT)	;CHECK FOR END OF SET
	AND	A
	RET	NZ
	ASIGN16. (BEAMPTR),FIRSTONE
	ASIGN8.  (BEAMCNT),6
	INC8.	(BEAMVOL)
	CP	15		;HAVE WE DONE 10 YET?
	JR	Z,STOPBEAM	;YES...THEN STOP THIS
	;
	RET
	;
SDEMATR:
	;HERE WE DO THE DEMATERIALIZING SOUND
	;
	CALL	BRUNTHRU
	LD	A,(BEAMCNT)
	AND	A
	RET	NZ
	ASIGN16. (BEAMPTR),FIRSTONE
	ASIGN8. (BEAMCNT),6
	DEC8.	(BEAMVOL)
	CP	5
	JR	Z,STOPBEAM
	RET
STOPBEAM:
	ASIGN8.	(SBEAM),0
	RET
BRUNTHRU:
	LD	HL,(BEAMPTR)	;GET THE POINTER TO THE DATA
	LD	A,(HL)		;GET THE VALUE THERE
	LD	(BEAMTON),A
	INC	HL
	LD	(BEAMPTR),HL
	DEC8.	(BEAMCNT)
	PCALL	AUDIOWR,FINE_B,(BEAMTON)
	PCALL	AUDIOWR,CORS_B,0	
	PCALL	AUDIOWR,VOL_B,(BEAMVOL)
	RET
SETMATER:
	ASIGN16. (BEAMPTR),FIRSTONE
	ASIGN8.	(BEAMCNT),6
	ASIGN8.	(BEAMVOL),5
	ASIGN8. (SBEAM),4
	RET
SETDEMAT:
	ASIGN16. (BEAMPTR),FIRSTONE
	ASIGN8.	(BEAMCNT),6
	ASIGN8.	(BEAMVOL),15
	ASIGN8.	(SBEAM),3
	RET
FIRSTONE:
	DB	25,150,75,125,50,100
ENDTONE:
	END
