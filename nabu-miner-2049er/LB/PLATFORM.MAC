;*****************************************************************
;*                                                               *
;*    FILE NAME:             PLATFORM.MAC  	                 *
;*                                                               *
;*    MODULE PART NO.: 73-90038680 NAME:  MINER 2049er 		 *
;*                                                               *
;*    FILE DESCRIPTION:                                          *  
;*                                                               *
;*      This file will do the platforms for miner 2049er	 *
;*                                                               *
;*                                                               *
;*                                                               *
;*                                                               *
;*                                                               *
;*    PROGRAMMER: L. Binkowski                                   *
;*                                                               *
;*    ENVIRONMENT- Development Machine: NABU 1100, MCP 1.8       *
;*                                                               *
;*               - Assembler: MACRO-80                           *
;*                                                               *
;*                                                               *
;*****************************************************************
;*                                                               *
;*    REVISION HISTORY: (current first)                          *
;*                                                               *
;*    Rev.    Date       Created By         Revision Details     *
;*    ---  ----------  ---------------  -----------------------  *
;*                                                               *
;*    01   04 OCT 83    L. Binkowski    Initial release to spec  *
;*                                                               *
;*****************************************************************
	.Z80
	.RADIX	10
	.XLIST
	INCLUDE	COMMON.MRO
	INCLUDE	STRUCT.MRO
	INCLUDE	MINER.EQU
	INCLUDE LINKTAB.EXA
XLIM1:	DB	00H	;LEFT LIMIT FOR PLATFORM DIRECTIONS
XLIM2:	DB	00H	;RIGHT LIMIT FOR PLATFORM DIRECTIONS
PLADATA::DW	00H	;PLATFORM DATA POINTER
FIRBYT:	DB	00H	;FIRST BYTE OF ENTRY
PLATSP::
	REPT	9*4
		DB	0C0H	;TABLE FOR LOADING INTO VRAM
	ENDM
PLTDIR:	DB	00H		;DIRECTION OF CURRENT ENTRY
SPLTXENT:DW	00H		;LOCATION OF X IN CURRENT ENTRY
PLTSPD: DB	00H		;SPEED OF CURRENT ENTRY.
PLATCNT: DB	00H		;NO. OF CURRENT ENTRY
PLDIRP:	DW	0000H		;ADDRESS OF DIRECTION (PTR)
PLTX::	DB	00H		;PLATFORMS X
PLTY::	DB	00H
ONFLAG::DB	00H
THISPLT:DB	00H
ORGDIR:	DB	00H
PLTPAT:	DB	00H
ONPLAT::DB	00H
RADPLAT::DB	00H
;
EXTRN	SCRNUM,BOBX,BOBY,MBSPR,BOB_STATUS,RADIOACTIVE,IN_CHECK,CATWALK
;
;		ROUTINE NAME:	SETPLAT
;		FILE NAME:	PLATFORM.MAC
;		AUTHOR:		Leo Binkowski
;		DATE:		March 13, 1984
;
;	DESCRIPTION:
;
;	This routine will set up the platforms for use with Bounty Bob.
;
;
;	PARAMETERS PASSED:
;			none
;				
;	PARAMETERS RETURNED:
;			none
;
;	GLOBALS ACESSED:
;
;	COMMENTS AND WARNINGS:
;
;	only can be done ONCE, at the initialization of a screen
;
SETPLAT::
	LD	(PLADATA),BC		;STORE AWAY THE ADDRESS OF THE PLATFOR
					;DATA FOR THIS LEVEL
	XOR	A			;RESET THE RADIOACTIVE PLAFORMS FLAG...
	LD	(RADPLAT),A		
	PUSH	BC		;SAVE IT AWAY FOR USE WITH THE NEXT ROUTINE
	POP	IX
;
;	NOW GET THE FIRST BYTE OF THAT TABLE
;
	LD	A,(BC)
	LD	(FIRBYT),A
;	
;	HERE WE FILL THE TABLE WITH 0C0H SO THAT UNWELCOME PLATFORMS DO NOT
;	APPEAR.
;
	LD	A,0C0H
	LD	(PLATSP),A
	LD	BC,36
	LD	HL,PLATSP
	LD	DE,PLATSP+1
	LDIR
	PCALL	VFILL,4,0C0H,VATRIAD+20*4
;
;	NOW CONSTRUCT THE SPRITE TABLE FOR PLATFORMS
;
	LD	HL,PLATSP		;GET THE INITIAL ADDRESS OF THE SPRITE
					;TABLE
	WHILE8. (FIRBYT),.NE.,00H	;IF WE ARE NOT AT THE END OF THE ENTRY TABLE
	  LD	A,(IX+6)		;PUT IN THE INITIAL DIRECTION
	  LD	(IX+2),A
	  LD	A,(IX+4)
	  LD	(HL),A			;PUT THE INITIAL  Y IN THE TABLE
	  LD	A,(IX+3)
	  INC	HL
	  LD	(HL),A			;PUT THE INITIAL X IN THE TABLE
	  LD	A,(IX+5)
	  CP	0FFH			;IS THE NAME IMPOSSIBLE?
	  JR	NZ,SKPRA		;YES...THEN RADIOACTIVE
	  ASIGN8. (RADPLAT),TRUE
	  LD	A,3CH
SKPRA:	  INC	HL
	  LD	(HL),A			;PUT THE SPRITE NAME INIT THE TABLE
	  LD	A,0FH			
	  INC	HL
	  LD	(HL),A			;MAKE THE COLOR WHITE
	  INC	HL
	  LD	BC,8
	  ADD	IX,BC			;MOVE ON TO THE NEXT ENTRY
	  LD	A,(IX)			;LOAD THE ENTRY THAT SEES IF WE'RE
	  LD	(FIRBYT),A		;AT THE END OF THE TABLE.
	ENDW.
	;
	JP	PLATDIS			;DISPLAY THE PLATFORM
;
;		ROUTINE NAME:	PLATMOV
;		FILE NAME:	PLATFORM.MAC
;		AUTHOR:		Leo Binkowski
;		DATE:		March 13, 1984
;
;	DESCRIPTION:
;
;	This is a task that is run by the main module
;
;
;	PARAMETERS PASSED:
;			none
;				
;	PARAMETERS RETURNED:
;			none
;
;	GLOBALS ACESSED:
;
;	COMMENTS AND WARNINGS:
;
;	Must only be run as task every two interrupts.
;
PLATMOV::
	LD	A,(PLATSP)	;IF EVEN THE FIRST PLATFORM IS NOT USED, THEN
	CP	0C0H		;DON'T CALL THIS ROUTINE.
	RET	Z
	ASIGN8. (PLATCNT),0	;SET THE PLATFORM COUNTER TO ZERO
PLTLP:	LD	HL,(PLADATA)	;GET THE ADDRESS OF THE PLATFORM DAT
				;FOR THIS LEVEL
	LD	BC,(PLATCNT)
	LD	B,0
	SLA	C
	SLA	C
	SLA	C
	ADD	HL,BC
	LD	A,(HL)		;GET THE FIRST ENTRY
	AND	A		;IS IT ZERO?
	JP	Z,PLATDIS
	LD	(XLIM1),A	;GET THE FIRST X LIMIT
	INC	HL	
	LD	A,(HL)
	LD	(XLIM2),A	;GET THE SECOND X LIMIT
	INC	HL
	LD	(PLDIRP),HL	;SAVE THE POINTER TO THAT VALUE (FOR WRITE)
	LD	A,(HL)
	LD	(PLTDIR),A	;SAVE THE DIRECTION FOR LATER USE
	INC	HL
	INC	HL
	INC	HL
	LD	A,(HL)		
	LD	(PLTPAT),A	;GET THE PLATFORM PATTERN
	INC	HL
	LD	A,(HL)
	LD	(ORGDIR),A	;GET THE ORIGINAL DIRECTION
	INC	HL
	LD	A,(HL)
	LD	(PLTSPD),A	;SAVE THE SPEED OF THE PLATFORM FOR LATER USE.
	LD	HL,PLATSP
	LD	BC,(PLATCNT)
	LD	B,0
	SLA	C
	SLA	C
	ADD	HL,BC
	LD	A,(HL)
	LD	(PLTY),A
	INC	HL
	LD	(SPLTXENT),HL
	LD	A,(HL)
	LD	(PLTX),A	;SAVE THE X OF THE CURRENT PLATFORM
	LD	A,(RADPLAT)
	AND	A
	CALL	NZ,FLASHP
	CALL	PLTCHK
	;
	IF8.	(PLTX),.LE.,(XLIM1)	;IF TOO FAR LEFT
	  CALL	REVPLT
	  JR	PASTCK
	ELSE.
	  IF8.	(PLTX),.GE.,(XLIM2)	;ELSE IF TOO FAR RIGHT
	    CALL REVPLT
	    JR	PASTCK
	  ENDIF.
	ENDIF.
	;
	LD	A,(PLTDIR)	;GET THE DIRECTION THE PLATFORM IS TRAVELLING
	BIT	7,A		;IS IT STATIONARY?
	JP	NZ,NXTENT
	;
PASTCK:	AND	01H		;IN
	JR	NZ,MVPLRT	;IF RIGHT THEN MOVE RIGHT
	;
	;  ELSE MOVE LEFT
	;
MVPLT:	LD	HL,(SPLTXENT)	;GET THE POINTER TO THE X
	LD	A,(HL)
	LD	BC,(PLTSPD)	;GET THE SPEED (AMOUNT TO BE ADDED TO THE X)
	SUB	C
	LD	(HL),A		;PUT BACK THE AMOUNT
	;
	LD	A,(THISPLT)	;IS HE ON THIS PLATFORM?
	AND	A
	JP	Z,NXTENT	;NO....GO TO NEXT ENTRY
	LD	A,(BOBX)	;YES...THEN GET BOB'S X
	SUB	C		;SUB IT
	LD	(BOBX),A	;SAVE IT
	PCALL	MBSPR,0,0	;REDO THE SPRITES
	JP	NXTENT		;GO ON TO NEXT ENTRY
	;
MVPLRT:	LD	HL,(SPLTXENT)	;GET THE ADDRESS OF THE X ENTRY
	LD	A,(HL)		;GET THE X
	LD	BC,(PLTSPD)	;GET THE SPEED OF THE PLATFORM
	ADD	A,C		;ADD EM
	LD	(HL),A		;SAVE THE X
	LD	A,(THISPLT)	;ARE WE STEPPING ON THIS PLATFORM
	AND	A		
	JP	Z,NXTENT	;NO..THEN GO BACK FOR ANOTHER
	;
	LD	A,(BOBX)	;GET BOB'S X
	ADD	A,C		;MOVE BOB AT THE SAME SPEED OF THE PLATFORM
	LD	(BOBX),A	;SAVE IT
	PCALL	MBSPR,0,0
	JP	NXTENT		;MOVE ON TO NEXT ENTRY
	;
REVPLT:
	;	THIS ROUTINE WILL REVERSE THE DIRECTION, THEN POP
	;	BACK TO THE MOVER ROUTINE.
	;
	LD	A,(PLTDIR)	;GET THE PLATFORM DIRECTION
	XOR	01H		;SWITCH IT
	LD	HL,(PLDIRP)
	LD	(HL),A		;WRITE IT BACK
	LD	(PLTDIR),A
	LD	BC,(ORGDIR)
	BIT	7,C
	RET	Z
	OR	80H		;SET THE HIGH BIT.
	LD	(HL),A
	LD	(PLTDIR),A
	RET
	;
NXTENT:	
	;	NOW WE MUST MOVE TO THE NEXT ENTRY IN THE TABLE
	;
	;
	INC8.	(PLATCNT)	;SAVE THE PLATFORM COUNT
	JP	PLTLP
PLATDIS:
	;
	;	THIS ROUTINE WILL DISPLAY THE PLATFORMS
	;
	IF8.	(RADPLAT),.EQ.,FALSE
	  PCALL	FASTL8,36,PLATSP,VATRIAD+10*4	;LOAD THE DATA INTO VRAM
	ELSE.
	  PCALL FASTL8,4,PLATSP,VATRIAD+20*4	;FOR RADIOACTIVE, DON'T
						;OVERWRITE LIFT AREA..
	ENDIF.
	RET
FLASHP:
	;	THIS ROUTINE WILL RUN THROUGHT THE COLORS FOR THE RADIOACTIVE
	;	PLATFORM.
	;
	INC	HL		;MOVE THE POINTER TO THE COLOR ENTRY
	INC	HL
	LD	A,(HL)		;GET THE CURRENT VALUE
	INC	A		;SET TO NEXT COLOR
	AND	0FH		;MAKE SURE NO EARLY CLOCK BIT
	LD	(HL),A		
	;
	;
	;	NOW CHECK TO SEE IF BOB IS TOUCHING IT
	;
	LD	A,(BOBY)	; GET BOB'S Y
	LD	BC,(PLTY)	;GET THE RADIOACTIVE PLATFORM'S Y
	CP	C		
	JR	C,NOZAP		;IF PLATFORM TOO LOW, THEN NO HIT
	;
	SUB	21		;CHECK THE TOP OF BOB
	CP	C
	JR	NC,NOZAP	;IF OVER THE TOP, THEN NO HIT
	;
	LD	A,(BOBX)	;NOW WE CHECK FOR THE X
	ADD	A,14
	LD	BC,(PLTX)	;GET THE PLATFORM'S X
	CP	C
	JR	C,NOZAP		;NOT WITHIN THE AREA? LEAVE
	;
	LD	A,C		
	ADD	A,16		;CHECK THE END OF THE PLATFORM
	LD	C,A
	LD	A,(BOBX)
	ADD	A,XADJUST
	CP	C
	JR	NC,NOZAP
	;
	ASIGN8.	(RADIOACTIVE),TRUE	;IF ALL THAT THEN YES, WE KILL HIM.
NOZAP:	RET
;
;		ROUTINE NAME:	CHKPLT
;		FILE NAME:	PLATFORM.MAC
;		AUTHOR:		Leo Binkowski
;		DATE:		March 22, 1983
;
;	DESCRIPTION:
;
;	Since I'm dealing with platforms one at a time anyways, I thought
;	checking at the point of moving them would be a good idea.
;
;	PARAMETERS PASSED:
;			NONE
;	PARAMETERS RETURNED:
;			ONPLAT	-	flag set if on this platform
;
;	GLOBALS ACESSED:
;
;			PLTX	-	x coordinate of current platform
;			PLTY	-	y coordinate of current platform
;			BOBX	-	x coordinate of BOB
;			BOBY	-	y coordinate of BOB
;
;	COMMENTS AND WARNINGS:
;
;	Must only be run within the checking routine (CHKBOB)
;	after PLTX and PLTY are defined.
;
PLTCHK::
	XOR	A		;CLEAR THE FLAG THAT SAYS BOB IS ON THIS
	LD	(THISPLT),A	;PARTICULAR PLATFORM.
	LD	A,(BOBY)	;GET BOB'S Y
	LD	BC,(PLTY)	;GET THE PLATFORM'S Y
	CP	C		;ARE THEY THE SAME?
	RET	NZ		;NO...THEN NOT ON THIS PLATFORM
	;
	LD	A,(BOBX)	;NOW GET BOB'S X
	ADD	A,XADJUST	;
	PUSH	AF
	LD	BC,(PLTX)	;GET THE PLATFORM'S X
	DEC	C
	DEC	C
	DEC	C		;ADJUST IT SO'S THE FEET LAND RIGHT
	CP	C		;IS IT ON THE PLATFORM FROM THE LEFT?
	JR	C,PNOPLT	;NO...SO GET LOST, BUT FIRST DO STACK RESTIT.
	;
	CALL	GETLEN		;GET THE LENGTH OF THE CURRENT PLATFORM
	ADD	A,C		;ADD IT TO THE LENGTH ALREADY THERE
	LD	C,A		
	POP	AF		;GET THE FOOT COORDINATE
	CP	C		;IS IT WITHIN THE RIGHT LIMIT OF THE PLATFORM?
	RET	NC		;NO...SO GET LOST
	LD	A,(BOB_STATUS)	;GET BOB'S STATUS
	CP	JUMPING		;IS HE JUMPING?
	JR	Z,FLAGDO	;NO...THEN DON'T
	;	SINCE WE DON'T WANT TO DO THIS WHILE WE ARE DOING THE CHECK
	;	FROM CHKBOB, I'LL USE A FLAG TO DETERMINE WHICH ROUTINE WE
	;	CAME FROM
	LD	A,(IN_CHECK)
	AND	A
	JR	NZ,FLAGDO
	;
	LD	HL,(PLDIRP)	;CLEAR THE FLAG THAT TELLS THE PLATFORM TO STOP
	LD	A,(HL)
	AND	01H
	LD	(HL),A
FLAGDO:	ASIGN8. (ONPLAT),TRUE	;YES...WELL LET'S SET THE FLAG
	LD	(THISPLT),A	;AND ALSO SET THE FLAG FOR THIS PARTICULAR PLAT
	RET
PNOPLT:	POP	AF
	RET
	;
GETLEN:
	;
;		ROUTINE NAME:	GETLEN
;		FILE NAME:	PLATFORM.MAC
;		AUTHOR:		Leo Binkowski
;		DATE:		MARCH 22, 1983
;
;	DESCRIPTION:
;
;
;	PARAMETERS PASSED:
;				NONE 
;	PARAMETERS RETURNED:
;				A - LENGTH OF CURRENT PLATFORM
;	GLOBALS ACESSED:
;		
;	COMMENTS AND WARNINGS:
;	Must only be run after the platform pattern has been sucked
;	out of the table.
;
GETLEN:
	LD	A,(PLTPAT)	;GET THE PLATFORM PATTERN
	CP	3CH		;IS IT LONG
	JR	Z,LEN16		;YES..THEN RETURN THAT LENGTH
	CP	40H		;IS IT A MEDIUM?
	JR	Z,LEN12		;YES..THEN RETURN THAT LENGTH
	LD	A,8		;OTHERWISE THE LENGTH IS SMALL
	RET
LEN16:	LD	A,16		;LONG PLATFORM...
	RET
LEN12:	LD	A,12		;SHORT PLATFORM....
	RET
;

;PLATLEV:
;	DW	PLALV1,PLALV2,PLALV3,PLALV4,PLALV5,PLALV6,PLALV7
;	DW	PLALV8,PLALV9,PLALVA,PLALVB,0000H
;PLALV1:
;	DB	030H,080H,00H,040H,060H,03CH,00H,01H
;	DB	050H,0B0H,0FFH,060H,028H,040H,0FFH,01H
;	DB	00H
;PLALV2:	
;	DB	000H
;PLALV3:
;	DB	000H
;PLALV4:
;	DB	000H
;PLALV5:
;	DB	00H
;PLALV6:
;	DB	00H
;PLALV7:	
;	DB	00H
;PLALV8:
;	DB	00H
;PLALV9:
;	DB	00H
;PLALVA:
;	DB	00H
;PLALVB:
;	DB	00H
	END

