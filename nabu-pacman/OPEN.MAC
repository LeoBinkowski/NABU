;*****************************************************************
;*                                                               *
;*    FILE NAME:        OPEN.MAC                                 *
;*                                                               *
;*    MODULE PART NO.: 73-90034420 NAME:  PAC MAN 		 *
;*                                                               *
;*    FILE DESCRIPTION:                                          *  
;*                                                               *
;*      this file does the standard opening instruction screen   *
;*      and help.                                                *
;*                                                               *
;*                                                               *
;*                                                               *
;*                                                               *
;*    PROGRAMMER: L. Binkowski, C. Chow                          *
;*                                                               *
;*    ENVIRONMENT- Development Machine: NABU 1100, MCP 1.8       *
;*                                                               *
;*               - Assembler: MACRO-80                           *
;*                                                               *
;*                                                               *
;*****************************************************************
;*                                                               *
;*    REVISION HISTORY: (current first)                          *
;*                                                               *
;*    Rev.    Date       Created By         Revision Details     *
;*    ---  ----------  ---------------  -----------------------  *
;*    04   27 JUN 84	L. Binkowski	put in print help	 *
;*								 *
;*    03   12 FEB 84	L. Binkowski	updated rev #		 *
;*								 *
;*    02   23 JAN 84	L. Binkowski	trademark change	 *
;*								 *
;*    01   14 DEC 83	L. Binkowski	NAMCO changes		 *
;*								 *
;*    01   19 OCT 83	L. Binkowski	logo change (PAC-MAN)	 *
;*                                                               *
;*    01   04 OCT 83    L. Binkowski    Initial release to spec  *
;*                                                               *
;*****************************************************************
 	.Z80
;
;	THIS MODULE HANDLES THE OPENING SCREEN AND THE INSTRUCTION
;	SCREENS.
;
		.RADIX	10
		CSEG
		.XLIST
		INCLUDE COMMON.MRO
		INCLUDE STRUCT.MRO
		INCLUDE LINKTAB.EXA
		INCLUDE	ADDRESS.EQU

		EXTRN 	ENGLISH
		EXTRN	HFLAG		
		EXTRN	PUTLOGO
		EXTRN	REVERSE,PRTHLP
		.LIST
SYM1	EQU	0B1H
NUMBYT:	DB	00H
;
;DEFINE THE MESSAGE BLOCK FOR THE OPENING SCREEN
;
MESGA:		DEFMSG 15,1,'NAMCO PRESENTS'
MESG0:		DEFMSG 18,3,'       TM'
MESG1:		DEFMSG 18,4,'PAC-MAN'
MESG2:		DEFMSG 3,11,'READY TO GO? PRESS GO'
MESG3:		DEFMSG 3,13,'NEED HELP?   PRESS HELP'
MESG4:		DEFMSG 3,15,'NEW CHOICE?  PRESS EXIT'
MESG6:		DEFMSG 3,17,'START AGAIN? PRESS RESTART'
MESG7:		DEFMSG 3,22,'COPYRIGHT \ 1983,1984'
MESG8:		DEFMSG 3,23,'NABU NETWORK CORP.       04'
;
;
;NOW DEFINE A DATA STRUCTURE POINTING TO THE MESSAGE BLOCKS
;
DATA:		DW MESG0,MESG1, MESG2, MESG3, MESG4
		DW MESG6, MESG7, MESG8,MESGA
ENDATA:
;
;DEFINE MESSAGE BLOCK FOR THE FIRST PAGE OF INSTRUCTIONS
;                           |1234567890123456789012345678|
PG1L1:		DEFMSG 3, 1,'PAC-MAN HELP     PAGE 1 OF 3'
PG1LN2:		DEFMSG 3, 4,'GET AS MANY POINTS AS YOU'
PG1LN3:		DEFMSG 3,6, 'CAN BY EATING DOTS. AVOID' 
PG1LN4:		DEFMSG 3,8, 'MONSTERS UNLESS YOU ARE' 
PG1LN5:		DEFMSG 3,10,'ENERGIZED. TO BECOME' 
PG1LN6:		DEFMSG 3,12,'ENERGIZED, EAT ONE OF THE' 
PG1LN7:		DEFMSG 3,14,'BIG FLASHING DOTS LOCATED'
PG1LN8:		DEFMSG 3,16,'NEAR EACH CORNER OF THE' 
PG1LN9:		DEFMSG 3,18,'MAZE. THE MONSTERS WILL THEN' 
P1LN10:		DEFMSG 3,20,'TURN BLUE, AND MAY BE EATEN.'
PG1L23:		DEFMSG 3,23,'     LEAVE HELP? {GO}  ~'
INST1:		DW PG1L1,PG1LN2,PG1LN3,PG1LN4,PG1LN5,PG1LN6
		DW PG1LN7,PG1LN8,PG1LN9,P1LN10,PG1L23
ENDI1:
;
;
;DEFINE MESSAGE BLOCK FOR THE n'th PAGE OF INSTRUCTIONS
;                           |1234567890123456789012345678|
PG2L1:		DEFMSG 3, 1,'PAC-MAN HELP     PAGE 2 OF 3'
PG2L2:		DEFMSG 3,4, 'MONSTER VALUES DOUBLE FOR'
PG2L3:		DEFMSG 3,6, 'EACH ONE EATEN:'
PG2L4:		DEFMSG 3,9, 'FIRST MONSTER       200 PTS.'
PG2L5:		DEFMSG 3,11,'SECOND MONSTER      400 PTS.'
PG2L6:		DEFMSG 3,13,'THIRD MONSTER       800 PTS.'
PG2L7:		DEFMSG 3,15,'FOURTH MONSTER     1600 PTS.'
PG2L8:		DEFMSG 3,18,'DOTS ARE WORTH 10 POINTS,'
PG2L9:		DEFMSG 3,20,'AND ENERGIZERS ARE 50 POINTS'
PG2L23:		DEFMSG 3,23,' `   LEAVE HELP? {GO}   ~ '
INSTN:		DW PG2L1,PG2L2,PG2L3,PG2L4,PG2L5,PG2L6,PG2L7,PG2L8,PG2L9,PG2L23
ENDIN:
;
;
;DEFINE MESSAGE BLOCK FOR THE LAST PAGE OF INSTRUCTIONS
;                           |1234567890123456789012345678|
PGLL1:		DEFMSG 3, 1,'PAC-MAN HELP     PAGE 3 OF 3'
PGLL2:		DEFMSG 3, 4,'THE FRUIT THAT APPEARS IN'
PGLL3:		DEFMSG 3,6, 'THE CENTER OF THE MAZE IS'
PGLL4:		DEFMSG 3,8, 'WORTH INCREASING POINTS'
PGLL5:		DEFMSG 3,10,'DEPENDING ON THE NUMBER OF' 
PGLL6:		DEFMSG 3,12,'SCREENS CLEARED.'
PGLLA:		DEFMSG 3,15,'AN EXTRA PAC-MAN IS GIVEN' 
PGLL7:		DEFMSG 3,17,'ONLY ONCE PER GAME WHEN' 
PGLL8:		DEFMSG 3,19,'REACHING THE FIRST 10,000'
PGLLB:		DEFMSG 3,21,'POINTS.'
PGLL23:		DEFMSG 3,23,' `   LEAVE HELP? {GO}'
INSTL:		DW PGLL1,PGLL2,PGLL3,PGLL4,PGLL5,PGLL6,PGLLA,PGLL7,PGLL8,PGLL23
		DW PGLLB
ENDIL:
;
;
;DEFINE DATA STRUCTURE POINTING TO THE DATA STRUCTURES POINTING
;TO THE MESSAGE BLOCKS
;
INBEGIN::	DW	INST1,ENDI1,INSTN,ENDIN,INSTL,ENDIL
INEND::

PTR:	DW	00
ENDPTR: DW	00
PTRCON: DW	00
RIGHTF:	DB	0
LEFTF:	DB 	0
CHAR:	DB	0
CHOICE::	DB	0
CYCOOR::	DB	0
CXCOOR::	DB	0
OLDX::		DB	0
OLDY::		DB	0

OPEN::	PCALL	AUDIOWR,7,3FH
	SETCOLR DBLUE,WHITE	;SET FOR WHITE ON DBLUE
	PCALL VFILL,4000H,0,0
	PCALL VPTRNST,VPTRNAD
	PCALL VNAMEST,VNAMEAD
	PCALL VCOLRST,VCOLRAD
	PCALL RPATRN,ENGLISH	;READ IN TEXT CHARACER SET
	LD	HL,VPTRNAD
	LD	DE,400H		;PUT NEW BASE ADDRESS IN DE
	ADD	HL,DE		
	EX	DE,HL
	PCALL	LPATRN,ENGLISH	;LOAD ENGLISH AGAIN BUT AT 80H
	PCALL RPATRN,SPEC	;READ IN SPECIAL CHARACTERS
	PCALL VRAML8,020H,CLR,VCOLRAD	;LOAD COLOR TABLE
	LD	A,(HFLAG)
	AND	A		;TEST THE HELP FLAG
	JP	NZ,INSTR1

DOPEN::	CALL	FIRSCR		;DISPLAY OPENING SCREEN
	LD	A,1
	LD	(CHOICE),A	;SET CHOICE TO GO KEY
	LD	A,10
	LD	(CYCOOR),A	;SET CURSOR Y COOR
	LD	(OLDY),A	;SET OLD Y COOR	
	LD	A,15
	LD	(CXCOOR),A	;SET CURSOR X COOR
	LD	(OLDX),A	;SET OLD X COOR
	XOR	A		;CLEAR A REG
	PCALL	REVERSE,(CXCOOR),(CYCOOR),14	;REVERSE LETTERS
WAIT:	CALL	GTKEY		;WAIT FOR KEY
	CP	'V'+80H
	CALL	Z,VERSNO
	CP	0DH		;CHECK FOR GO
	JP	NZ,CC1		;NO - THEN GO TO  CHANGE CHOICE
	LD	A,(CHOICE)	;GET CHOICE
	CP	1
	JP	Z,OPTION	;JUMP TO OPTION SCREEN
	CP	2	
	JP	Z,INSTR1	;JUMP TO HELP SCREENS
	CP	4		;CHECK FOR RESTART
	JP	Z,DOPEN		;DO NOTHING
	JP	0		;DEFAULT TO CHOICE 3 WHICH IS EXIT
CC1:	CP	0E2H		;CHECK FOR CURSOR UP
	JP	NZ,CC2
	LD	HL,CYCOOR	;LOAD CURSOR Y COOR ADDRESS IN HL
	DEC	(HL)
	DEC	(HL)		;UP TWO LINES
	LD	A,(CHOICE)	
	DEC	A		;DECREMENT CHOICE COUNTER
	JP	NZ,CCFINI
	LD	A,(CYCOOR)
	ADD	A,8
	LD	(CYCOOR),A	;ADD 8 TO CURSOR Y COOR
	LD	A,4
	JP	CCFINI
CC2:	CP	0E3H		;CHECK FOR CURSOR DOWN
	JP	NZ,WAIT
	LD	HL,CYCOOR
	INC	(HL)
	INC	(HL)		;INCREMENT CURSOR Y COOR BY 2
	LD	A,(CHOICE)
	INC	A
	CP	5
	JP	NZ,CCFINI
	LD	A,(CYCOOR)
	SUB	8		;SUBTRACT 8 FROM Y COOR
	LD	(CYCOOR),A	
	LD	A,1
CCFINI:	LD	(CHOICE),A
	LD	A,1		;SET A REG TO 1
	PCALL	REVERSE,(OLDX),(OLDY),14 	;CHANGE REVERSED BACK TO  NORMAL LETTERS
	LD	A,(CXCOOR)
	LD	(OLDX),A	;SET OLD X COOR TO NEW X COOR
	LD	A,(CYCOOR)
	LD	(OLDY),A	;SET OLD Y COOR TO NEW Y COOR
	XOR	A		;SET A REG TO 0
	PCALL	REVERSE,(CXCOOR),(CYCOOR),14	;REVERSE NEW LETTERS
	JP	WAIT	
;
;	INSTRUCTION SCREEN HANDLING CODE STARTS HERE
;
INSTR1::
	LD	IX,INBEGIN	;LOAD POINTER TO DATA STRUCTURES
INSTRP:
	PCALL	VFILL,0400H,020H,VNAMEAD	;FILL SCREEN WITH BLANKS
	XOR	A
	LD	(HFLAG),A	;CLEAR THE HELP FLAG
	LD	A,1
	LD	(RIGHTF),A	;SET RIGHT AND LEFT FLAGS TO 1 AT BEGINNING
	LD	(LEFTF),A
	LD	C,(IX)
	LD	B,(IX+1)	;LOAD BEGINNING POINTER TO DATA STRUCTURE
	LD	E,(IX+2)
	LD	D,(IX+3)	;LOAD END POINTER TO DATA STRUCTURE
	CALL	DRWSCN		;PUT ON PAGE OF INSTRUCTIONS
	PUSH	IX
	POP	BC		;LOAD IX IN BC
	LD	HL,INBEGIN	;LOAD BEGIN ADDRESS OF DATA STRUCTURE
	SCF
 	CCF
	SBC	HL,BC		;TEST SEE IF BEGINNING OF DATA STRUCTURE
	JR	NZ,RONLY
	LD	A,0
	LD	(LEFTF),A	;SET LEFT FLAG TO ZERO MEANING NO LEFT ARROW
RONLY:	PUSH	IX
	POP	BC		;LOAD BC WITH INDEX INTO DATA STUCTURE
	LD	HL,4
	ADD	HL,BC		;ADD 4 TO ADDRESS TO GET TO NEXT DATA STRUCTURE ADDRESS
	LD	BC,INEND	;LOAD END OF DATA STUCTURE ADDRESS
	SCF
	CCF
	SBC	HL,BC		;CHECK SEE IF END OF DATA STRUCTURE
	JR	NZ,WAITI
	LD	A,0
	LD	(RIGHTF),A	;CLEAR THE RIGHT FLAG MEANING NO RIGHT ARROW
WAITI:	CALL	GTKEY
	CP	SYM1
	CALL	Z,PALLH
	CP	0DH
	JP	Z,OPTION
	LD	(CHAR),A	;SAVE CHAR
	LD	A,(RIGHTF)
	AND	A		;IF FLAG IS 0 NO RIGHT ARROW
	JR	Z,TESTL
	LD	A,(CHAR)	;GET REPLY
	CP	0E4H		;TEST FOR ->
	JR	NZ,TESTL
	LD	BC,4
	ADD	IX,BC		;ADD 4 TO IX TO GET TO NEXT DATA STRUCTURE
	JP	INSTRP		;JUMP TO TOP
TESTL:	LD	A,(LEFTF)	
	AND	A		;CHECK SEE IF LEFT FLAG IS 0 
	JR	Z,GOKEY
	LD	A,(CHAR)
	CP	0E5H		;TEST FOR <-
	JR	NZ,GOKEY
	LD	BC,4
	PUSH	IX
	POP	HL		;LOAD IX IN HL REG
	SCF
	CCF
	SBC	HL,BC		;SUBTRACT 4 FROM IX TO GET TO NEXT DATA STRUCTURE
	PUSH	HL
	POP	IX		;RESAVE IN IX REG
	JP	INSTRP
GOKEY:	LD	A,(CHAR)
	CP	0DH			;TEST FOR <CR>
	JP	NZ,WAITI
	LD	A,(CHOICE)
	CP	1
	JP	Z,OPTION
	CP	2
	JP	Z,INSTR1
	CP	4
	JP	Z,DOPEN
	CPMCALL	0
	JP	WAITI

OPTION:			;THERE IS NO OPTION SCREEN
GAME::	RET

FIRSCR:		
		PCALL	VFILL,0400H,020H,VNAMEAD	;FILL SCREEN WITH BLANKS
		PCALL PUTLOGO,02H,0H,2
;
;LOOP WHILE WRITING THE TEXT LINES ON THE SCREEN.
;
		LD BC,DATA	;SET POINTER TO DRAW..
		LD DE,ENDATA	;.. MENU PAGE
DRWSCN:: 	LD (PTR),BC
		LD (ENDPTR),DE
		REPEAT.
		LD HL,(PTR)	;GET CONTENTS OF POINTER
		LD A,(HL)
		LD C,A
		INC HL
		LD A,(HL)
		LD B,A
		LD (PTRCON),BC	;POINTS TO MESSAGE BLOCK
		PCALL PUTMSG,(PTRCON)	;PUT MESSAGE ON SCREEN
		LD HL,(PTR)
		INC HL
		INC HL
		LD (PTR),HL	;SET FOR NEXT MESSAGE BLOCK
		UNTIL16. (PTR) .EQ. (ENDPTR)	;DO IT UNTIL DONE
		RET

;
;	THIS ROUTINE CHECK KEYBOARD AND JOYSTICK FOR HELP SCREEN
;
GTKEY::
	N.DEVRDY	KEYBOARD,KEYSTROKE	;CHECK KEYBOARD
	AND	A				;IS THERE A KEY WAITING
	JP	Z,NONE				;NO - JUMP
	N.DEVIO		KEYBOARD,KEYSTROKE	;GET CHAR
	POP	HL			;POP THE RETURN ADDRESS
	CP	0ABH			;TEST FOR RESTART
	JP	Z,DOPEN
	CP	0BDH
	JP	Z,DOPEN
	CP	0EAH			;TEST FOR HELP
	JP	Z,INSTR1
;	CP	0DH			;TEST FOR GO KEY
;	JP	Z,OPTION
	PUSH	HL		;PUSH THE RETURN ADDRESS BACK ON STACK
	RET
NONE::	N.DEVRDY	KEYBOARD,JSTCK1	;CHECK JOYSTICK
	AND	A			;ANY DATA
	JR	Z,GTKEY			;NO - JUMP TO TOP
	N.DEVIO	KEYBOARD,JSTCK1		;ELSE - GET DATA
	BIT	4,A		;CHECK FOR GO KEY
	JR	Z,J2		
	LD	A,0DH		
	RET
J2:	BIT	0,A		;CHECK FOR LEFT PAGE
	JR	Z,J3
	LD	A,0E5H
	RET
J3:	BIT	2,A		;CHECK FOR RIGHT PAGE
	JR	Z,J4
	LD	A,0E4H
	RET
J4:	BIT	3,A		;CHECK FOR CURSOR UP
	JR	Z,J5
	LD	A,0E2H
	RET
J5:	BIT	1,A		;CHECK FOR CUSOR DOWN
	JP	Z,GTKEY
	LD	A,0E3H
	RET
;
;	THIS ROUTINE HANDLES THE PRINTING OF THE HELP SCREENS
;
PALLH::
	PUSH	IX		; SAVE CURRENT INDEX
	LD	IX,INBEGIN	;LOAD POINTER TO DATA STRUCTURES
	XOR	A
	LD	(NUMBYT),A	;CLEAR NUMBER BYTE FOR PTHLP
PALLH0:
;
;	CHECKING TO SEE IF END OF INTRUCTION SCREENS
;
	PUSH	IX
	POP	HL		;LOAD HL WITH INDEX INTO DATA STUCTURE
	LD	BC,INEND	;LOAD END OF DATA STUCTURE ADDRESS
	AND	A		;CLEAR CARRY FLAG	
	SBC	HL,BC		;CHECK SEE IF END OF DATA STRUCTURE
	JR	Z,PALLH2	;YES - JUMP
	PCALL	VFILL,400H,20H,VNAMEAD
	
;
;	SETTING UP REGISTERS FOR DRWSCN
;
	LD	C,(IX)
	LD	B,(IX+1)	;LOAD BEGINNING POINTER TO DATA STRUCTURE
	LD	E,(IX+2)
	LD	D,(IX+3)	;LOAD END POINTER TO DATA STRUCTURE
	CALL	DRWSCN		;PUT ON PAGE OF INSTRUCTIONS
	PUSH	IX
	POP	BC		;LOAD BC WITH INDEX INTO DATA STUCTURE
	LD	HL,4
	ADD	HL,BC		;ADD 4 TO ADDRESS TO GET TO NEXT DATA STRUCTURE ADDRESS
	LD	BC,INEND	;LOAD END OF DATA STUCTURE ADDRESS
	AND	A
	SBC	HL,BC		;CHECK SEE IF END OF DATA STRUCTURE
	JR	NZ,PH1
	XOR	A		;LOAD ZERO INTO A FOR <FF> TO PRINTER
	JR	PH2
PH1:	LD	A,(NUMBYT)	
	XOR	1		;FLIP VALUE OF NUMBYTE
	LD	(NUMBYT),A
PH2:	LD	C,A
	CALL	PRTHLP		; PRINT THE CURRENT SCREEN
	JR	C,PALLH2	; PRINT HAS BEEN CANCELLED (C IS SET)
	LD	BC,4
	ADD	IX,BC		; GET NEXT SCREEN
	JR	PALLH0
;
PALLH2:	POP	IX		; SET OLD INDEX
	PCALL	VFILL,400H,20H,VNAMEAD
	LD	C,(IX)
	LD	B,(IX+1)	; BEGINNING POINTER TO CURRENT DATA STRUCTURE
	LD	E,(IX+2)
	LD	D,(IX+3)	;LOAD END POINTER TO DATA STRUCTURE
	CALL	DRWSCN
	XOR	A		; ERASE THE LAST COMMAND...
	RET
VERSNO:	PCALL	PUTMSG,VERMSG
	XOR	A
	RET
VERMSG:	DEFMSG	3,23,'AS OF JUNE 27, 1984          '
;
CLR::	DB	0F4H,0F4H,0F4H,0F4H,0F4H,0F4H,0F4H,0F4H
	DB	0F4H,0F4H,0F4H,0F4H,0F4H,0F4H,0F4H,0F4H
	DB	0F4H,0F4H,0F4H,0F4H,04FH,04FH,04FH,04FH
	DB	04FH,04FH,04FH,04FH,04FH,04FH,04FH,04FH
;
SPEC::
;
           DB 005H
;
;
 DB 03CH,000H,00CH,018H,030H,030H,018H,00CH,000H
 DB 03EH,000H,030H,018H,00CH,00CH,018H,030H,000H
 DB 07BH,008H,010H,020H,040H,020H,010H,008H,000H
 DB 07CH,000H,018H,018H,018H,018H,018H,018H,000H
 DB 07DH,040H,020H,010H,008H,010H,020H,040H,000H

	END
