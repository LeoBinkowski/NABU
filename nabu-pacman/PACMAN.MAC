	;This is the source program for PAC MAN, which is identical
	; to the arcade game of the same name
	;

;*****************************************************************
;*                                                               *
;*    FILE NAME:       PACMAN.MAC                                *
;*                                                               *
;*    MODULE PART NO.: 73-90034420 NAME:  PAC MAN 		 *
;*                                                               *
;*    FILE DESCRIPTION:                                          *  
;*      This contains the mainline, pacman movement routines     *
;*      dying animation, score generation, video setup,          *
;*      pill flashing, task setup, keyboard reading              *
;*                                                               *
;*                                                               *
;*                                                               *
;*                                                               *
;*    PROGRAMMER: L. Binkowski                                   *
;*                                                               *
;*    ENVIRONMENT- Development Machine: NABU 1100, MCP 1.8       *
;*                                                               *
;*               - Assembler: MACRO-80                           *
;*                                                               *
;*                                                               *
;*****************************************************************
;*                                                               *
;*    REVISION HISTORY: (current first)                          *
;*                                                               *
;*    Rev.    Date       Created By         Revision Details     *
;*    ---  ----------  ---------------  -----------------------  *
;*    04   27 JUN 84	L. Binkowski	standards update	 *
;*								 *
;*    03   12 FEB 84	L. Binkowski	fixed score bug		 *
;*								 *
;*    02   25 JAN 83	L. Binkowski	see next (try #2)	 *
;*								 *
;*    02   19 DEC 83	L. Binkowski	fixed leave dot bug	 *
;*   								 *
;*    02   26 OCT 83	L. Binkowski	changed pattern algorithm*
;*                                                               *
;*    01   04 OCT 83    L. Binkowski    Initial release to spec  *
;*                                                               *
;*****************************************************************
 
	;Author:  Leo Binkowski
	;	  Nabu Manufacturing corp.
	;	  Ottawa, Canada.
	;
	; This is the MCP version..
	;
	.PRINTX/PAC MAN FEVER.....IT'S DRIVIN' ME CRAZY/
	.PRINTX/VERSION 2  HOME NABU    JUNE 27, 1984/
	.Z80
	.RADIX 10
	.XLIST
	Z80	EQU 	0FFH
	INCLUDE PACMAN.EQU
	INCLUDE CLKAT.MRO
	INCLUDE LINKTAB.EXA
	INCLUDE COMMON.MRO
	INCLUDE STRUCT.MRO
	INCLUDE ARITH.MRO
	INCLUDE	SUPRTASK.MRO
	EXTRN PACSCR,LNKTB,GHOMOV,TMP,PINMOV,BLIMOV,NOISES,NOREV,REVFL
	EXTRN OUTIMR,PINTIMR,BSICK,PSICK,CBODY,RSTBLI,RSTPIN,ABS,STOPAM
	EXTRN CONTROL,CONTR2,CONTR3,STPEYE,STPILL,CURTMR,CURPER,ANIMUS
	EXTRN ANIMTCB,ISICK,INKTIMR,INKMOV,RSTINK,CSICK,CLYTIMR,CLYMOV,RSTCLY
	EXTRN PGHOMY,PGHOMX,EATFRU,SHOFRU,FRUTIMR,FRUDAT,PILDUR,PACDEL,SCRVAR
	EXTRN QUADCOM,PQFLG,IQFLG,CQFLG,ENDFLG,PACBOARD,PACCOL,SPACSP,RESTART
	EXTRN HELP,REMOVT,SCORE1,SCORE2,HISCOR,SHELL,ANOFF,OPTION,DEMOV
	EXTRN PLA1SCR,PLA0SCR,NPACGET,NPACPUT,CURSCR,SUPSCR
	.LIST
	; FOR DIRECTION PURPOSES, 00H=RIGHT, 10H=DOWN, 20H=LEFT, 30H=UP
PACDIR::DS	1		;PACMAN DIRECTION
PACMTH::DS	1		;PACMAN MOUTH POSITION
PACPAT::DS	1		;CURRENT PACMAN PATTERN
PACST::	DS	1		;PACMAN STATUS 0=ALRIGHT,1=DEAD,2=STOPPED
PACX::	DB	7BH		;PACMAN X LOCATION ON SCREEN
PACY::	DB	84H		;PACMAN Y LOCATION ON SCREEN
BLIDIR::DS	1		;BLINKY DIRECTION
BLIX::	DB	78H		;BLINKY X POSITION
BLIY::	DB	4CH		;BLINKY Y POSITION
BLIPX::	DS	1
BLIPY::	DS	1
LASTB::	DB	0FFH		;BLINKY'S LAST PATTERN FOR PATTERN MOVEMENT
BLIP2X::DS	1
BLIP2Y::DS	1
LAST2B::DB	0FFH		;BLINKY'S SECOND LAST PATTERN FOR MOVEMENT
LBDIR::	DS	1		;LAST BLINKY DIRECTION
LBPAT::	DS	1
BLIST::	DS	1		;BLINKY STATUS 0=OK,1=SICK,2=EATEN
BLIPAT::DB	0CCH		;BLINKY CURRENT PATTERN
BLIEYE::DB	4CH		;BLINKY'S EYES PATTERN
BLIHIT::DS	1		;BLINKY'S CAPTURED FLAG
PINDIR::DS 	1		;PINKY DIRECTION
PINX::	DB	30H		;PINKY X POSITION
PINY::	DB	30H		;PINKY Y POSITION
PINPX::	DS	1
PINPY::	DS	1
LASTP::	DB	0FFH		;PINKY'S LAST PATTERN FOR PATTERN MOVEMENT
PINP2X::DS	1
PINP2Y::DS	1
LAST2P::DB	0FFH		;2ND LAST PATTERN
LPDIR::	DS	1		;LAST PINKY DIRECTION
LPPAT::	DS	1
PINST::	DS	1		;PINKY STATUS
PINPAT::DB	0CCH		;PINKY CURRENT PATTERN
PINEYE::DS	1		;PINKY'S EYES PATTERN
PINHIT::DS	1		;PINKY'S CAPTURED FLAG
INKDIR::DS	1		;INKY DIRECTION
INKX::	DS	1		;INKY X POSITION
INKY::	DS	1		;INKY Y POSITION
INKPX::	DS	1
INKPY::	DS	1
LASTI::	DB	0FFH		;INKY'S LAST PATTERN FOR PATTERN MOVEMENT
INKP2X::DS	1
INKP2Y::DS	1
LAST2I::DB	0FFH		;2ND LAST PATTERN
LIDIR::	DS	1		;LAST INKY DIRECTION
LIPAT::	DS	1
INKST::	DS	1		;INKY STATUS
INKPAT::DB	0CCH		;INKY CURRENT PATTERN
INKEYE::DS	1		;INKY'S EYES PATTERN
INKHIT::DS	1		;INKY'S CAPTURED FLAG
CLYDIR::DS	1		;CLYDE DIRECTION
CLYX::	DS	1		;CLYDE X POSITION
CLYY::	DS	1		;CLYDE Y POSITION
CLYPX::	DS	1
CLYPY::	DS	1
LASTC::	DB	0FFH		;CLYDE'S LAST PATTERN FOR MOVEMENT
CLYP2X::DS	1
CLYP2Y::DS	1
LAST2C::DB	0FFH		;2ND LAST PATTERN
LCDIR::	DS	1		;LAST CLYDE DIRECTION
LCPAT::	DS	1		;
CLYST::	DS	1		;CLYDE STATUS
CLYPAT::DB	0CCH		;CLYDE CURRENT PATTERN
CLYEYE::DS	1		;CLYDE'S EYES
CLYHIT::DS	1		;CLYDE'S CAPTURED FLAG
MOV:	DS	1		;TEMPORARY JOYSTICK VALUE STORAGE
PATX:	DS	1		;SET_UP'S X CURSOR
PATY:	DW	BUF1A		;SET_UP'S Y CURSOR
GOTIT:	DB	00H		;SET_UP'S TEMPORARY PATTERN HOLDER
BUF1A:	DS	10
PLFLG1:	DB	FALSE
TMPX::	DS	1		;TEMPORARY STORAGE FOR X COORDINATES
TMPY::	DS	1		;TEMPORARY STORAGE FOR Y COORDINATES
XMDFY::	DS	1		;MODIFY VECTOR STORAGE
YMDFY::	DS	1		;MODIFY VECTOR STORAGE
OFFPAT::DS	1		;OFFENDING PATTERN VECTOR
DIRCHK::DS	1		;CURRENT DIRECTION CHECK
SCORE::	DS	3		;PACMAN SCORE
D1TSCR:	DB	00H		;DOTS EATEN ON CURRENT SCREEN,RESET ON THE NEXT
D0TSCR:	DB	00H
DOTSCR:	DB	00H
FIZZLE::DB	00H
FRUVALUE:DS	1		;VALUE OF THE CURRENT FRUIT
CURDIR:	DS	1		;DIRECTION VECTOR FOR CHKHIT
FORWARD:DS	1		;DATA TREATING FLAG FOR CHKHIT
CANTGO:	DS	1		;FLAG FOR CHECKING SIDES
QUEDIR:	DB	0FFH		;DEFINE THE QUEUE'D DIRECTION A NULL VALUE
DIG5:	DB	30H		;DISCOR'S OUTPUT VECTORS
DIG4:	DB	30H
DIG3:	DB	30H
DIG2:	DB	30H
DIG1:	DB	30H
DIG0:	DB	30H
RACK::	DB	00H		;RACK NUMBER
FM0FLG::DB	000H		;FREE MAN FLAG
FM1FLG::DB	000H		
PACTCB::DS	6		;TCB FOR PACMOV
BLITCB::DS	6		;TCB FOR GHOMOV
PINTCB::DS	6
INKTCB::DS	6
CLYTCB::DS	6
PILTCB::DS	6		;TCB FOR PILL FLASHING
BODTCB::DS	6		;TCB FOR GHOST BODY WIGGLING
TICKFL::DS	1		;TIMER FLAG
TICTCB::DS	6		;TIMER TCB
KEYTCB::DS	6		;KEYBOARD INPUT TCB
NSTCB:	DS	6		;NOISE TCB
FRUTCB:	DS	6		;FRUIT SHOW'R TCB
WHIFLG::DB	00H
DEADFL::DS	1		;DEAD PACMAN FLAG
DOTFL::	DS	1		;FLAG SAYING THAT THE PACMAN IS EATING A DOT
PWRTIMR::DB	00H		;TIME FOR PILL ACTIVATION
SGVAL::	DW	1		;THE POINT VALUE FOR A SICK GHOST THAT IS EATEN
SGPAT::	DS	1
LPACX:: DB	00H
LPACY:: DB	00H
LPACPT::DB	00H
KEYPRS::DS	1
WKDEL::	DB	02H
WKDEL1::DB	04H
GHOFLG::DB	00H
FRTFLG::DB	00H
FREEFLG::DB	00H
EYEFLG::DB	00H
WACFLG::DB	01H
CKAFLG::DB	00H
PPFLG::	DB	00H
PLAYER::DB	00H
NUMPLA::DB	01H
P0MEN:	DS	1
P1MEN:	DS	1
P0SCOR::DB	0,0,0
P1SCOR::DB	0,0,0
P0RACK::DB	0
P1RACK::DB	0
P0FRU:	DB	0
P1FRU:	DB	0
BEG2SC:	DB	00H
CURPIK:	DB	00H
P0MSG:	DEFMSG	14,6,'1 UP'
P1MSG:	DEFMSG	14,6,'2 UP'
GAMOVR:	DEFMSG  7,17,'GAME OVER PLAYER '
A1:	DEFMSG	3,12,'ONE PLAYER'
A2:	DEFMSG	3,14,'TWO PLAYERS  ONE JOYSTICK'
A3:	DEFMSG	3,16,'TWO PLAYERS  TWO JOYSTICKS'
A4:	DEFMSG	10,1,'  PAC-MAN'
A5:	DEFMSG	3,9,'OPTIONS:'
SOM:
	DW	A1,A2,A3,A4,A5
EOM:
	;
PACMAN::
.MAIN.::
	LD	SP,(6)
	ASIGN16. (CURSCR),PLA0SCR
	PCALL	FILL,PLA0SCR,20H
	JP	SHELL
	N.LINKIO LNKTB##
	ASIGN8.	(NUMPLA),1
PACSTART::
	CALL	SETVDP
	PCALL	OPTION,SOM,EOM,030BH
	LD	(CURPIK),A
	LD	(NUMPLA),A
POSTOP::
	LD	A,(NUMPLA)		;MAKE SURE THE NUMBER OF PLAYERS
	CP	3			;DOESN'T GET SCREWED UP.
	JR	NZ,P1OSTOP
	;
	ASIGN8.	(NUMPLA),2
P1OSTOP:
;	ASIGN8.	(PLAY1),3
;	IF8.	(NUMPLA),.EQ.,2		;IF ONLY ONE PLAYER, DON'T GIVE
;	  ASIGN8. (PLAY2),3		;ANY MEN TO THE SECOND PLAYER
;	ELSE.
;	  ASIGN8. (PLAY2),0
;	ENDIF.	  
;POSTOP::
	CALL	SETVDP
	PCALL	VNAMEST,3800H
	ASIGN16. (CURSCR),PLA0SCR
	PCALL	CLKPRM,3,0		;DISABLE CURSOR
	SETSK	KYRD,KEYTCB,6,1
	SETSK	CBODY,BODTCB,15,1	;SET UP THE WIGGLING TASK TO RUN FOREVER
	CALL	VBLKOFF
GOTOIT:	ASIGN8.	(P0MEN),3
	LD	(P1MEN),A
	ASIGN8.	(PLAYER),00H
	ASIGN16. (SCORE),00H
	ASIGN8.  (SCORE+2),00H
	ASIGN16. (P0SCOR),00H
	ASIGN8.	(P0SCOR+2),00H
	ASIGN16. (P1SCOR),00H
	ASIGN8.	(P1SCOR+2),00H
	LD	(P0RACK),A
	LD	(P1RACK),A
	LD	(FM0FLG),A
	LD	(FM1FLG),A
	LD	(FIZZLE),A
	ASIGN8.	(BEG2SC),TRUE
	PCALL	VRAMLD,300H,PACSCR,2400H
	LD	BC,300H
	LD	HL,PACSCR
	LD	DE,PLA1SCR
	LDIR
SCREEN:	CALL	VBLKON			;ERASE THE SCREEN FOR THE SETUP
	IF8.	(PLAYER),.EQ.,0
	  PCALL	VNAMEST,3800H
	  ASIGN16. (CURSCR),PLA0SCR
	  LD	BC,300H
	  LD	HL,PACSCR
	  LD	DE,PLA0SCR
	  LDIR
	  IF8. (FIZZLE),.EQ.,TRUE
	    PCALL VRAMLD,300H,SUPSCR,3800H
	  ELSE.
	    PCALL VRAMLD,300H,PACSCR,3800H
	  ENDIF.
	  ASIGN8. (D0TSCR),00H
	  ASIGN8. (RACK),(P0RACK)
	ELSE.
	  PCALL	VNAMEST,2400H
	  ASIGN16. (CURSCR),PLA1SCR
	  IF8. (FIZZLE),.EQ.,TRUE
	    PCALL VRAMLD,300H,PACSCR,2400H
	  ELSE.
	    PCALL VRAMLD,300H,PACSCR,2400H
	  ENDIF.
	  LD	BC,300H
	  LD	HL,PACSCR
	  LD	DE,PLA1SCR
	  LDIR
	  ASIGN8. (D1TSCR),00H
	  ASIGN8. (RACK),(P1RACK)
	ENDIF.
	ASIGN8.	(DOTSCR),00H
	ASIGN8.	(DEADFL),00H
	ASIGN8.	(PLFLG1),FALSE
	ASIGN8.	(PWRTIMR),00H
	ASIGN8.	(PPFLG),FALSE		;RACK
	ASIGN8.	(PACX),7BH
	ASIGN8.	(PACY),84H
	ASIGN8. (PACST),OK
	ASIGN8.	(BLIST),GOQUAD
	ASIGN8.	(INKST),HOME
	LD	(PINST),A
	LD	(CLYST),A
	LD	A,0FFH
	LD	(PQFLG),A
	LD	(IQFLG),A
	LD	(CQFLG),A
	ASIGN8. (BSICK),FALSE
	LD	(PSICK),A
	LD	(ISICK),A
	LD	(CSICK),A
	ASIGN8. (BLIDIR),20H
	ASIGN8.	(INKDIR),10H
	LD	(PINDIR),A
	LD	(CLYDIR),A
	LD	A,0FFH
	LD	(LASTP),A
	LD	(LASTB),A
	LD	(LASTI),A
	LD	(LASTC),A
	SETCOLR	BLACK,BLACK		;BLACK THE BACKGROUND
	PCALL	VSETSPA,1,0		;SET SIZE TO 16X16, MAGNIFICATION 1X
	PCALL	SPNAME,0,0		;INITIALIZE PACMAN PATTERN
	PCALL	SPNAME,1,(BLIPAT)	;INITIALIZE BLINKY
	PCALL	SPNAME,2,(PINPAT)	;INITIALIZE PINKY
	PCALL	SPNAME,3,(INKPAT)	;INITIALIZE INKY
	PCALL	SPNAME,4,(CLYPAT)	;INITIALIZE SUE
	LD	A,4CH
	LD	(BLIEYE),A
	LD	(INKEYE),A
	LD	(PINEYE),A
	LD	(CLYEYE),A
	ASIGN8.	(BLIX),7AH
	ASIGN8.	(BLIY),3CH
	ASIGN8.	(PINX),5CH
	ASIGN8.	(PINY),4AH
	ASIGN8.	(INKX),7CH
	ASIGN8.	(INKY),4CH
	ASIGN8.	(CLYX),94H
	ASIGN8.	(CLYY),4EH
	ASIGN8.	(FRUTIMR),00H
	LD	A,30H
	LD	(DIG1),A
	LD	(DIG2),A
	LD	(DIG3),A
	LD	(DIG4),A
	LD	(DIG5),A
	PCALL	SPNAME,5,(BLIEYE)	;INITIALIZE BLINKY'S EYES
	PCALL	SPNAME,6,(PINEYE)	;INITIALIZE PINKY'S EYES
	PCALL	SPNAME,7,(INKEYE)	;INITIALIZE INKY'S EYES
	PCALL	SPNAME,8,(CLYEYE)	;INITIALIZE CLYDE'S EYES
	PCALL	SPMOVE,0,(PACY),(PACX)	;INITIALIZE PACMAN POSITION
	PCALL	SPMOVE,1,(BLIY),(BLIX)	;INITIALIZE BLINKY POSITION
	PCALL	SPMOVE,2,(PINY),(PINX)
	PCALL	SPMOVE,3,(INKY),(INKX)
	PCALL	SPMOVE,4,(CLYY),(CLYX)
	PCALL	SPMOVE,5,(BLIY),(BLIX)
	PCALL	SPMOVE,6,(PINY),(PINX)
	PCALL	SPMOVE,7,(INKY),(INKX)
	PCALL	SPMOVE,8,(CLYY),(CLYX)
	ASIGN8.	(PACDIR),00H		;SET INITIAL PACMAN DIRECTION LEFT
	ASIGN8.	(PACMTH),0H		;SET THE MOUTH CLOSED
	LD	(OUTIMR),A		;RESET THE COME OUT TIMES
	LD	(PINTIMR),A
	LD	(INKTIMR),A
	LD	(CLYTIMR),A
	PCALL	SPCOLR,0,LYELLOW 	;SET THE PACMAN COLOR TO DARK YELLOW
	PCALL	SPCOLR,1,DRED		;SET BLINKY'S COLOR TO MEDIUM RED
	PCALL	SPCOLR,5,WHITE		;SET BLINKY'S EYES TO WHITE
	PCALL	SPCOLR,6,WHITE		;INITIALIZE PINKY'S FACE
	PCALL	SPCOLR,2,LRED		;INITIALIZE PINKY'S BODY
	PCALL	SPCOLR,3,CYAN		;INITIALIZE INKY'S BODY
	PCALL	SPCOLR,7,WHITE		;INITIALIZE INKY'S EYES
	PCALL	SPCOLR,4,DYELLOW
	PCALL	SPCOLR,8,WHITE
	CALL	DISNUM
	IF8.	(RACK),.GT.,20
	  LD	A,(RACK)
	  SUB	20
	  LD	(TMP),A
	  ADD	A,10
	  LD	(TMPX),A
	ELSE.
	  ASIGN8.	(TMP),0FFH
	  ASIGN8.	(TMPX),9
	ENDIF.
	LD	DE,0FFFFH
	PUSH	DE
	REPEAT.			;THIS SHIT PUTS A FRUIT ALONG THE SIDE
	  ADD8.	(TMP),1	;FOR EACH LEVEL REACHED
	  LD	BC,(TMP)	;GET THE LOOP NUMBER
	  LD	B,00H		;CLEAR HIGH ORDER BYTE
	  LD	HL,FRUDAT	;GET THE ADDRESS OF THE FRUIT TABLE
	  LD	A,C		;SEE IF WE SHOULD ONLY DROP KEYS NOW
	  CP	12
	  JR	C,NXT@4
	  LD    L,0B8H		;IF SO, THEN ONLY DROP A KEY
	  JR	NXT@5	  
NXT@4:	  ADD	HL,BC		;ADD THE INDEX
	  LD	A,(HL)		;GET THE PROPER PATTERN OUT OF THE FRUIT TABLE
	  LD	L,A
NXT@5:	  LD	BC,30		;INITIALIZE X
	  POP	DE		;GET THE Y
	  LD	A,(TMP)		;SEE IF WE SHOULD SKIP THE TUNNEL
	  PUSH	BC
	  LD	BC,(TMPX)
	  CP	C
	  POP	BC
	  JR 	NZ,NXT@1	;IF YES, THEN DO SO
	  INC	DE
	  INC	DE
	  INC	DE
NXT@1:	  INC	DE		;INCREMENT NORMALLY
	  PUSH	DE		;SAVE THAT VALUE
	  CALL	NPACPUT		;DROP 'EM
	UNTIL8. (TMP),.EQ.,(RACK)	;DO UNTIL RACK IS THE SAME AS LOOP NO.
	POP	DE
	PCALL	PGHOMX,BLIX,(BLIDIR),BLINKY
	PCALL	PGHOMY,PINX,(PINDIR),PINKY
	PCALL	PGHOMY,INKX,(INKDIR),INKY
	PCALL	PGHOMY,CLYX,(CLYDIR),CLYDE
	CALL	VBLKOFF			;UNBLANK THE SCREEN
	SETSK	TICK,TICTCB,10,1	;ADD THE WAITER TASK
	IF8.	(RACK),.EQ.,0		;PLAY THE OPENING MUSIC
	PCALL	PUTMSG,RDYMSG
	SETSK	ANIMUS,ANIMTCB,1,1
	ASIGN8.	(STOPAM),FALSE
	WHILE8.	(STOPAM),.EQ.,FALSE
	LD	A,(KEYPRS)
	IF8.	(KEYPRS),.EQ.,0BDH
	  N.CLKRV ANIMTCB
	  JP 	RES1TART
	ENDIF.
	IF8.	(KEYPRS),.EQ.,0ABH
	  N.CLKRV ANIMTCB
	  JP RES1TART
	ENDIF.
	IF8.	(KEYPRS),.EQ.,0EAH
	  N.CLKRV ANIMTCB
	  JP HELP1
	ENDIF.
	ENDW.
	PCALL	PUTMSG,SPCMSG
	N.CLKRV	ANIMTCB
	ENDIF.
START::	CALL	DISPLA
	IF8.	(STOPAM),.NE.,FALSE
	  N.CLKRV  NSTCB
	  PCALL	AUDIOWR,7,3FH
	  PCALL PUTMSG,RDYMSG
	  LD HL,0FFFFH
	  LD BC,1
RDYLOOP:
	    LD	A,(KEYPRS)		;CHECK ALL OF THE KEYS FOR USER
	    CP	0ABH			;HELP, RESTART
	    JP	Z,RES1TART
	    CP  0BDH
	    JP	Z,RES1TART
	    CP	0EAH
	    JP  Z,HELP1
	    SBC	HL,BC
	  JR NC,RDYLOOP
	  PCALL PUTMSG,SPCMSG
	ENDIF.
	PCALL	SPMOVE,1,(BLIY),(BLIX)	;INITIALIZE BLINKY POSITION
	PCALL	SPMOVE,2,(PINY),(PINX)
	PCALL	SPMOVE,3,(INKY),(INKX)
	PCALL	SPMOVE,4,(CLYY),(CLYX)
	CALL	CRBEG
	SETSK	NOISES,NSTCB,1,1
	SETSK 	PACMOV,PACTCB,3,1	;REGION, ADD THE MOVEMENT TASK
	SETSK 	BLIMOV,BLITCB,3,2	;ADD THE BLINKY MOVEMENT TASK
	SETSK 	PILFLA,PILTCB,10,1	;ADD THE PILL FLASHING TASK
	SETSK 	PINMOV,PINTCB,3,3	;ADD THE PINKY MOVING TASK
	SETSK	INKMOV,INKTCB,3,1	;ADD INKY'S MOVEMENT TASK
	SETSK	CLYMOV,CLYTCB,3,2	;ADD CLYDE'S MOVEMENT TASK
	SETSK	SHOFRU,FRUTCB,240,1
	CALL	SCRVAR
	CALL 	CREND			;END THE CRITICAL REGION
	JP	DRIVER
RDYMSG:	DEFMSG	14,13,'READY!'
SPCMSG:	DEFMSG	14,13,'      '
DRIVER::
	CALL	SNDCHK			;RETURN THE SOUND TO NORMAL
	CALL	QUADCOM
	LD	A,(KEYPRS)
	CP	0BDH
	JP	Z,RES1TART
	CP	0ABH
	JP	Z,RES1TART
	CP	0EAH
	JP	Z,HELP1
	CP	1AH			;CTRL-Z?
	JP	Z,DEBUG			;THEN JUMP TO THE ZSID PASS POINT
	LD	A,(DOTSCR)
	CP	0D4H			;HAS THE AMOUNT OF DOTS ON ONE SCREEN
	JP	Z,DO_SCREEN		;LIMIT BEEN REACHED...THEN SET UP AGAIN
	LD	A,(PWRTIMR)		;GET THE POWER PILL ACTIVATED LOCATION
	AND	A			;IS A POWER PILL NOT RUNNING?
	JP	NZ,PACPOWER		;NO...THEN KEEP DOING IT
	LD	A,(DEADFL)		;HAS THE PACMAN BEEN CHOMPED?
	CP	TRUE
	JP	Z,DIE			;YES...THEN SHOW THE ANIMATION
	JP	DRIVER
	;
DEBUG::	ASIGN8.	(KEYPRS),00H		;PASS POINT FOR DEBUG PURPOSES
	JP	DRIVER
	;
SNDCHK:	LD	A,(EYEFLG)
	AND	A
	RET	Z
	LD	A,(BLIST)
	CP	EATEN
	RET	Z
	LD	A,(PINST)
	CP	EATEN
	RET	Z
	LD	A,(INKST)
	CP	EATEN
	RET	Z
	LD	A,(CLYST)
	CP	EATEN
	RET	Z
	ASIGN8.	(EYEFLG),FALSE
	CALL	STPEYE
	RET
DO_SCREEN:
	N.CLKRV	PACTCB
	N.CLKRV	BLITCB
	N.CLKRV	PILTCB
	N.CLKRV PINTCB
	N.CLKRV	INKTCB
	N.CLKRV	CLYTCB
	N.CLKRV	NSTCB
	N.CLKRV	FRUTCB
	PCALL	AUDIOWR,7,03FH
	ASIGN8.	(TICKFL),FALSE
	ASIGN8.	(TMP),0BH
	;
	;THIS AREA WILL FLASH THE MAZE WHITE AND DARK BLUE WHEN
	;A SCREEN IS COMPLETED
	;
SCRCNT:	PCALL	WAIT,1
	LD	A,(TMP)
	CP	01H
	JP	Z,CFIN
	SRL	A
	JP	C,SWHITE
	PCALL	VRAMWR,2000H,40H	;MAKE THE MAZE BLUE
	PCALL	VRAMWR,2002H,40H
	SUB8.	(TMP),01H
	JP	SCRCNT
SWHITE:	
	PCALL	VRAMWR,2000H,0F0H	;MAKE THE MAZE WHITE
	PCALL	VRAMWR,2002H,0F0H
	SUB8.	(TMP),01H
	JP	SCRCNT
CFIN:	N.CLKRV	TICTCB
	CALL	SETVDP
	LD	A,(RACK)
	CP	01H			;CHECK FOR INTERMISSIONS
	CALL	Z,CONTROL
	LD	A,(RACK)
	CP	04H
	CALL	Z,CONTR2
	LD	A,(RACK)
	CP	08H
	CALL	Z,CONTR3
	ASIGN8.	(ENDFLG),FALSE
	ADD8.	(RACK),01H		;INCREMENT THE RACK NUMBER
	IF8.	(PLAYER),.EQ.,0
	  ASIGN8. (P0RACK),(RACK)
	ELSE.
	  ASIGN8. (P1RACK),(RACK)
	ENDIF.
	CALL	SETVDP
	JP	SCREEN
DIE:	
	N.CLKRV PACTCB			;REMOVE MOST ALL MOVEMENT ROUTINES
	N.CLKRV BLITCB
	N.CLKRV PINTCB
	N.CLKRV	INKTCB
	N.CLKRV	CLYTCB
	N.CLKRV PILTCB
	N.CLKRV FRUTCB
	IF8.	(LASTB),.NE.,0FFH	;IF DROPPING PATTERNS THEN RESTORE
	  CALL	RSTBLI
	ENDIF.
	IF8.	(LASTP),.NE.,0FFH
	  CALL	RSTPIN
	ENDIF.
	IF8.	(LASTI),.NE.,0FFH
	  CALL	RSTINK
	ENDIF.
	IF8.	(LASTC),.NE.,0FFH
	  CALL	RSTCLY
	ENDIF.
	PCALL	PUTPAT,(LPACX),(LPACY),(LPACPT)
	ASIGN8.	(TMPX),0AH
	ASIGN8.	(TMP),60H
DIE_ANIM:
	ASIGN8.	(BLIX),7AH
	ASIGN8.	(BLIY),3CH
	ASIGN8.	(PINX),5CH
	ASIGN8.	(PINY),4CH
	ASIGN8.	(INKX),7CH
	ASIGN8.	(INKY),4CH
	ASIGN8.	(CLYX),94H
	ASIGN8.	(CLYY),4EH
	PCALL	SPCOLR,1,DRED
	PCALL	SPCOLR,2,LRED
	PCALL	SPCOLR,3,CYAN
	PCALL	SPCOLR,4,DYELLOW
	PCALL	SPCOLR,5,WHITE
	PCALL	SPCOLR,6,WHITE
	PCALL	SPCOLR,7,WHITE
	PCALL	SPCOLR,8,WHITE
	PCALL	SPMARK,1
DLOOP:	PCALL	SPNAME,0,(TMP)
	LD	A,(KEYPRS)
	CP	0BDH
	JP	Z,RES1TART
	CP	0ABH
	JP	Z,RES1TART
	CP	0EAH
	JP	Z,HELP1
	SUB8.	(TMPX),01H
	ADD8.	(TMP),04H
	PCALL	WAIT,1
	LD	A,(TMPX)		;IS THE ANIMATION FINISHED?
	AND	A
	JP	NZ,DLOOP		;NO..THEN KEEP DOING IT
	ASIGN8.	(PACX),7BH		;RESET POSITIONS AND DIRECTIONS
	ASIGN8.	(PACY),84H
	ASIGN8.	(PACPAT),00H
	LD	(PACDIR),A
	ASIGN8.	(BLIDIR),20H
	ASIGN8.	(CLYDIR),10H
	LD	(PINDIR),A
	LD	(INKDIR),A
	PCALL	SPNAME,0,(PACPAT)
	PCALL	SPMOVE,0,(PACY),(PACX)
	ASIGN8.	(PACST),OK
	ASIGN8. (BLIST),OK
	ASIGN8. (PINST),HOME
	ASIGN8.	(INKST),HOME
	ASIGN8.	(CLYST),HOME
	ASIGN8.	(BSICK),FALSE
	ASIGN8.	(PSICK),FALSE
	ASIGN8.	(ISICK),FALSE
	ASIGN8.	(CSICK),FALSE
	ASIGN8. (OUTIMR),00H
	LD	(PINTIMR),A
	LD	(INKTIMR),A
	ASIGN8.	(DEADFL),FALSE
	ASIGN8.	(CURTMR),00H
	ASIGN16. (CURPER),2BCH
	ASIGN8.	(LASTP),0FFH
	LD	(LASTB),A
	LD	(LASTC),A
	LD	(LASTI),A
	IF8.	(PLAYER),.EQ.,0
	  SUB8. (P0MEN),1			;DECREMENT A PACMAN
	  IF8. (P0MEN),.EQ.,0			;IF NO MEN, THEN SAY IT'S 
	    PCALL PUTMSG,GAMOVR			;GAME OVER
	    PCALL NPACPUT,24,17,'1'
	    N.CLKRV NSTCB
	    PCALL AUDIOWR,7,3FH
	    PCALL SPMARK,0
	    LD	BC,6
	    LD  HL,DIG5
	    LD	DE,SCORE1
	    LDIR
	    PCALL WAIT,24
	    IF8. (NUMPLA),.NE.,2
	      JP REMOVT
	    ENDIF.
	  ENDIF.
	  IF8.	(P1MEN),.NE.,0			;IF THE OTHER PLAYER HAS SOME
	    ASIGN8. (P0RACK),(RACK)		;MEN
	    ASIGN8. (D0TSCR),(DOTSCR)
	    ASIGN8. (P0FRU),(FRUTIMR)
	    ASIGN16. (P0SCOR),(SCORE)
	    ASIGN8.  (P0SCOR+2),(SCORE+2)
	    IF8. (NUMPLA),.EQ.,2		;IF THERE ARE TWO PLAYERS
	      ASIGN8. (PLAYER),1
	      ASIGN8. (DOTSCR),(D1TSCR)
	      ASIGN8. (RACK),(P1RACK)
	      ASIGN8. (FRUTIMR),(P1FRU)
	      ASIGN16. (SCORE),(P1SCOR)
	      ASIGN8. (SCORE+2),(P1SCOR+2)
	      PCALL VNAMEST,2400H
	      ASIGN16. (CURSCR),PLA1SCR
	      IF8. (BEG2SC),.EQ.,TRUE
	        ASIGN8. (BEG2SC),FALSE
	        N.CLKRV	NSTCB
		N.CLKRV	TICTCB
	        JP	SCREEN
	      ENDIF.
	    ENDIF.
	  ENDIF.
	ELSE.
	  SUB8. (P1MEN),1			;OTHERWISE TAKE THE OTHER GUYS
	  IF8. (P1MEN),.EQ.,0			;MEN
	    PCALL PUTMSG,GAMOVR			;IF GAME OVER FOR HIM, THEN SAY
	    PCALL NPACPUT,24,17,'2'		;SO
	    PCALL SPMARK,0
	    N.CLKRV NSTCB
	    PCALL AUDIOWR,7,3FH
	    LD	BC,6
	    LD	HL,DIG5
	    LD	DE,SCORE2
	    LDIR
	    PCALL WAIT,24
	  ENDIF.
	  IF8.	(P0MEN),.NE.,0			;IF THE FIRST PLAYER HAS MEN
	    ASIGN8. (PLAYER),0			;LEFT
	    ASIGN8. (P1RACK),(RACK)
	    ASIGN8. (P1FRU),(FRUTIMR)
	    ASIGN8. (FRUTIMR),(P0FRU)
	    ASIGN8. (RACK),(P0RACK)
	    ASIGN8. (D1TSCR),(DOTSCR)
	    ASIGN8. (DOTSCR),(D0TSCR)
	    ASIGN16. (P1SCOR),(SCORE)
	    ASIGN8. (P1SCOR+2),(P1SCOR+2)
	    ASIGN16. (SCORE),(P0SCOR)
	    ASIGN8. (SCORE+2),(P0SCOR+2)
	    PCALL VNAMEST,3800H
	    ASIGN16. (CURSCR),PLA0SCR
	  ENDIF.
	ENDIF.
	LD	A,(P0MEN)			;CHECK TO SEE IF BOTH PLAYERS
	LD	BC,(P1MEN)			;HAVE NO MEN LEFT
	OR	C
	JP	Z,REMOVT
	JP	START
RES1TART:
	N.CLKRV	0
	CALL	ANOFF
	PCALL	AUDIOWR,7,3FH	;CLEAR ALL SOUND CHANNELS
	PCALL	SPMARK,0
	JP	RESTART
HELP1:
	PCALL	AUDIOWR,3FH
	N.CLKRV	0
	PCALL	SPMARK,0
	JP	HELP
ZAPTSK:
	CALL	CRBEG		;GET RID OF ALL TASKS THAT MAY BE RESET ON
	N.CLKRV	TICTCB		;RE-ENTRY
	N.CLKRV	PACTCB
	N.CLKRV	PILTCB
	N.CLKRV	BLITCB
	N.CLKRV PINTCB
	N.CLKRV	INKTCB
	N.CLKRV	CLYTCB
	N.CLKRV	NSTCB
	N.CLKRV	FRUTCB
	CALL	CREND
	RET
PACPOWER:
	;  This area will handle the eating of a power pill
	;and the results thereof.
	;
	LD	A,(GHOFLG)
	AND	A
	JP	NZ,DRIVER
	LD	A,(TICKFL)		;SEE IF THE TIMER TICKED
	AND	A
	JP	Z,DRIVER
	ASIGN8.	(TICKFL),FALSE
	LD	A,(PWRTIMR)		;SEE IF THE POWER PILL LIMIT HAS BEEN
	AND	A			;REACHED
	JP	Z,DRIVER
	LD	A,(BSICK)
	LD	BC,(PSICK)
	OR	C
	LD	BC,(ISICK)
	OR	C
	LD	BC,(CSICK)
	OR	C
	JP	NZ,NXT@P1
	ASIGN8.	(PWRTIMR),00H
	JP	NXT@P2
NXT@P1:	LD	A,(PWRTIMR)
	DEC	A			;IF NOT, THEN DECREMENT THE TIMER
	LD	(PWRTIMR),A
	CP	FALSE
	JP	NZ,DRIVER
NXT@P2:	ASIGN8.	(BSICK),FALSE
	LD	(PSICK),A
	LD	(ISICK),A
	LD	(CSICK),A
	IF8.	(BLIST),.EQ.,SICK	;IF THE LIMIT HAS JUST BEEN REACHED
	ASIGN8.	(BLIST),OK		;THEN RESET THE STATUS, AS LONG AS THE
	ENDIF.				;GHOST ISN'T ON IT'S WAY HOME
	IF8.	(PINST),.EQ.,SICK
	ASIGN8.	(PINST),OK
	ENDIF.
	IF8.	(INKST),.EQ.,SICK
	ASIGN8.	(INKST),OK
	ENDIF.
	IF8.	(CLYST),.EQ.,SICK
	ASIGN8.	(CLYST),OK
	ENDIF.
	ASIGN8.	(PPFLG),FALSE
	CALL	STPILL
	JP	DRIVER
WAIT::	;This routine waits until the flag is set by the tick task, then
	;it will return.
	;
	LD	B,C
CHKW:	LD	A,(TICKFL)
	CP	TRUE
	JP	NZ,CHKW
	ASIGN8.	(TICKFL),FALSE
	DJNZ	CHKW
	RET
TICK::	;All this does is set a flag when this task is executed
	;
	ASIGN8.	(TICKFL),TRUE
	RET
PACMOV::IF8.	(GHOFLG),.EQ.,TRUE
	  RET
	ENDIF.
	IF8.	(PLFLG1),.EQ.,TRUE
	  SPEED	PACTCB,-1
	  ASIGN8. (PLFLG1),FALSE
	ENDIF.
	CALL	PACDEL			;CHECK THE TIMING
	CALL	JOYRD			;SEE WHERE TO GO
	LD	A,(QUEDIR)		;GET THE QUEUE'D DIRECTION
	CP	0FFH			;IS IT THE IMPOSSIBLE VALUE
	JP	Z,JOYCHG		;CONTINUE
	ASIGN8.	(CURDIR),(QUEDIR)	;GIVE CHKHIT DIRECTION DATA
	ASIGN8.	(FORWARD),FALSE		;IT'S NOT FORWARD DATA
	ASIGN8.	(CANTGO),FALSE		;RESET CANTGO FLAG
	CALL	CHKHIT			;CHECK OUT THE DIRECTION
	LD	A,(CANTGO)		;GET THE STATUS OF THE CANTGO FLAG
	CP	TRUE			;IS IT SET
	JP	Z,JOYCHG		;CONTINUE
	PCALL	NOREV,(PACDIR),(QUEDIR)	;IS THE QUEUE'D DIRECTION IN REVERSE?
	LD	A,(REVFL)
	CP	TRUE
	JP	Z,NOJOY
	ASIGN8.	(PACDIR),(QUEDIR)	;TAKE THE PACMAN DIRECTION FROM THE QUE
NOJOY:	ASIGN8.	(QUEDIR),0FFH		;RESET THE QUEUE
	ASIGN8.	(PACST),0H		;START UP THE PACMAN AGAIN
JOYCHG:	LD	A,(PACST)		;GET PACMANS STATUS
	CP	STOP			;IS HE STOPPED?	
	RET	Z			;DON'T DO ANYTHING
	ASIGN8.	(FORWARD),TRUE		;TELL CKHIT TO TREAT DATA AS FORWARD
	ASIGN8.	(CURDIR),(PACDIR)	;GIVE CKHIT THE DATA
	CALL	CHKHIT			;CHECK PLAYING BOARD
	LD	A,(PACMTH)		;GET PACMAN'S MOUTH STATE
	CP	0CH			;IS IT CLOSING
	JP	NZ,PACONT		;NO...CONTINUE
	ASIGN8.	(PACMTH),0FCH		;CLOSE MOUTH
PACONT:	ADD8.	(PACMTH),4		;INCREMENT MOUTH PATTERN
	LD	A,(PACMTH)		;
	LD	C,A			;GET MOUTH POSITION
	LD	A,(PACDIR)		;GET THE PACMAN DIRECTION
	ADD	A,C			;ADD EM TOGETHER
	LD	(PACPAT),A		;SHOVE IT INTO THE PATTERN VECTOR
	PCALL	SPNAME,0,(PACPAT)	;ADJUST THE PATTERN
	LD	A,(PACDIR)		;GET THE DIRECTION AGAIN
	AND	A			;IS IT RIGHT?
	JP	NZ,CKDWN		;NO...CHECK IF IT'S DOWN
	ADD8.	(PACX),2		;YES..ADD 1 THE THE X POSITION
	JP	MDFY			;GOTO THE MODIFY VECTOR
CKDWN:	LD	A,(PACDIR)		;GET THE DIRECTION AGAIN
	CP	10H			;IS IT DOWN?
	JP	NZ,CKLFT		;NO...CHECK IF IT'S LEFT
	ADD8.	(PACY),2		;YES..INCREMENT THE Y POSITION
	JP 	MDFY			;GOTO THE MODIFY VECTOR
CKLFT:	LD	A,(PACDIR)		;NOT AGAIN?!?!??!!!
	CP	20H			;IS IT LEFT?
	JP	NZ,DO_UP		;NO..IT MUST BE UP THEN!
	SUB8.	(PACX),2		;SUBTRACT 1 FROM THE X POSITION
	JP	MDFY			;GOTO THE MDFY VECTOR
DO_UP:	SUB8.	(PACY),2		;SUBTRACT 1 FROM THE Y VECTOR
MDFY:	PCALL	SPMOVE,0,(PACY),(PACX)	;MOVE THE PACMAN ACCORDINGLY
	RET
	;
	;THIS ROUTINE CHECKS THE JOYSTICK AND MODIFIES THE DIRECTION
	;ACCORDINGLY
	;
JOYRD:	IF8. (PLAYER),.EQ.,0
DOJOY1:	  N.DEVRDY KEYBOARD,JSTCK1	;SEE IF THE JOYSTICK HAS BEEN MOVED
	  AND	A			;WAS IT?
	  JP	Z,JCONT5		;THEN FORGET ABOUT READING IT
	  N.DEVIO KEYBOARD,JSTCK1	;GET THE JOYSTICK VALUE
	ELSE.
	IF8. (PLAYER),.EQ.,1
	  IF8. (CURPIK),.EQ.,3		;IF PLAYER SELECTED TWO JOYSTICKS
	  N.DEVRDY KEYBOARD,JSTCK2
	  AND	A
	  JP	Z,JCONT5
	  N.DEVIO KEYBOARD,JSTCK2
	ELSE.
	  JP DOJOY1			;IF TWO PLAYER, ONE JOYSTICK
	ENDIF.
	ELSE.
	  LD	A,(DEMOV)
	ENDIF.
	ENDIF.
	AND	0FH			;CLEAR UPPER GARBAGE NYBBLE
	LD	(MOV),A			;TEMPORARILY STORE IT AWAY
	BIT	0,A			;IS IT LEFT?
	JR	Z,JCONT2		;NO...THEN CHECK ANOTHER
	ASIGN8.	(CANTGO),FALSE		;RESET CANTGO FLAG
	ASIGN8.	(FORWARD),FALSE		;RESET FORWARD FLAG
	ASIGN8.	(CURDIR),20H		;SET THE DIRECTION TO BE CHECKED
	CALL	CHKHIT			;CHECK FOR A PATTERN IN THAT DIRECTION
	LD	A,(CANTGO)		;GET THE STATE OF THE CANTGO FLAG
	CP	TRUE			;IS IT SET?
	JP	NZ,J@CON2		;GO TO THE QUEUE HANDLER
	LD	A,(MOV)			;GET THE DIRECTION AGAIN
	CP	1			;IS THAT THE ONLY DIRECTION
	JP	Z,QUEHDL
	JR	JCONT2
J@CON2:	ASIGN8.	(PACDIR),20H		;DIRECTION IS LEFT
	ASIGN8.	(PACST),0H		;START THE PACMAN AGAIN
	RET				;CONTINUE
JCONT2:	LD	A,(MOV)			;GET THE JOYSTICK POSITION
	BIT	1,A			;IS IT DOWN?
	JP	Z,JCONT3		;NO...THEN CHECK ANOTHER
	ASIGN8.	(CANTGO),FALSE		;RESET CANTGO FLAG
	ASIGN8.	(FORWARD),FALSE		;RESET FORWARD FLAG
	ASIGN8.	(CURDIR),10H		;SET THE DIRECTION TO BE CHECKED
	CALL	CHKHIT			;CHECK FOR A PATTERN IN THAT DIRECTION
	LD	A,(CANTGO)		;GET THE STATE OF THE CANTGO FLAG
	CP	TRUE			;IS IT SET?
	JP	NZ,J@CON3		;GOTO THE QUEUE HANDLER
	LD	A,(MOV)
	CP	2
	JP	Z,QUEHDL
	JR	JCONT3
J@CON3:	ASIGN8.	(PACDIR),10H		;YES..DIRECTION IS DOWN
	ASIGN8.	(PACST),0H		;START UP THE PACMAN
	RET				;CONTINUE
JCONT3:	LD	A,(MOV)			;GET THE POSITION
	BIT	2,A			;IS IT RIGHT?
	JP	Z,JCONT4		;NO...THEN CHECK ANOTHER
	ASIGN8.	(CANTGO),FALSE		;RESET CANTGO FLAG
	ASIGN8.	(FORWARD),FALSE		;RESET FORWARD FLAG
	ASIGN8.	(CURDIR),00H		;SET THE DIRECTION TO BE CHECKED
	CALL	CHKHIT			;CHECK FOR A PATTERN IN THAT DIRECTION
	LD	A,(CANTGO)		;GET THE STATE OF THE CANTGO FLAG
	CP	TRUE			;IS IT SET?
	JP	NZ,J@CON4		;GOTO THE QUEUE HANDLER
	LD	A,(MOV)
	CP	4
	JP	Z,QUEHDL
	JR	JCONT4
J@CON4:	ASIGN8.	(PACDIR),00H		;YES..DIRECTION IS RIGHT
	ASIGN8.	(PACST),0H		;START UP THE PACMAN
	RET				;CONTINUE
JCONT4:	LD	A,(MOV)			;YAWN..HERE WE GO AGAIN
	BIT	3,A			;IS IT UP?
	RET	Z			;NO??? UNCOORDINATED JOYSTICK HOLDER
	ASIGN8.	(CANTGO),FALSE		;RESET CANTGO FLAG
	ASIGN8.	(FORWARD),FALSE		;RESET FORWARD FLAG
	ASIGN8.	(CURDIR),30H		;SET THE DIRECTION TO BE CHECKED
	CALL	CHKHIT			;CHECK FOR A PATTERN IN THAT DIRECTION
	LD	A,(CANTGO)		;GET THE STATE OF THE CANTGO FLAG
	CP	TRUE			;IS IT SET?
	JP	Z,QUEHDL		;GOTO THE QUEUE HANDLER
	ASIGN8.	(PACDIR),30H		;YES...DIRECTION IS UP
	ASIGN8.	(PACST),0H		;START UP THE PACMAN
JCONT5:	RET				;BACK TO MOVEMENT
QUEHDL:	ASIGN8.	(QUEDIR),(CURDIR)	;QUEUE THE DIRECTION
	RET				;RETURN FROM WHENCE IT CAME
	;
;
;
; This routine will check to see if the pacman is about to infringe on any 
; of the walls of the maze(blue).  It will also check to see if he is right
; above any dots, in which case he will eat them and modify the score
; appropriately.
;
;
CHKHIT:	LD	A,(CURDIR)		;GET THE PACMAN'S CURRENT DIRECTION
	AND	A			;IS IT RIGHT?
	JP 	NZ,CHK2			;NO...TRY DOWN
	ASIGN8.	(XMDFY),0EH		;MAKE AN ADJUSTMENT
	ASIGN8.	(YMDFY),4		;ANOTHER
	JP	CHKPAT			;TRY IT OUT
CHK2:	CP	010H			;IS IT DOWN?
	JP	NZ,CHK3			;NO..TRY LEFT
	ASIGN8.	(XMDFY),4		;ADJUST
	ASIGN8.	(YMDFY),14		;THEM
	JP	CHKPAT			;TRY IT OUT
CHK3:	CP	20H			;IS IT LEFT?
	JP	NZ,CHK4			;IT MUST BE UP THEN
	ASIGN8.	(XMDFY),0		;ADJUST
	ASIGN8.	(YMDFY),4		;THEM
	JP	CHKPAT			;TRY IT OUT
CHK4:	ASIGN8.	(XMDFY),4		;ADJUST
	ASIGN8.	(YMDFY),0		;THEM
CHKPAT:	ADD8.	(XMDFY),(PACX)		;ADD THE ADJUSTMENTS TO THE POSITION
	ADD8.	(YMDFY),(PACY)		;FOR THE Y TOO
	LD	A,(XMDFY)		;GET THE MODIFIED X VECTOR
	SRL	A			;DIVIDE IT BY 2
	SRL	A			;AGAIN
	SRL	A			;AGAIN FOR A TOTAL DIVISION BY 8
	LD	(TMPX),A		;STORE IT AWAY
	LD	A,(PACX)		;GET THE MODIFIED X
	AND	07H			;FIND THE REMAINDER
	CP	05H			;IS IT ON A DOT LINE?
	JP	Z,CHKC1			;YES...CONTINUE
	LD	A,(CURDIR)		;NO....GET THE CURRENT DIRECTION
	CP	10H			;IS IT RIGHT?
	JP	Z,HITWAL		;YES...THEN HE'S TRYING TO HIT A WALL
	CP	30H			;NO....THEN SEE IF IT'S LEFT
	JP	Z,HITWAL		;YES...HE'S TRYING TO HIT THE WALL
CHKC1:	LD	A,(YMDFY)		;GET THE MODIFIED Y VECTOR
	SRL	A			;DIVIDE BY 2
	SRL	A			;AGAIN
	SRL	A			;AGAIN FOR A TOTAL OF 8
	LD	(TMPY),A		;STORE IT AWAY
	LD	A,(PACY)		;GET THE MODIFIED Y
	AND	07H			;GET THE REMAINDER
	CP	04H			;IS IT ON A DOT COLUMN?
	JP	Z,CHKC2			;YES...CONTINUE
	LD	A,(CURDIR)		;GET THE CURRENT DIRECTION
	CP	00H			;IS IT DOWN?
	JP	Z,HITWAL		;YES...THEN HE'S TRYING TO HIT A WALL
	CP	20H			;NO...THEN CHECK IF IT'S UP
	JP	Z,HITWAL		;YES...THEN HE'S GOING FOR A WALL
CHKC2:	PCALL	NPACGET,(TMPX),(TMPY)	;GET THE PATTERN IN QUESTION
	LD	(OFFPAT),A		;STORE THE OFFENDING PATTERN
	CP	19H
	JP	NC,CHKDOT
	CP	08H
	JP	C,HITWAL
	CP	0FH			;CHECK THE OTHER WALL PIECES
	JP	NC,HITWAL		;YES..ALL IN ALL IT'S JUST ANOTHER....
CHKDOT:	ASIGN8.	(XMDFY),8		;ADJUST X FOR DOT AND PILL CHECKING
	ASIGN8.	(YMDFY),8		;ADJUST Y FOR DOT AND PILL CHECKING
	ADD8.	(XMDFY),(PACX)		;ADD THE ADJUSTMENT
	ADD8.	(YMDFY),(PACY)		;AGAIN....
	LD	A,(XMDFY)
	SRL	A
	SRL	A
	SRL	A
	LD	(TMPX),A
	LD	(LPACX),A
	LD 	A,(YMDFY)
	SRL	A
	SRL	A
	SRL	A
	LD	(TMPY),A
	LD	(LPACY),A
	PCALL	NPACGET,(TMPX),(TMPY)	;GET THE PATTERN PACMAN IS CURRENLY ON
	CP	08H			;IS IT A DOT?
	JP	Z,DOTEAT		;YES....GOTO THE DOT EATEN HANDLER
	CP 	09H			;IS IT A POWER PILL?
	JP	Z,PILEAT		;YES...GOTO THE PILL EATEN HANDLER
	CP	0BH			;IS IT AN OFF DOT?
	JP	Z,PILEAT		;YES..GOTO THE PILL EATEN HANDLER
	CP	0B9H
	PUSH	AF
	LD	A,0AH
	LD	(LPACPT),A
	POP	AF
	RET	Z
	RET	NC
	CP	99H			;IS IT A FRUIT OF SOME KIND
	JP 	NC,FRUEAT		;YES...GOTO THE FRUIT HANDLER
	RET				;OTHERWISE CONTINUE MOVING
HITWAL:	ASIGN8.	(CANTGO),TRUE		;PUT THE BRAKES ON THE PACMAN
	LD	A,(FORWARD)		;GET THE STATUS OF THE FORWARD FLAG
	CP	TRUE			;IS IT FORWARD DATA?
	JP	NZ,NOFOR		;NO..LEAVE
	ASIGN8.	(PACST),STOP		;PUT THE BRAKES ON PACMAN
NOFOR:	JP	CHKDOT
DOTEAT:	PCALL	NPACPUT,(TMPX),(TMPY),0AH;BLANK OUT THAT LOCATION
	LD	(LPACPT),A
	PCALL	HTOD,01H		;CONVERT IT TO BCD
	CALL	DISCOR			;UPDATE THE SCORE
	ADD8.	(DOTSCR),01H
	IF8.	(EYEFLG),.NE.,TRUE
	  LD	A,(WHIFLG)
	  XOR	1
	  LD	(WHIFLG),A
	  IF8.	(WHIFLG),.EQ.,TRUE	;SET THE PROPER SOUND FLAG
	    ASIGN8. (WACFLG),TRUE	;DEPENDING IF THE DOT EATEN IS ODD
	  ELSE.				;OR EVEN
	    ASIGN8. (CKAFLG),TRUE
	  ENDIF.
	ENDIF.
	SPEED	PACTCB,-1		;SLOW DOWN PACCIE A BIT
	ASIGN8.	(PLFLG1),TRUE
	IF8.	(TMPX),.EQ.,22
	  IF8.  (TMPY),.EQ.,4
	    IF8. (DOTSCR),.EQ.,0D4H
	      IF8. (RACK),.EQ.,1
		ASIGN8. (FIZZLE),TRUE
	      ENDIF.
	    ENDIF.
	  ENDIF.
	ENDIF.
	RET
PILEAT:
	PCALL	NPACPUT,(TMPX),(TMPY),0AH;BLANK OUT THAT LOCATION
	PCALL	HTOD,05H		;COVERT IT TO BCD
	CALL	DISCOR			;UPDATE THE SCORE
	ADD8.	(DOTSCR),01H		;ADD A BIT TO THE DOT SCORE
	CALL	PILDUR			;MAKE A PROPER PILL DURATION FOR THIS
	IF8.	(PWRTIMR),.NE.,00H	;LEVEL
	ASIGN16. (SGVAL),10H		;SET THE BEING EATEN VALUE
	ASIGN8.	(SGPAT),0ECH		;SET THE SPRITE NUMBER PATTERN TO BE
	ASIGN8.	(PPFLG),TRUE		;DROPPED, SET THE POWER PILL SOUND FLAG
	ASIGN8. (WACFLG),FALSE		;ON
	LD	(CKAFLG),A
	IF8.	(BLIST),.EQ.,GOQUAD
	  JP SB1
	ENDIF.
	IF8.	(BLIST),.EQ.,OK
SB1:	  ASIGN8. (BLIST),SICK
	  ASIGN8. (BSICK),TRUE
	  IF8. (LASTB),.NE.,0FFH	;IF WE WERE CURRENTLY DROPPING PATTERNS
	    CALL RSTBLI			;RESTORE HIS PATTERNS
	    ASIGN8. (LASTB),0FFH
	  ENDIF.
	  CALL BLISCK
	ELSE.
	  IF8. (BLIST),.EQ.,HOME
	    ASIGN8. (BSICK),TRUE
	    CALL BLISCK
	  ELSE.
	    IF8. (BLIST),.EQ.,GETOUT
	      ASIGN8. (BSICK),TRUE
	      CALL BLISCK
	    ELSE.
	      IF8. (BLIST),.EQ.,SICK
	        CALL BLISCK
	      ENDIF.
	    ENDIF.
	  ENDIF.
	ENDIF.
	IF8.	(PINST),.EQ.,GOQUAD
	  JP SP1
	ENDIF.
	IF8.	(PINST),.EQ.,OK
SP1:	  ASIGN8. (PINST),SICK
	  ASIGN8. (PSICK),TRUE
	  IF8.	(LASTP),.NE.,0FFH	;IF CURRENTLY DROPPING PATTERNS
	    CALL RSTPIN			;RESTORE HIS PATTERNS
	    ASIGN8. (LASTP),0FFH
	  ENDIF.
	  CALL PINSCK
	ELSE.
	  IF8. (PINST),.EQ.,HOME
	    ASIGN8. (PSICK),TRUE
	    CALL PINSCK
	  ELSE.
	    IF8. (PINST),.EQ.,GETOUT
	      ASIGN8. (PSICK),TRUE
	      CALL PINSCK
	    ELSE.
	      IF8. (PINST),.EQ.,SICK
		CALL PINSCK
	      ENDIF.
	    ENDIF.
	  ENDIF.
	ENDIF.
	IF8. (INKST),.EQ.,GOQUAD
	  JP SI1
	ENDIF.
	IF8. (INKST),.EQ.,OK
SI1:	  ASIGN8. (INKST),SICK
	  ASIGN8. (ISICK),TRUE
	  IF8. (LASTI),.NE.,0FFH
	    CALL RSTINK
	    ASIGN8. (LASTI),0FFH
	  ENDIF.
	  CALL INKSCK
	ELSE.
	  IF8. (INKST),.EQ.,HOME
	    ASIGN8. (ISICK),TRUE
	    CALL INKSCK
	  ELSE.
	    IF8. (INKST),.EQ.,GETOUT
	      ASIGN8. (ISICK),TRUE
	      CALL INKSCK
	    ELSE.
	      IF8. (INKST),.EQ.,SICK
		CALL INKSCK
	      ENDIF.
	    ENDIF.
	  ENDIF.
	ENDIF.
	IF8. (CLYST),.EQ.,GOQUAD
	  JP SC1
	ENDIF.
	IF8. (CLYST),.EQ.,OK
SC1:	  ASIGN8. (CLYST),SICK
	  ASIGN8. (CSICK),TRUE
	  IF8. (LASTC),.NE.,0FFH
	    CALL RSTCLY
	    ASIGN8. (LASTC),0FFH
	  ENDIF.
	  CALL CLYSCK
	ELSE.
	  IF8. (CLYST),.EQ.,HOME
	    ASIGN8. (CSICK),TRUE
	    CALL CLYSCK
	  ELSE.
	    IF8. (CLYST),.EQ.,GETOUT
	      ASIGN8. (CSICK),TRUE
	      CALL CLYSCK
	    ELSE.
	      IF8. (CLYST),.EQ.,SICK
		CALL CLYSCK
	      ENDIF.
	    ENDIF.
	  ENDIF.
	ENDIF.
	ENDIF.
	RET
FRUEAT:
	CALL	EATFRU
	ASIGN8.	(FRTFLG),TRUE
	RET
BLISCK::
	PCALL	SPNAME,1,58H
	PCALL	SPNAME,5,5CH
	PCALL	SPCOLR,5,WHITE
	PCALL	SPCOLR,1,DBLUE
	RET
PINSCK::
	PCALL	SPNAME,6,5CH
	PCALL	SPNAME,2,58H
	PCALL	SPCOLR,2,DBLUE
	PCALL	SPCOLR,6,WHITE
	RET
INKSCK::
	PCALL	SPNAME,3,58H
	PCALL	SPNAME,7,5CH
	PCALL	SPCOLR,3,DBLUE
	PCALL	SPCOLR,7,WHITE
	RET
CLYSCK::
	PCALL	SPNAME,4,58H
	PCALL	SPNAME,8,5CH
	PCALL	SPCOLR,4,DBLUE
	PCALL	SPCOLR,8,WHITE
	RET
;
;	This routine will convert a 16 bit number to it's decimal
;	equivilent.
;
HTOD::
	XOR	A		;CLEAR FLAGS
	LD	A,(SCORE)	;GET THE LOW ORDER BYTE
	ADD	A,C		;ADD THE LOW ORDER ONE TO IT
	DAA			;ADJUST IT TO BCD
	LD	(SCORE),A	;PUT IT BACK
	LD	A,(SCORE+1)	;GET THE HIGH ORDER OF THE SCORE
	ADC	A,B		;ADD THE HIGH ORDER 
	DAA			;ADJUST IT
	LD	(SCORE+1),A	;PUT IT BACK
	LD	A,(SCORE+2)	;GET THE NEXT HIGHER ORDER
	ADC	A,0		;JUST ADD THE CARRY TO IT
	DAA			;ADJUST IT
	LD	(SCORE+2),A	;PUT IT BACK
	;
NXT@3:	IF16.	(SCORE),.GE.,1000H	;THIS PART WILL CHECK FOR FREE MAN
	  IF8. (PLAYER),.EQ.,0
	    IF8. (FM0FLG),.NE.,TRUE
	        ADD8. (P0MEN),1
		ASIGN8. (FM0FLG),TRUE
	        ASIGN8. (FREEFLG),TRUE
	    ENDIF.
	  ELSE.
	    IF8. (FM1FLG),.NE.,TRUE
	        ADD8. (P1MEN),1
	        ASIGN8. (FM1FLG),TRUE
	        ASIGN8. (FREEFLG),TRUE
	    ENDIF.
	  ENDIF.
	  CALL DISPLA
	ENDIF.
	RET				
;
;
;  This routine will diplay the current score in the box above the ghosts'
;  hideout.
;
DISCOR::LD	HL,(SCORE)		;GET THE CURRENT SCORE
	LD	A,L			;GET THE LOW ORDER BYTE	
	AND	0FH			;MASK OUT UPPER NYBBLE
	OR	30H			;CHANGE IT TO AN ASCII CHARACTER
	LD	(DIG1),A		;STORE IT AWAY
	LD	A,L			;GET THE LOWER BYTE
	SRL	A			;MOVE THE HIGH NYBBLE INTO THE LOWER
	SRL	A
	SRL	A
	SRL	A
	OR	30H			;CHANGE IT TO ASCII
	LD	(DIG2),A		;STORE IT AWAY
	LD	A,H			;GET HIGH ORDER BYTE
	AND	0FH			;MASK OUT UPPER NYBBLE
	OR	30H			;CHANGE IT TO ASCII
	LD	(DIG3),A		;STORE IT AWAY
	LD	A,H			;GET THE HIGH BYTE
	SRL	A			;MOVE THE UPPER NYBBLE INTO THE LOWER
	SRL	A
	SRL	A
	SRL	A
	OR	30H			;CHANGE IT TO ASCII
	LD	(DIG4),A		;STORE IT AWAY
	LD	A,(SCORE+2)
	AND	0FH
	OR	30H
	LD	(DIG5),A

;
DISNUM:
	;THIS PART OF THE ROUTINE WILL ACTUALLY DISPLAY THE NUMBERS IN THE
	;PART INSIDE THE HIDEOUT
	;
	IF8.	(DIG5),.EQ.,30H
	ASIGN8. (DIG5),20H
	IF8.	(DIG4),.EQ.,30H		;DESTROY ALL LEADING ZEROS
	  ASIGN8. (DIG4),20H
	  IF8.    (DIG3),.EQ.,30H
	    ASIGN8. (DIG3),20H
	    IF8.    (DIG2),.EQ.,30H
	      ASIGN8. (DIG2),20H
	      IF8.    (DIG1),.EQ.,30H
		ASIGN8.	(DIG1),20H
	      ENDIF.
	    ENDIF.
	  ENDIF.
	ENDIF.
	ENDIF.
	IF8.	(PLAYER),.EQ.,0
	  LD	BC,6			;PUT PLAYERS SCORE INTO ENDSCR
	  LD	HL,DIG5			;SCORE
	  LD	DE,SCORE1
	  LDIR
	ELSE.	
	  LD	BC,6			;FOR THE OTHER PLAYER TOO
	  LD	HL,DIG5
	  LD	DE,SCORE2
	  LDIR
	ENDIF.
	LD	HL,SCORE1		;GET THE ADDRESS OF THE FIRST SCORE
	LD	DE,SCORE2		; ... AND OF THE SECOND
	LD	B,5			;INITIALIZE THE LOOP
HILOOP:	LD	A,(DE)			;GET SCORE2'S DIGIT
	CP	(HL)			;COMPARE IT TO SCORE1'S
	JR	Z,LOOPAG		;IF THE SAME, THE GO TO THE NEXT LOWER
	JR	C,SCO1HI		;IF GREATER, THEN PUT SCORE1 INTO HISCOR
	JR	SCO2HI			;OTHERWISE SCORE2 IS HI
LOOPAG:	INC	HL			;GO ONTO NEXT DIGIT
	INC	DE
	DJNZ	HILOOP			;ONLY IF DIGITS LEFT
SCO1HI:	LD	BC,6			;MOVE SCORE1 INTO HISCOR
	LD	HL,SCORE1
	LD	DE,BUF1A
	LDIR
	JR	DO_HI
SCO2HI:	LD	BC,6			;MOV SCORE2 INTO THE BUFFER
	LD	HL,SCORE2
	LD	DE,BUF1A
	LDIR
DO_HI:	LD	HL,BUF1A		;NOW DO THE SAME AS BEFORE ONLY WITH
	LD	DE,HISCOR		;THE HISCORE
	LD	B,5
HI1LOOP:LD	A,(DE)
	CP	(HL)
	JR	Z,LOOP1G		;TRY THE NEXT DIGIT
	JR	C,SCONHI		;WE HAVE A NEW HIGH SCORE
	JR	GODIS			;THE OLD ONE IS STILL THE HIGHEST
LOOP1G:	INC	HL
	INC	DE
	DJNZ	HI1LOOP
SCONHI:	LD	BC,6			;MOVE THE NEW HI SCORE INTO THE PROPER
	LD	HL,BUF1A		;PLACE
	LD	DE,HISCOR
	LDIR
	;
GODIS:	PCALL	NPACPUT,0EH,0BH,(DIG5)
	PCALL	NPACPUT,0FH,0BH,(DIG4)	;PUT THE HIGHEST NUMBER ON THE SCREEN
	PCALL	NPACPUT,10H,0BH,(DIG3)	;THE SECOND HIGHEST
	PCALL	NPACPUT,11H,0BH,(DIG2)	;THE SECOND LOWEST
	PCALL	NPACPUT,12H,0BH,(DIG1)	;THE LOWEST
	PCALL	NPACPUT,13H,0BH,30H	;DUMMY ZERO
	RET
PILFLA:
	; This is the task that makes the power pills flash.  They flash
	; at a fairly high speed (6 Hz)
	PCALL	NPACGET,3,3		;GET THE FIRST DOT
	CP	0AH			; HAS IT BEEN EATEN?
	JP	Z,PM2			; CONTINUE
	CP	09H			; IS IT ON?
	JP	NZ,PO1			;THEN TURN IT ON
	PCALL	NPACPUT,3,3,0BH		; YES...TURN IT OFF
	JP 	PD2			; CONTINUE
PO1:	PCALL	NPACPUT,3,3,09H		; TURN IT ON ,ON TURN IT ON AGAIN
PD2:	PCALL 	NPACGET,28,3		; GET THE SECOND PILL
	CP	0AH			; HAS IT BEEN EATEN?
	JP	Z,PM3			; CONTINUE
	CP 	09H			; IS IT ON?
	JP	NZ,PO2			; THEN TURN IN ON
	PCALL	NPACPUT,28,3,0BH		; YES...TURN IT OFF
	JP	PD3			; CONTINUE
PO2:	PCALL	NPACPUT,28,3,09H		; TURN IT ON
PD3:	PCALL	NPACGET,3,16		; GET THE THIRD PILL
	CP	0AH			; HAS IT BEEN EATEN?
	JP 	Z,PM4			; CONTINUE
	CP 	09H			; IS IT ON?
	JP	NZ,PO3			; THEN TURN IT ON
	PCALL	NPACPUT,3,16,0BH		; YES...TURN IT OFF
	JP	PD4			; CONTINUE
PO3:	PCALL	NPACPUT,3,16,09H  	; TURN IT ON
PD4:	PCALL	NPACGET,28,16		; GET THE LAST PILL
	CP	0AH			; HAS IT BEEN EATEN?
	JR	Z,PM5			; RETURN TO MAIN				
	CP 	09H			; IS IT ON?
	JP	NZ,PO4			; THEN TURN IT ON
	PCALL	NPACPUT,28,16,0BH	; YES...TURN IT OFF
	RET				; RETURN
PO4:	PCALL	NPACPUT,28,16,09H	; TURN IT ON
	RET
PM2:	PCALL	PUTPAT,3,3,0AH
	JP	PD2
PM3:	PCALL	PUTPAT,28,3,0AH
	JP	PD3
PM4:	PCALL	PUTPAT,3,16,0AH
	JP	PD4
PM5:	PCALL	PUTPAT,28,16,0AH
	RET
KYRD::
	; This task will get input from the keyboard for restarting,
	; exiting, getting instructions, and debugging
	;
	N.DEVRDY KEYBOARD,KEYSTROKE	;SEE IF THE KEYBOARD HAS SOME DATA
	CP	FALSE			;HAS IT?
	JP	Z,NOKEY			;NO...THEN FORGET ABOUT READING IT
	N.DEVIO KEYBOARD,KEYSTROKE	;GET THE VALUE
	PUSH	AF
	LD	A,(GOTIT)
	CP	80H
	JR	Z,KEYIG
	POP	AF
	PUSH	AF
	LD	(GOTIT),A
KEYIG:	POP	AF
	JR	KEYOUT
NOKEY:	XOR	A
KEYOUT:	LD	(KEYPRS),A
	  IF8.	(GOTIT),.EQ.,80H
	    ASIGN8. (P0MEN),0FFH
	  ELSE.
	    RET
	ENDIF.
	RET
;
SETVDP::
	CALL	VSETG1
	SETCOLR	DBLUE,DBLUE
;	PCALL	VNAMEST,3800H
	PCALL	VPTRNST,0H
	PCALL	VCOLRST,2000H
	PCALL	VSPRIST,1800H
	PCALL	VATRIST,3C00H
	PCALL	RPATRN,PACBOARD
	IF8.	(PLAYER),.EQ.,0
	  PCALL	VFILL,300H,20H,3800H
	  PCALL	FILL,PLA0SCR,20H
	ELSE.
	  PCALL VFILL,300H,20H,2400H
	  PCALL FILL,PLA1SCR,20H
	ENDIF.
	PCALL	LPATRN,SPACSP,1800H
	PCALL	VRAML8,20H,PACCOL,2000H
	PCALL	SPMARK,0
	RET
DISPLA:	IF8.	(PLAYER),.EQ.,0
	  ASIGN8. (TMP),(P0MEN)
	ELSE.
	  ASIGN8. (TMP),(P1MEN)
	ENDIF.
	IF8.	(TMP),.GT.,1
	  PCALL	NPACPUT,15,19,0AAH
	ELSE.
	  PCALL	NPACPUT,15,19,0AH
	ENDIF.
	IF8.	(TMP),.GT.,2
	  PCALL	NPACPUT,16,19,0AAH
	ELSE.
	  PCALL	NPACPUT,16,19,0AH
	ENDIF.
	IF8.	(TMP),.GT.,3
	  PCALL	NPACPUT,15,20,0AAH
	ELSE.
	  PCALL	NPACPUT,15,20,0AH
	ENDIF.
	IF8.	(PLAYER),.EQ.,0
	  PCALL PUTMSG,P0MSG
	ELSE.
	  PCALL	PUTMSG,P1MSG
	ENDIF.
	RET
FILL:	;THIS ROUTINE WILL FILL 300H BYTES IN RAM OF A CERTAIN VALUE
	;
	PUSH	BC
	POP	HL
	LD	BC,300H
FILL1A:	LD	(HL),E
	DEC	BC
	INC	HL
	XOR	A
	OR	B
	OR	C
	JR 	NZ,FILL1A
	RET
        END
