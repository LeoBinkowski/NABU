 	.Z80
	.RADIX	10
	.XLIST
;*****************************************************************
;*                                                               *
;*    FILE NAME:         GHOSTMV.MAC                             *
;*                                                               *
;*    MODULE PART NO.: 73-90034420 NAME:  PAC MAN 		 *
;*                                                               *
;*    FILE DESCRIPTION:                                          *  
;*    This file contains ghost movement routines, and            *
;*    Blinky's personality logic                                 *
;*                                                               *
;*                                                               *
;*                                                               *
;*                                                               *
;*                                                               *
;*    PROGRAMMER: L. Binkowski                                   *
;*                                                               *
;*    ENVIRONMENT- Development Machine: NABU 1100, MCP 1.8       *
;*                                                               *
;*               - Assembler: MACRO-80                           *
;*                                                               *
;*                                                               *
;*****************************************************************
;*                                                               *
;*    REVISION HISTORY: (current first)                          *
;*                                                               *
;*    Rev.    Date       Created By         Revision Details     *
;*    ---  ----------  ---------------  -----------------------  *
;*    02   19 OCT 83	L. Binkowski	changed relate code	 *
;*                                                               *
;*    01   03 OCT 83    L. Binkowski    Initial release to spec  *
;*                                                               *
;*****************************************************************
 
	Z80	EQU	0FFH
	.PRINTX	/GHOST MOVEMENT ROUTINES...NOVEMBER 1, 1983/
	INCLUDE PACMAN.EQU
	INCLUDE COMMON.MRO
	INCLUDE	ARITH.MRO
	INCLUDE STRUCT.MRO
	INCLUDE	LINKTAB.EXA
	INCLUDE	SUPRTASK.MRO
	EXTRN	PACDIR,PACX,PACY,BLIDIR,BLIX,BLIY,BLIST,BLIPAT,LASTB,LBDIR,BLIPX
	EXTRN	LAST2B,RSTPAT,FINDP,TMPX,TMPY,XMDFY,YMDFY,OFFPAT,DEADFL,PWRTIMR
	EXTRN	BLIHIT,PGHOMX,HTOD,DISCOR,SGVAL,SGPAT,WIGBOD,ABS,PINX,PINY
	EXTRN	EYEFLG,GHOFLG,BLITCB,PGHOMY,INKX,INKY,CLYX,CLYY,RELATE,BLIDEL
	EXTRN	BREV1F,CKQUAD,CKREL
	.LIST	
	OPTDIR::DS	1		;OPTIMUM DIRECTION VECTOR
	OLDIR::	DS	1		;A TEMPORARY OLD DIRECTION HOLDER
	GHOX::	DS	1		;CURRENT GHOST X DIRECTION
	GHOY::	DS	1		;CURRENT GHOST Y DIRECTION
	GHODIR::DS	1		;CURRENT GHOST DIRECTION
	REVFL::	DS	1		;REVERSE FLAG
	GHOWARD::DS	1		;GHOST FORWARD VECTOR
	CHDIR::	DS	1		;CHANGE DIRECTION FLAG
	TMP16::	DS	2		;16 BIT TEMPORARY STORAGE
	PUTIT::	DS	2		;16 BIT GHOST NAME STORAGE
	XAMOUNT::DS	1		;X DISPLACEMENT
	YAMOUNT::DS	1		;Y DISPLACEMENT
	EYES::	DS	1		;EYES PATTERN
	TMP::	DS 	1		;TEMPORARY STORAGE
	RTFL::	DS	1		;GO RIGHT FLAG
	LTFL::	DS	1		;GO LEFT FLAG
	UPFL::	DS	1		;GO UP FLAG
	DNFL::	DS	1		;GO DOWN FLAG
	BESTX::	DS	1		;X DIFFENCE BETWEEN GHOST AND PACMAN
	BESTY::	DS	1		;Y DIFFRENCE BETWEEN GHOST AND PACMAN
	TMPX1::	DS	1		;2ND TEMPORARY STORAGE FOR X
	TMPY1::	DS	1		;2ND TEMPORARY STORAGE FOR Y
	STFL::	DS	1		;STOP FLAG FOR GHOSTS
	XLINE::	DS	1		;
	YLINE::	DS	1
	XDIF::	DS	1
	YDIF::	DS	1
	OUTIMR::DB	00H
	BSICK::	DB	00H
GHOMOV::
	;
	; This is the movement routine for the ghosts. Blinky, Pinky, Inky
	; and Clyde will each have their own personalities.  The routine for 
	; checking the movements of the pacman will be copied here in great
	; detail.
	;	
	;
BLIMOV::
	ASIGN8.	(LBDIR),(BLIDIR)	;HOLD ONTO THE OLD DIRECTION
	LD	A,(BLIST)		;GET BLINKY'S STATUS
	CP	SICK			;IS HE SICK?
	JP	Z,SICK_BLINKY		;YES...THEN DO THE SICK ACT
	CP	EATEN			;HAS HE BEEN EATEN WHILE SICK
	JP	Z,HOME_BLINKY		;YES...DO THE GO HOME ACT
	IF8.	(BLIST),.EQ.,HOME	;IF WE ARE HOME THEN BOUNCE UP AND DOWN
	  IF8. (BLIY),.EQ.,4CH
	    ASIGN8. (BLIDIR),10H
	  ENDIF.
	  IF8. (BLIY),.EQ.,54H
	    ASIGN8. (BLIDIR),30H
	  ENDIF.
	  CALL BMOVGHO
	  ADD8. (OUTIMR),1
	  IF8. (OUTIMR),.EQ.,60		;IF IT'S TIME TO LEAVE THEN GO TOWARDS
	    ASIGN8. (BLIST),GETOUT	;THE DOOR
	  ENDIF.
	  RET
	ELSE.
          IF8. (BLIST),.EQ.,GETOUT		;IF WE ARE SUPPOSED TO GET OUT
	    PCALL HOMEDIR,(BLIX),(BLIY),0
	    IF8. (BLIX),.NE.,7CH		;IF NOT LINED UP WITH THE
	      IF8.(LTFL),.EQ.,TRUE		;DOOR THEN LINE US UP
	        ASIGN8. (BLIDIR),20H
	      ELSE.
	        ASIGN8. (BLIDIR),00H
	      ENDIF.
	    ELSE.
	      IF8. (BLIY),.NE.,3CH		;IF NOT OUT THE DOOR THEN
	        IF8. (DNFL),.EQ.,TRUE		;GO TOWARD THE DOOR
		  ASIGN8. (BLIDIR),10H
	        ELSE.
	          ASIGN8. (BLIDIR),30H
	        ENDIF.
	      ELSE.
		ASIGN8. (BLIDIR),20H
		IF8. (BSICK),.EQ.,FALSE
		  ASIGN8. (BLIST),OK
		ELSE.
		  ASIGN8. (BLIST),SICK
		ENDIF.
	      ENDIF.
	    ENDIF.
	    CALL BMOVGHO
	    RET
	  ELSE.
	    IF8. (BLIST),.EQ.,GETIN		;IF ARRIVED AT ENTRANCE TO
	      ASIGN8. (BLIDIR),10H		;HIDEOUT THEN GO IN
	      PCALL HMOVGHO,BLIX,(BLIDIR),BLINKY
	      IF8. (BLIY),.EQ.,4CH
		CALL BLIRST
		ASIGN8. (OUTIMR),00H
	      ENDIF.
	      RET
	    ENDIF.
	  ENDIF.
	ENDIF.
	;
	; This is the movement routine for BLINKY, the red ghost.  His
	; strategy is to seek out and get you wherever you are.  If you
	; are behind a wall, he will find the nearest exit to get you,
	; AS LONG AS IT IS NOT IN THE REVERSE OF THE CURRENT DIRECTION
	; THAT HE IS TRAVELLING IN.  He also has priority over the other
	; ghosts as far as who gets to chase the pacman.
	;
	IF8.	(BLIST),.EQ.,GOQUAD
	  PCALL	HOMEDIR,(BLIX),(BLIY),BLINKY
	  PCALL	CKQUAD,BLIX,QUADAD+2
	  JR	NZ,QUCKBL
	  ASIGN8. (BLIST),OK
QUCKBL:	  ASIGN8. (GHODIR),(OPTDIR)
	  LD	A,(BREV1F)
	  AND	A
	  ASIGN8. (BREV1F),00H
	  JP	Z,BREVCK
	  PCALL	GHOHIT,(BLIX),(BLIY)
	  LD	A,(CHDIR)
	  AND	A
	  JP	NZ,BLICD
	  JP	MOVBLI
	ELSE.
	  PCALL	FINDIR,(BLIX),(BLIY),0	;FIND THE OPTIMUM DIRECTION
	ENDIF.
BREVCK:	ASIGN8.	(GHODIR),(OPTDIR)	;PUT OPTDIR INTO GHODIR
	PCALL	GHOHIT,(BLIX),(BLIY)	;THERE A WALL THERE?
	LD	A,(CHDIR)		;GET THE CHANGE DIRECTION FLAG
	CP	TRUE			;IS IT SET?
	JP	NZ,CHKRV		;GO ANOTHER DIRECTION THEN
	LD	A,(XLINE)		
	CP	TRUE
	JP	Z,CHKBLI
	LD	A,(YLINE)
	CP	TRUE
	JP	Z,CHKBLI
	JP	BLICD
CHKRV::	PCALL	NOREV,(OPTDIR),(BLIDIR)	;SEE IF WE HAVE TO REVERSE DIRECTION
	ASIGN8.	(GHODIR),(BLIDIR)
	LD	A,(REVFL)		;GET THE REVERSE FLAG
	CP	TRUE			;IS IT SET?
	JP	NZ,MOVBLI		;NO....THEN MOVE HIM
BLICD::	CALL	CHADIR		;YES...CHANGE IT TO A DIFFERENT DIRECTION
	PCALL	NOREV,(OPTDIR),(BLIDIR)
	LD	A,(REVFL)
	CP	TRUE
	JP	Z,BANOTH	
	ASIGN8.	(GHODIR),(OPTDIR)	;GET THE OPTIMUM DIRECTION
	PCALL	GHOHIT,(BLIX),(BLIY)	;CHECK FOR WALLS IN THAT DIRECTION
	LD	A,(CHDIR)		;GET THE CHANGE DIRECTION FLAG
	CP	TRUE			;IS IT SET?
	JP	NZ,MOVBLI		;NO....THEN MOVE HIM
	;ASIGN8.	(GHODIR),(BLIDIR)
	;LD	(OPTDIR),A
	;PCALL	GHOHIT,(BLIX),(BLIY)
	;LD	A,(CHDIR)
	;CP	TRUE
	;JP	NZ,MOVBLI
BANOTH:	PCALL	CHA1DIR,(BLIX),(BLIY),(BLIDIR)	;TRY ANOTHER DIRECTION
	LD	A,(STFL)		;GET THE STOP FLAG
	CP	TRUE			;IS IT SET?
	JP	Z,NOBLI			;YES...DON'T MOVE HIM
MOVBLI::
	ASIGN8. (BLIDIR),(OPTDIR)	;MAKE THE OPTIMUM BLINKY'S DIRECTION
NOBLI::	CALL	BMOVGHO			;GO TO IT BLINKY!
	PCALL	ABS,(BLIX),(PACX)
	CP	08H
	JR	C,B1CNT
	CP	03H
	JR	C,B2CNT
	RET
B1CNT:	PCALL	ABS,(BLIY),(PACY)
	CP	03H
	RET	NC
B3CNT:	ASIGN8. (DEADFL),TRUE
	RET
B2CNT:	PCALL	ABS,(BLIY),(PACY)
	CP	08H
	RET	NC
	JR	B3CNT
CHKBLI::ASIGN8.	(GHODIR),(BLIDIR)
	PCALL	GHOHIT,(BLIX),(BLIY)
	LD	A,(CHDIR)
	CP	TRUE
	JP	Z,BLICD
	JP	NOBLI
	;
RSTBLI::
	PCALL RSTPAT,BLIPX,(BLIDIR)
	ASIGN8.	(LASTB),0FFH
	RET
BMOVGHO::
	IF8.	(BSICK),.EQ.,FALSE
	PCALL	SPCOLR,5,WHITE		;MAKE SURE THE COLORS ARE SET
	PCALL	SPCOLR,1,DRED
	CALL	BLIDEL
	IF8.	(BLIDIR),.NE.,(LBDIR)
	  SPEED BLITCB,-1
	  IF8. (LASTB),.NE.,0FFH
	  CALL	RSTBLI
	  ENDIF.
	  ASIGN8. (LASTB),0FFH
	ENDIF.
	  IF8.	(BLIY),.EQ.,4CH
	    IF8. (BLIX),.GE.,0CCH
	      SPEED BLITCB,-2
	    ENDIF.
	    IF8. (BLIX),.LE.,26H
	      SPEED BLITCB,-2
	    ENDIF.
	  ENDIF.
;	    IF8. (BLIX),.GT.,0E0H
;	      JP BSMOVE
;	    ENDIF.
;	    IF8. (BLIX),.LT.,010H
;	      JP BSMOVE
;	    ENDIF.
;	    PCALL RELATE,BLIX,PINX
;	    JP Z,BSMOVE
;	    PCALL RELATE,BLIX,INKX
;	    JP Z,BSMOVE
;	    PCALL RELATE,BLIX,CLYX
;	    JP Z,BSMOVE
;	    PCALL RELATE,BLIX,PACX
;	    JP Z,BSMOVE
	    LD	A,(BLIDIR)
	    AND	A
	    JP	Z,BXLRIGHT
	    CP	20H
	    JP	Z,BXLRIGHT
	    JP  BYLRIGHT
BXLRIGHT::  ASIGN8. (GHODIR),(BLIDIR)
	    PCALL PGHOMX,BLIX,(BLIDIR),BLINKY
	    RET
BYLRIGHT::  ASIGN8. (GHODIR),(BLIDIR)
	    PCALL PGHOMY,BLIX,(BLIDIR),BLINKY
	    RET
BSMOVE::    IF8. (LASTB),.NE.,0FFH
	      CALL RSTBLI
	    ENDIF.
	    PCALL MOVGHO,BLIX,(BLIDIR),BLINKY
	ELSE.
	  IF8. (LASTB),.NE.,0FFH
	      CALL RSTBLI     
	    ENDIF.
	  PCALL SMOVGH,BLIX,(BLIDIR),BLINKY
	ENDIF.
	RET
SICK_BLINKY::
	;This is the routine that will be executed for blinky while sick
	;
	PCALL	FINDIR,(BLIX),(BLIY),0
	PCALL	CHA1DIR,(BLIX),(BLIY),(BLIDIR)	;IF NO JUNCTION THEN NO
	LD	A,(OPTDIR)			;EXECUTI
	LD	C,A
	LD	A,(BLIDIR)
	CP	C
	JP	Z,SNOBLI
	;
	ASIGN8.	(OLDIR),(BLIDIR)
	PCALL	FINDIR,(BLIX),(BLIY),0	;FIND THE OPTIMUM DIRECTION
	PCALL	FINREV,(OPTDIR)
	LD	(OPTDIR),A
	LD	(GHODIR),A
	PCALL	GHOHIT,(BLIX),(BLIY)	;THERE A WALL THERE?
	LD	A,(CHDIR)		;GET THE CHANGE DIRECTION FLAG
	CP	TRUE			;IS IT SET?
	JP	NZ,SCHKRV		;GO ANOTHER DIRECTION THEN
	LD	A,(XLINE)		
	CP	TRUE
	JP	Z,SCHKBLI
	LD	A,(YLINE)
	CP	TRUE
	JP	Z,SCHKBLI
	JP	SBLICD
SCHKRV::PCALL	NOREV,(OPTDIR),(BLIDIR)	;SEE IF WE HAVE TO REVERSE DIRECTION
	ASIGN8.	(GHODIR),(BLIDIR)
	LD	A,(REVFL)		;GET THE REVERSE FLAG
	CP	TRUE			;IS IT SET?
	JP	NZ,SMVBLI		;NO....THEN MOVE HIM
SBLICD::CALL	Z,CHADIR		;YES...CHANGE IT TO A DIFFERENT DIRECTION
	PCALL	FINREV,(OPTDIR)
	LD	(OPTDIR),A
	PCALL	NOREV,(OLDIR),(OPTDIR)	;IS IT THE REVERSE OF THE CURRENT DIR
	LD	A,(REVFL)		
	CP	TRUE
	JP	Z,SNEWDR
	ASIGN8.	(GHODIR),(OPTDIR)	;GET THE OPTIMUM DIRECTION
	PCALL	GHOHIT,(BLIX),(BLIY)	;CHECK FOR WALLS IN THAT DIRECTION
	LD	A,(CHDIR)		;GET THE CHANGE DIRECTION FLAG
	CP	TRUE			;IS IT SET?
	JP	NZ,SMVBLI		;NO....THEN MOVE HIM
	ASIGN8.	(GHODIR),(BLIDIR)
	LD	(OPTDIR),A
	PCALL	GHOHIT,(BLIX),(BLIY)
	LD	A,(CHDIR)
	CP	TRUE
	JP	NZ,SMVBLI
SNEWDR::
	ASIGN8.	(GHODIR),(OLDIR)	;IF THE FORWARD DIRECTION IS OPEN
	PCALL	GHOHIT,(BLIX),(BLIY)	;THEN USE IT, DON'T TURN THE GHOST
	LD	A,(CHDIR)		;AROUND SO THAT HE CAN SPAZ OUT
	CP	TRUE
	JP	Z,SDOAD
	ASIGN8.	(BLIDIR),(OLDIR)
	JP	SNOBLI
SDOAD:	PCALL	CHA1DIR,(BLIX),(BLIY),(OLDIR)	;TRY ANOTHER DIRECTION
SMVBLI::ASIGN8.	(BLIDIR),(OPTDIR)
SNOBLI::SPEED	BLITCB,-2
	PCALL	SMOVGH,BLIX,(BLIDIR),BLINKY	;MOVE THE SICK BLINKY IN THAT DIRECTION
	PCALL	CKREL,BLIX,PACX,07H
	RET	NZ
	    ASIGN8. (BLIHIT),TRUE
	    ASIGN8. (BLIST),EATEN
	    ASIGN8. (BSICK),FALSE
	    ASIGN8. (GHOFLG),TRUE
	    ADD8.   (SGPAT),04H
	    PCALL   SPNAME,1,(SGPAT)
	    PCALL   SPCOLR,1,WHITE
	    PCALL   SPCOLR,5,WHITE
	    LD	    A,(SGVAL)
	    SLA	    A
	    LD	    (SGVAL),A
	    IF8.    (SGVAL),.EQ.,0
	      ASIGN16. (SGVAL),160H
	    ENDIF.
	    PCALL   HTOD,(SGVAL)
	    CALL    DISCOR
	RET
SCHKBLI::ASIGN8. (GHODIR),(BLIDIR)
	PCALL	GHOHIT,(BLIX),(BLIY)
	LD	A,(CHDIR)
	CP	TRUE
	JP	Z,SBLICD
	JP	SNOBLI
HOME_BLINKY::
BLIHM::	ASIGN8.	(BLITCB+3),1
	ASIGN8.	(EYEFLG),TRUE
	PCALL	HOMEDIR,(BLIX),(BLIY),0	;FIND THE OPTIMUM DIRECTION
	ASIGN8.	(GHODIR),(OPTDIR)	;PUT OPTDIR INTO GHODIR
	PCALL	GHOHIT,(BLIX),(BLIY)	;THERE A WALL THERE?
	LD	A,(CHDIR)		;GET THE CHANGE DIRECTION FLAG
	CP	TRUE			;IS IT SET?
	JP	NZ,HHKRV		;GO ANOTHER DIRECTION THEN
	LD	A,(XLINE)		
	CP	TRUE
	JP	Z,HHKBLI
	LD	A,(YLINE)
	CP	TRUE
	JP	Z,HHKBLI
	JP	HBLICD
HHKRV::	PCALL	NOREV,(OPTDIR),(BLIDIR)	;SEE IF WE HAVE TO REVERSE DIRECTION
	ASIGN8.	(GHODIR),(BLIDIR)
	LD	A,(REVFL)		;GET THE REVERSE FLAG
	CP	TRUE			;IS IT SET?
	JP	NZ,HMOVBLI		;NO....THEN MOVE HIM
HBLICD::CALL	Z,CHADIR		;YES...CHANGE IT TO A DIFFERENT DIRECTION
	ASIGN8.	(GHODIR),(OPTDIR)	;GET THE OPTIMUM DIRECTION
	PCALL	GHOHIT,(BLIX),(BLIY)	;CHECK FOR WALLS IN THAT DIRECTION
	LD	A,(CHDIR)		;GET THE CHANGE DIRECTION FLAG
	CP	TRUE			;IS IT SET?
	JP	NZ,HMOVBLI		;NO....THEN MOVE HIM
	ASIGN8.	(GHODIR),(BLIDIR)
	LD	(OPTDIR),A
	PCALL	GHOHIT,(BLIX),(BLIY)
	LD	A,(CHDIR)
	CP	TRUE
	JP	NZ,HMOVBLI
	PCALL	CHA1DIR,(BLIX),(BLIY),(BLIDIR)	;TRY ANOTHER DIRECTION
	LD	A,(STFL)		;GET THE STOP FLAG
	CP	TRUE			;IS IT SET?
	JP	Z,HNOBLI			;YES...DON'T MOVE HIM
HMOVBLI::
	ASIGN8. (BLIDIR),(OPTDIR)	;MAKE THE OPTIMUM BLINKY'S DIRECTION
HNOBLI::PCALL	HMOVGHO,BLIX,(BLIDIR),BLINKY	;GO TO IT BLINKY!
	IF8.	(BLIX),.EQ.,7AH
	  IF8.    (BLIY),.EQ.,3CH
	    ASIGN8. (BLIST),GETIN
	ENDIF.
	ENDIF.
	RET
BLIRST: ASIGN8.	(BLIST),HOME
	ASIGN8.	(BLIHIT),FALSE
	ASIGN8.	(DEADFL),FALSE
	ASIGN8. (BLIX),8CH
	ASIGN8.	(BLIY),4CH
	PCALL	SPMOVE,1,(BLIY),(BLIX)
	PCALL	SPMOVE,5,(BLIY),(BLIX)
	PCALL	SPNAME,1,0C0H
	PCALL	SPNAME,5,40H
	PCALL	SPCOLR,5,WHITE
	PCALL	SPCOLR,1,DRED
	RET
HHKBLI::ASIGN8.	(GHODIR),(BLIDIR)
	PCALL	GHOHIT,(BLIX),(BLIY)
	LD	A,(CHDIR)
	CP	TRUE
	JP	NZ,HBLICD
	JP	NOBLI
FINREV::
	;This routine finds the reverse of a direction.
	;
	LD	A,C
	ADD	A,20H
	CP	40H
	JP	Z,SBCONT
	CP	50H
	JP	NZ,SBCON2
	LD	A,20H
	RET
SBCONT::LD	A,10H
SBCON2::RET
FINDIR::
	;This routine is for all of the ghosts.  It will find the best
	;direction for the ghost to take, without checking.  It will also
	;set flags based on the best directions.  There is usually another
	;direction that is not as good as the one that is used, and this
	;direction may be used if the best direction turns out to be 
	;blocked by a wall.
	;
	ASIGN8.	(TMPX),C		;GET THE GHOST'S X COORDINATE
	ASIGN8.	(TMPY),E		;GET HIS Y COORDINATE
	LD	A,L
	AND	A
	JR	NZ,BLINST
	ASIGN8. (TMPX1),(PACX)
	ASIGN8. (TMPY1),(PACY)
	JR	STARTF
BLINST:	ASIGN8. (TMPX1),(BLIX)
	ASIGN8. (TMPY1),(BLIY)
STARTF:	IF8.	(TMPX1),.EQ.,(TMPX)	;ARE THE X POSITIONS EQUAL?
	  ASIGN8. (BESTX),00H		;YES...THEN THE DIFFENCES ARE ZERO
	ELSE.				
	  IF8.    (TMPY1),.EQ.,(TMPY)	;NO....ARE THE Y'S THE SAME?
	    ASIGN8. (BESTY),00H		;YES...THEN THE DIFFERENCES ARE ZERO
	  ENDIF.
	ENDIF.
	LD	A,FALSE			;CLEAR THE ACCUMULATOR
	LD	(RTFL),A		;CLEAR THE DIRECTION FLAGS
	LD	(LTFL),A
	LD	(UPFL),A
	LD	(DNFL),A
	LD	(XLINE),A
	LD	(YLINE),A
	IF8.	(TMPX1),.GT.,(TMPX)	;IS PACMAN TO THE RIGHT OF THE GHOST?
	  ASIGN8. (RTFL),TRUE		;YES...SET THE RIGHT FLAG
	  ASIGN8. (BESTX),(TMPX1)	;GET THE X DIFFERENCE
	  SUB8.	  (BESTX),(TMPX)	
	ELSE.
	  IF8.	 (TMPX),.GT.,(TMPX1)	;NO....IS THE PACMAN TO THE LEFT?
	    ASIGN8. (LTFL),TRUE		;YES...SET THE LEFT FLAG
	    ASIGN8. (BESTX),(TMPX)	;GET THE X DIFFERENCE
	    SUB8.   (BESTX),(TMPX1)
	  ENDIF.
	ENDIF.
	IF8.	(TMPY1),.GT.,(TMPY)	;IS THE PACMAN LOWER THAN THE GHOST?
	  ASIGN8. (DNFL),TRUE		;YES...SET THE DOWN FLAG
	  ASIGN8. (BESTY),(TMPY1)	;GET THE Y DIFFERENCE
	  SUB8.	  (BESTY),(TMPY)
	ELSE.
	  IF8.	  (TMPY),.GT.,(TMPY1)	;NO....IS THE PACMAN HIGHER?
	    ASIGN8. (UPFL),TRUE		;YES...SET THE UP FLAG
	    ASIGN8. (BESTY),(TMPY)	;GET THE Y DIFFERENCE
	    SUB8.   (BESTY),(TMPY1)	
	  ENDIF.
	ENDIF.
	ASIGN8.	(XDIF),(BESTX)		;STORE THE AMOUNTS FOR LATER USE
	ASIGN8.	(YDIF),(BESTY)
TAKEX::	IF8.	(BESTY),.GT.,(BESTX)	;IS THE Y DIFFERENCE GREATER THAN X?
	  IF8.	(BESTX),.LT.,2		;YES...IS THE X WITHIN 1 PIXEL
             ASIGN8. (BESTX),0FFH	;YES...THEN TAKE THE OTHER DIRECTION
	     ASIGN8. (XLINE),TRUE
	     JP TAKEY
	  ENDIF.
	  IF8.	  (LTFL),.EQ.,TRUE	;IS THE LEFT FLAG SET?
	    ASIGN8. (OPTDIR),20H	;YES...MAKE THE GHOST DIRECTION LEFT
	  ELSE.
	    IF8.    (RTFL),.EQ.,TRUE	;NO....IS THE RIGHT FLAG SET?
	      ASIGN8. (OPTDIR),00H	;YES...MAKE THE GHOST DIRECTION RIGHT
	    ENDIF.
	  ENDIF.
	ELSE.
TAKEY::	  IF8.	(BESTX),.GT.,(BESTY)	;IS THE X DIFFERENCE GREATER THAN Y?
	    IF8. (BESTY),.LT.,2		;YES...IS THE Y WITHIN 1 PIXEL?
		ASIGN8. (BESTY),0FFH	;YES...THEN TAKE THE OTHER DIRECTION
		ASIGN8. (YLINE),TRUE
		JP  TAKEX	
	    ENDIF.
	    IF8.    (UPFL),.EQ.,TRUE	;IS THE UP FLAG SET?
	      ASIGN8. (OPTDIR),30H	;YES...MAKE THE GHOST DIRECTION UP
	  ELSE.				
	    IF8.   (DNFL),.EQ.,TRUE	;IS THE DOWN FLAG SET?
	      ASIGN8. (OPTDIR),10H	;YES...MAKE THE GHOST DIRECTION DOWN
	    ENDIF.
	  ENDIF.	
	ENDIF.
	ENDIF.
DONTDO::RET
HOMEDIR::
	;
	ASIGN8.	(TMPX),C		;GET THE GHOST'S X COORDINATE
	ASIGN8.	(TMPY),E		;GET HIS Y COORDINATE
	LD	A,L
	AND	A			;IF NO GHOST PARAMETER: TAKE THE HIDEOUT
	JP	NZ,FINDXY		;LOCATION
	ASIGN8.	(TMPX1),7AH
	ASIGN8.	(TMPY1),3CH
HOMEC1:	IF8.	 (TMPX1),.EQ.,(TMPX)	;ARE THE X POSITIONS EQUAL?
	  ASIGN8. (BESTX),00H		;YES...THEN THE DIFFENCES ARE ZERO
	ELSE.				
	  IF8.    (TMPY1),.EQ.,(TMPY)	;NO....ARE THE Y'S THE SAME?
	    ASIGN8. (BESTY),00H		;YES...THEN THE DIFFERENCES ARE ZERO
	  ENDIF.
	ENDIF.
	LD	A,FALSE			;CLEAR THE ACCUMULATOR
	LD	(RTFL),A		;CLEAR THE DIRECTION FLAGS
	LD	(LTFL),A
	LD	(UPFL),A
	LD	(DNFL),A
	LD	(XLINE),A
	LD	(YLINE),A
	IF8.	(TMPX1),.GT.,(TMPX)	;IS PACMAN TO THE RIGHT OF THE GHOST?
	  ASIGN8. (RTFL),TRUE		;YES...SET THE RIGHT FLAG
	  ASIGN8. (BESTX),(TMPX1)	;GET THE X DIFFERENCE
	  SUB8.	  (BESTX),(TMPX)	
	ELSE.
	  IF8.	 (TMPX),.GT.,(TMPX1)	;NO....IS THE PACMAN TO THE LEFT?
	    ASIGN8. (LTFL),TRUE		;YES...SET THE LEFT FLAG
	    ASIGN8. (BESTX),(TMPX)	;GET THE X DIFFERENCE
	    SUB8.   (BESTX),(TMPX1)
	  ENDIF.
	ENDIF.
	IF8.	(TMPY1),.GT.,(TMPY)	;IS THE PACMAN LOWER THAN THE GHOST?
	  ASIGN8. (DNFL),TRUE		;YES...SET THE DOWN FLAG
	  ASIGN8. (BESTY),(TMPY1)	;GET THE Y DIFFERENCE
	  SUB8.	  (BESTY),(TMPY)
	ELSE.
	  IF8.	  (TMPY),.GT.,(TMPY1)	;NO....IS THE PACMAN HIGHER?
	    ASIGN8. (UPFL),TRUE		;YES...SET THE UP FLAG
	    ASIGN8. (BESTY),(TMPY)	;GET THE Y DIFFERENCE
	    SUB8.   (BESTY),(TMPY1)
	  ENDIF.
	ENDIF.
	ASIGN8.	(XDIF),(BESTX)		;STORE THE AMOUNTS FOR LATER USE
	ASIGN8.	(YDIF),(BESTY)
HTAKEX::IF8.	(BESTY),.GT.,(BESTX)	;IS THE Y DIFFERENCE GREATER THAN X?
	  IF8.	(BESTX),.LT.,2		;YES...IS THE X WITHIN 1 PIXEL
             ASIGN8. (BESTX),0FFH	;YES...THEN TAKE THE OTHER DIRECTION
	     ASIGN8. (XLINE),TRUE
	     JP HTAKEY
	  ENDIF.
	  IF8.	  (LTFL),.EQ.,TRUE	;IS THE LEFT FLAG SET?
	    ASIGN8. (OPTDIR),20H	;YES...MAKE THE GHOST DIRECTION LEFT
	  ELSE.
	    IF8.    (RTFL),.EQ.,TRUE	;NO....IS THE RIGHT FLAG SET?
	      ASIGN8. (OPTDIR),00H	;YES...MAKE THE GHOST DIRECTION RIGHT
	    ENDIF.
	  ENDIF.
	ELSE.
HTAKEY::  IF8.	(BESTX),.GT.,(BESTY)	;IS THE X DIFFERENCE GREATER THAN Y?
	    IF8. (BESTY),.LT.,2		;YES...IS THE Y WITHIN 1 PIXEL?
		ASIGN8. (BESTY),0FFH	;YES...THEN TAKE THE OTHER DIRECTION
		ASIGN8. (YLINE),TRUE
		JP  HTAKEX	
	    ENDIF.
	    IF8.    (UPFL),.EQ.,TRUE	;IS THE UP FLAG SET?
	      ASIGN8. (OPTDIR),30H	;YES...MAKE THE GHOST DIRECTION UP
	  ELSE.				
	    IF8.   (DNFL),.EQ.,TRUE	;IS THE DOWN FLAG SET?
	      ASIGN8. (OPTDIR),10H	;YES...MAKE THE GHOST DIRECTION DOWN
	    ENDIF.
	  ENDIF.	
	ENDIF.
	ENDIF.
	RET
FINDXY::LD	C,L
	LD	B,00H
	SLA	C
	LD	HL,QUADAD
	ADD	HL,BC
	LD	C,(HL)
	INC	HL
	LD	E,(HL)
	ASIGN8.	(TMPX1),C
	ASIGN8.	(TMPY1),E
	JP	HOMEC1
QUADAD::DB	000H,000H,0BCH,01CH,034H,01CH,0BCH,084H,034H,084H
NOREV::	
	;This routine will set a flag if the direction chosen by the ghost
	;is opposite of the direction that he is currently moving in.
	;
	;
	LD 	A,C			;GET THE DIRECTION TO BE CHECKED
	CP	00H			;IS IT RIGHT?
	JP 	Z,CRGT			;YES..CHECK UP
	CP	10H			;IS IT DOWN?
	JP	Z,CDOW			;YES...CHECK DOWN
	CP	20H			;IS IT LEFT?
	JP	Z,CLFT			;YES..CHECK LEFT
	LD	A,10H			;THE REVERSE OF UP IS DOWN
	JP	TREV			;TEST THEM
CRGT::	LD	A,20H			;THE REVERSE OF RIGHT IS LEFT
	JP	TREV			;TEST THEM
CDOW::	LD	A,30H			;THE REVERSE OF DOWN IS UP
	JP	TREV			;TEST THEM
CLFT::	LD	A,00H			;THE REVERSE OF LEFT IS RIGHT
TREV::	CP	E			;ARE THE VALUES EQUAL?
	JP	Z,TRIP			;TRIP THE FLAG
	ASIGN8.	(REVFL),FALSE		;OFF IT GOES
	RET
TRIP::	ASIGN8.	(REVFL),TRUE		;ON IT GOES
	RET
CHA1DIR::
	;This routine will change the ghost's direction to one that is not
	;optimum if the other directions don't work out.
	;
	;
	ASIGN8. (STFL),FALSE		;CLEAR THE STOP FLAG
	ASIGN8.	(TMPX1),C		;GET THE X COORD OF THE GHOST
	ASIGN8.	(TMPY1),E		;GET THE Y COORDINATE
	ASIGN8.	(TMP),L
	LD	A,L
	ADD	A,10H			;ADD A DIRECTION TO IT
	CP	40H			;IS IT AN ILLEGAL DIRECTION?
	JP	Z,ROTCDIR		;YES...THEN MAKE IT LEGAL
	LD	(GHODIR),A		;GET THE GHOST'S DIRECTION
	PCALL	GHOHIT,(TMPX1),(TMPY1)	;IS IT BAD?
	LD	A,(CHDIR)		;CHECK IT OUT
	CP	TRUE			;DO WE HAVE TO TRY ANOTHER?
	JP	Z,DIFRNT		;YUP...THEN DO IT!
	ASIGN8.	(OPTDIR),(GHODIR)	;MAKE THE OPTIMUM DIRECTION THE GHOST'S
	RET				;ZOOM OUT, EH?
ROTCDIR::
	LD	A,00H			;HERE'S A LEGAL DIRECTION
	LD	(GHODIR),A		;CHECK IT OUT
	PCALL	GHOHIT,(TMPX1),(TMPY1)	
	LD	A,(CHDIR)		;NOT AGAIN???
	CP	TRUE			
	JP	Z,D1FRNT		;OH NO, WE HAVE TO TRY ANOTHER
	ASIGN8.	(OPTDIR),(GHODIR)	;GET THE OPTIMUM DIRECTION
	RET
D1FRNT::ASIGN8.	(GHODIR),10H
DIFRNT::LD	A,(GHODIR)		;GET THE CURRENT DIRECTION
	SUB	20H			;SUBTRACT TWO DIRECTIONS
	CP	0F0H			;DID IT TURN OUT ILLEGAL?
	JP	Z,ROTCCDR		;YES...THEN MAKE IT LEGAL
	LD	(GHODIR),A		;CHECK IT OUT
	PCALL	GHOHIT,(TMPX1),(TMPY1)
	LD	A,(CHDIR)
	CP	TRUE			;IS THIS BAD????!!?
	JP	Z,DONTCH		;YES...WELL DON'T BOTHER MOVING THEN
	ASIGN8.	(OPTDIR),(GHODIR)	;NO....THEN USE IT
	RET				;GOOMBYE, PLEASE.
ROTCCDR::
	LD	A,30H			;THIS ONE'S FOR BACKWORD DIRECTIONS
	LD	(GHODIR),A		;CHECK IT OUT
	PCALL	GHOHIT,(TMPX1),(TMPY1)
	LD	A,(CHDIR)
	CP	TRUE			;IS IT BAD?
	JP	Z,DONTCH		;YES...THEN DON'T USE IT
	ASIGN8.	(OPTDIR),(GHODIR)	;MAKE IT ALL RIGHT
	RET				;POOF...GONE SHOPPING
DONTCH::
	LD	A,(TMP)
	LD	(GHODIR),A
	PCALL	GHOHIT,(TMPX1),(TMPY1)
	LD	A,(CHDIR)
	AND	A
	JR	NZ,CH@1
	ASIGN8.	(OPTDIR),(GHODIR)
	RET
CH@1:	LD	A,(GHODIR)
	SUB	10H
	CP	0F0H
	JP	Z,ROTLST
	LD	(GHODIR),A
	PCALL	GHOHIT,(TMPX1),(TMPY1)
	LD	A,(CHDIR)
	CP	TRUE
	JP	Z,GIVEUP
	ASIGN8.	(OPTDIR),(GHODIR)
	RET
ROTLST:	LD	A,30H
	LD	(GHODIR),A
	PCALL	GHOHIT,(TMPX1),(TMPY1)
	LD	A,(CHDIR)
	CP	TRUE
	JP	Z,GIVEUP
	ASIGN8.	(OPTDIR),(GHODIR)
	RET
GIVEUP::ASIGN8. (STFL),TRUE		;PUT THE BRAKES ON THE GHOST
	RET				;TELL HIM SO
MOVGHO::
	; This routine will move the ghosts 2 pixels in their direction
	; given the ghost name and direction.  It does no checking
	;
SGHOMV:	PUSH	BC
	PUSH	DE
	IF8.	(GHOFLG),.EQ.,TRUE
	POP	BC
	POP	BC
	RET
	ENDIF.
	POP	DE
	POP	BC
	LD	(TMP16),BC		;GET THE ADDRESS OF THE X COORD
	LD	IX,(TMP16)		
	LD	A,E			;GET THE DIRECTION
	CP	00H			;IS IT RIGHT?
	JP	Z,MRIGHT		;MOVE HIM RIGHT
	CP	10H			;IS IT DOWN?
	JP	Z,MDOWN			;MOVE HIM DOWN
	CP	20H			;IS IT LEFT?
	JP	Z,MLEFT			;MOVE HIM LEFT
	LD	A,(IX+1)		;GET THE Y AMOUNT
	SBC	A,02H			;MOVE IT UP 2 PIXELS
	LD	(IX+1),A		;STORE IT BACK INTO THE Y VECTOR
	JP	MVGHSP			;MOVE THE GHOST SPRITES
MRIGHT::LD	A,(IX)			;GET THE X AMOUNT
	ADD	A,02H			;MOVE IT RIGHT TWO PIXELS
	LD	(IX),A			;STORE IT BACK AWAY
	JP	MVGHSP			;MOVE THE GHOST SPRITES
MDOWN::	LD	A,(IX+1)		;GET THE Y AMOUNT
	ADD	A,02H			;MOVE IT DOWN TWO PIXELS
	LD	(IX+1),A		;STORE IT AWAY
	JP	MVGHSP			;MOVE THE GHOST SPRITES
MLEFT::	LD	A,(IX)			;GET THE X AMOUNT
	SBC	A,02H			;MOVE IT LEFT 2 PIXELS
	LD	(IX),A			;STORE IT AWAY
MVGHSP::
	LD	(PUTIT),HL		;STORE THE GHOST NUMBER
	LD	A,E			;GET THE DIRECTION
	SRL	A
	SRL	A			;MULTIPLY IT BY 4
	ADD	A,0C0H			;ADD IT TO THE BODY AREA
	LD	(TMP),A			;SAVE IT
	LD	C,A
	LD	A,(WIGBOD)		;ADD ANY OFFSET TO SIMULATE WIGGLING
	ADD	A,C
	LD	E,A
	PCALL	SPNAME,(PUTIT)	
	LD	A,(IX)			;GET THE X COORDINATE
	LD	L,A
	LD	A,(IX+1)		;GET THE Y COORDINATE
	LD	E,A
	LD	A,(PUTIT)		;GET THE BODY NUMBER
	LD	C,A
	PUSH	DE			;NUMBERS
	PUSH	HL
	CALL	SPMOVE
	LD	A,(PUTIT)		;GET THE GHOST NUMBER
	ADD	A,4			;GET THE GHOST'S EYES NUMBER
	LD	C,A
	PUSH	BC
	LD	A,(TMP)			;GET THE BODY AREA
	SUB	80H			;CHANGE IT TO THE EYE AREA
	LD	E,A
	CALL	SPNAME			;PUT THE PROPER EYES INTO THE GHOST
	POP	BC			;RESTORE THE SPRITE #, X,Y
	POP	HL
	POP	DE
	CALL	SPMOVE			;MOVE IT INTO THE PROPER SPOT
	RET
	;
	;LD	(PUTIT),HL
	;LD	A,L
	;LD	C,A
	;LD	A,E
	;SRL	A
	;SRL	A
	;ADD	A,40H
	;LD	(TMP),A
	;PCALL	SPNAME,(PUTIT),(TMP)	
	;LD	(TMP),A
	;LD	A,(IX)			;GET THE X AMOUNT
	;LD	(XAMOUNT),A
	;LD	A,(IX+1)		;GET THE Y AMOUNT
	;LD	(YAMOUNT),A
	;PCALL	SPMOVE,(PUTIT),(YAMOUNT),(XAMOUNT)
	;LD	A,4
	;LD	HL,(PUTIT)
	;ADD	A,L
	;LD	(EYES),A
	;PCALL	SPMOVE,(EYES),(YAMOUNT),(XAMOUNT)
	;RET
SMOVGH::
	; This routine will move the ghosts 2 pixels in their direction
	; given the ghost name and direction.  It does no checking
	;
	PUSH	BC
	PUSH	DE
	IF8.	(GHOFLG),.EQ.,TRUE
	POP	BC
	POP	BC
	RET
	ENDIF.
	POP	DE
	POP	BC
	LD	(TMP16),BC		;GET THE ADDRESS OF THE X COORD
	LD	IX,(TMP16)		
	LD	A,E			;GET THE DIRECTION
	CP	00H			;IS IT RIGHT?
	JP	Z,SRIGHT		;MOVE HIM RIGHT
	CP	10H			;IS IT DOWN?
	JP	Z,SDOWN			;MOVE HIM DOWN
	CP	20H			;IS IT LEFT?
	JP	Z,SLEFT			;MOVE HIM LEFT
	LD	A,(IX+1)		;GET THE Y AMOUNT
	SBC	A,02H			;MOVE IT UP 2 PIXELS
	LD	(IX+1),A		;STORE IT BACK INTO THE Y VECTOR
	JP	MVSKSP			;MOVE THE GHOST SPRITES
SRIGHT::LD	A,(IX)			;GET THE X AMOUNT
	ADD	A,02H			;MOVE IT RIGHT TWO PIXELS
	LD	(IX),A			;STORE IT BACK AWAY
	JP	MVSKSP			;MOVE THE GHOST SPRITES
SDOWN::	LD	A,(IX+1)		;GET THE Y AMOUNT
	ADD	A,02H			;MOVE IT DOWN TWO PIXELS
	LD	(IX+1),A		;STORE IT AWAY
	JP	MVSKSP			;MOVE THE GHOST SPRITES
SLEFT::	LD	A,(IX)			;GET THE X AMOUNT
	SBC	A,02H			;MOVE IT LEFT 2 PIXELS
	LD	(IX),A			;STORE IT AWAY
MVSKSP::
	LD	(PUTIT),HL
	LD	A,(PWRTIMR)		;GET THE TIMER VALUE
	CP	14H
	CALL	C,COLTOG
	PCALL	SPNAME,(PUTIT),58H
	LD	A,(IX)			;GET THE X AMOUNT
	LD	(XAMOUNT),A
	LD	A,(IX+1)		;GET THE Y AMOUNT
	LD	(YAMOUNT),A
	PCALL	SPMOVE,(PUTIT),(YAMOUNT),(XAMOUNT)
	LD	A,(PUTIT)
	ADD	A,04H
	LD	(EYES),A
	PCALL	SPNAME,(EYES),5CH
	PCALL	SPMOVE,(EYES),(YAMOUNT),(XAMOUNT)
	RET
COLTOG::;This routine will toggle the colour of the ghost sprites
	;to act as a warning for the player that the ghosts are about
	;to be changed to normal.
	;
	LD	A,(PWRTIMR)		;GET THE TIMER
	SRL	A			;DIVIDE IT BY 2
	RET	C			;IF IT IS BETWEEN HALF SECS, DONT TOGGLE
	SRL	A			;DIVIDE BY TWO AGAIN
	JP	C,COLBLU		;IF THERE IS A REMAINDER, MAKE HIM BLUE
	PCALL	SPCOLR,(PUTIT),WHITE
	LD	A,(PUTIT)
	ADD	A,04H
	LD	(TMP),A
	PCALL	SPCOLR,(TMP),DRED
	RET
COLBLU::PCALL	SPCOLR,(PUTIT),DBLUE
	LD	A,(PUTIT)
	ADD	A,4
	LD	(TMP),A
	PCALL	SPCOLR,(TMP),WHITE
	RET
HMOVGHO::
	; This routine will move the ghosts 2 pixels in their direction
	; given the ghost name and direction.  It does no checking
	;
	PUSH	BC
	POP	IX
	LD	A,E			;GET THE DIRECTION
	CP	00H			;IS IT RIGHT?
	JP	Z,HRIGHT		;MOVE HIM RIGHT
	CP	10H			;IS IT DOWN?
	JP	Z,HDOWN			;MOVE HIM DOWN
	CP	20H			;IS IT LEFT?
	JP	Z,HLEFT			;MOVE HIM LEFT
	LD	A,(IX+1)		;GET THE Y AMOUNT
	SBC	A,02H			;MOVE IT UP 2 PIXELS
	LD	(IX+1),A		;STORE IT BACK INTO THE Y VECTOR
	JP	HMVGHSP			;MOVE THE GHOST SPRITES
HRIGHT::LD	A,(IX)			;GET THE X AMOUNT
	ADD	A,02H			;MOVE IT RIGHT TWO PIXELS
	LD	(IX),A			;STORE IT BACK AWAY
	JP	HMVGHSP			;MOVE THE GHOST SPRITES
HDOWN::	LD	A,(IX+1)		;GET THE Y AMOUNT
	ADD	A,02H			;MOVE IT DOWN TWO PIXELS
	LD	(IX+1),A		;STORE IT AWAY
	JP	HMVGHSP			;MOVE THE GHOST SPRITES
HLEFT::	LD	A,(IX)			;GET THE X AMOUNT
	SBC	A,02H			;MOVE IT LEFT 2 PIXELS
	LD	(IX),A			;STORE IT AWAY
HMVGHSP::
;	ASIGN8.	(EYEFLG),TRUE
	REPT	04H
	  INC	HL
	ENDM
	LD	(PUTIT),HL
	LD	A,L
	LD	C,A
	LD	A,E
	SRL	A
	SRL	A
	ADD	A,40H
	LD	(TMP),A
	PCALL	SPNAME,(PUTIT),(TMP)	
	LD	(TMP),A
	LD	A,(IX)			;GET THE X AMOUNT
	LD	(XAMOUNT),A
	LD	A,(IX+1)		;GET THE Y AMOUNT
	LD	(YAMOUNT),A
	PCALL	SPMOVE,(PUTIT),(YAMOUNT),(XAMOUNT)
	RET
CHADIR::
	;This routine will change the direction of the pacman according
	;to the other set flag, so it moves in the generally right direction
	;
	IF8.	(OPTDIR),.EQ.,00H
	  ASIGN8. (RTFL),FALSE
	ELSE.
	  IF8.    (OPTDIR),.EQ.,10H
	    ASIGN8. (DNFL),FALSE
	  ELSE.
	    IF8.    (OPTDIR),.EQ.,20H
	      ASIGN8. (LTFL),FALSE
	    ELSE.
	      ASIGN8. (UPFL),FALSE
	    ENDIF.
	  ENDIF.
	ENDIF.
	IF8.	(RTFL),.EQ.,TRUE
	  ASIGN8. (OPTDIR),00H
	ELSE.
	  IF8.    (DNFL),.EQ.,TRUE
	    ASIGN8. (OPTDIR),10H
	  ELSE.
	    IF8.    (LTFL),.EQ.,TRUE
	      ASIGN8. (OPTDIR),20H
	    ELSE.
	      ASIGN8. (OPTDIR),30H
	    ENDIF.
	  ENDIF.
	ENDIF.
	RET	
GHOHIT::
	; This EXTREMELY important routine checks to see if the ghost is
	; infringing on any walls, based on his position and the direction he
	; is travelling in. It sets a flag to tell the main routine what's 
	; happening.
	;
	ASIGN8. (GHOX),C
	ASIGN8.	(GHOY),E
	ASIGN8.	(CHDIR),FALSE		;RESET THE FLAG
	IF8.	(GHODIR),.EQ.,30H
	  JP	CHKTUN
	ENDIF.
	IF8.	(GHODIR),.EQ.,10H
CHKTUN:	  IF8.	(GHOX),.GT.,0E0H	;THIS PART DESTROYS THE BUG
	    ASIGN8. (CHDIR),TRUE	;WHERE THE GHOST CAN LEAVE THE PLAYING
	    RET				;BOARD.
	  ENDIF.
	  IF8. (GHOX),.LT.,010H
	    ASIGN8. (CHDIR),TRUE
	    RET
	  ENDIF.
	ENDIF.
	IF8.	(GHODIR),.EQ.,30H
	IF8.	(GHOY),.EQ.,84H		;CHECK FOR THE SPOTS WHERE THEY ARE
	  IF8.	(GHOX),.EQ.,8CH		;NOT ALLOWED TO ENTER FROM THE SOUTH
	    ASIGN8. (CHDIR),TRUE
	    RET
	  ELSE.
	    IF8.  (GHOX),.EQ.,64H
	      ASIGN8. (CHDIR),TRUE
	      RET
	    ENDIF.
	  ENDIF.
	ELSE.
	  IF8.	(GHOY),.EQ.,3CH
	    IF8. (GHOX),.EQ.,94H
               ASIGN8. (CHDIR),TRUE
               RET
	    ELSE.
	      IF8. (GHOX),.EQ.,5CH
	       ASIGN8. (CHDIR),TRUE
	       RET
	      ENDIF.
	    ENDIF.
	  ENDIF.
	ENDIF.
	ENDIF.
	LD	A,(GHODIR)		;GET THE GHOST'S CURRENT DIRECTION
	AND	A			;IS IT RIGHT?
	JP 	NZ,GHO2			;NO...TRY DOWN
	ASIGN8.	(XMDFY),0DH		;MAKE AN ADJUSTMENT
	ASIGN8.	(YMDFY),06H		;ANOTHER
	JR	GHOPAT			;TRY IT OUT
GHO2::	CP	010H			;IS IT DOWN?
	JP	NZ,GHO3			;NO..TRY LEFT
	ASIGN8.	(XMDFY),06H		;ADJUST
	ASIGN8.	(YMDFY),0DH		;THEM
	JR	GHOPAT			;TRY IT OUT
GHO3::	CP	20H			;IS IT LEFT?
	JR	NZ,GHO4			;IT MUST BE UP THEN
	ASIGN8.	(XMDFY),02H		;ADJUST
	ASIGN8.	(YMDFY),06H		;THEM
	JR	GHOPAT			;TRY IT OUT
GHO4::	ASIGN8.	(XMDFY),06H		;ADJUST
	ASIGN8.	(YMDFY),02H		;THEM
GHOPAT::ADD8.	(XMDFY),(GHOX)		;ADD THE ADJUSTMENTS TO THE POSITION
	ADD8.	(YMDFY),(GHOY)		;FOR THE Y TOO
	LD	A,(XMDFY)		;GET THE MODIFIED X VECTOR
	SRL	A			;DIVIDE IT BY 2
	SRL	A			;AGAIN
	SRL	A			;AGAIN FOR A TOTAL DIVISION BY 8
	LD	(TMPX),A		;STORE IT AWAY
	LD	A,(GHOX)		;GET THE MODIFIED X
	AND	07H			;FIND THE REMAINDER
	CP	04H			;IS IT ON A DOT LINE?
	JP	Z,GHOC1			;YES...CONTINUE
	LD	A,(GHODIR)		;NO....GET THE CURRENT DIRECTION
	CP	10H			;IS IT RIGHT?
	JP	Z,GHOWAL		;YES...THEN HE'S TRYING TO HIT A WALL
	CP	30H			;NO....THEN SEE IF IT'S LEFT
	JP	Z,GHOWAL		;YES...HE'S TRYING TO HIT THE WALL
GHOC1::	LD	A,(YMDFY)		;GET THE MODIFIED Y VECTOR
	SRL	A			;DIVIDE BY 2
	SRL	A			;AGAIN
	SRL	A			;AGAIN FOR A TOTAL OF 8
	LD	(TMPY),A		;STORE IT AWAY
	LD	A,(GHOY)		;GET THE MODIFIED Y
	AND	07H			;GET THE REMAINDER
	CP	04H			;IS IT ON A DOT COLUMN?
	JP	Z,GHOC2			;YES...CONTINUE
	LD	A,(GHODIR)		;GET THE CURRENT DIRECTION
	CP	00H			;IS IT DOWN?
	JP	Z,GHOWAL		;YES...THEN HE'S TRYING TO HIT A WALL
	CP	20H			;NO...THEN CHECK IF IT'S UP
	JP	Z,GHOWAL		;YES...THEN HE'S GOING FOR A WALL
GHOC2::	PCALL	GETPAT,(TMPX),(TMPY)	;GET THE PATTERN IN QUESTION
	LD	(OFFPAT),A		;STORE THE OFFENDING PATTERN
	CP	19H
	RET	NC
	CP	08H			;IS IT A WALL PATTERN?
	JP	C,GHOWAL		;GO TO THE WALL HANDLER 
	CP	0FH			;CHECK THE OTHER WALL PIECES
	JP	NC,GHOWAL		;YES..ALL IN ALL IT'S JUST ANOTHER....
	RET
GHOWAL::
	ASIGN8.	(CHDIR),TRUE		;TELL THE GHOST TO CHANGE DIRECTION
GHFOR::	RET
	END
